{"version":3,"file":"browser.mjs","sources":["../../versions/dist/index.mjs","../../errors/dist/index.mjs","../__vite-browser-external","../../../node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js","../../math/dist/index.mjs","../../../node_modules/.pnpm/fflate@0.8.2/node_modules/fflate/esm/browser.js","../../utils/dist/index.mjs","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_assert.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/crypto.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/utils.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_md.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha256.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/hmac.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/pbkdf2.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/scrypt.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_u64.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha3.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/ripemd160.js","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha512.js","../../crypto/dist/index.browser.mjs","../../hasher/dist/index.mjs","../../abi-coder/dist/index.mjs","../../address/dist/index.mjs","../../transactions/dist/index.mjs","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_isPlaceholder.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_curry1.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/type.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_cloneRegExp.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_clone.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/clone.js","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/abstract/utils.js","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/defaultJsonSerializer.js","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/helpers.js","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/parseArgs.js","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/devAssert.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/isObjectLike.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/invariant.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/location.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printLocation.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/error/GraphQLError.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/error/syntaxError.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/ast.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/directiveLocation.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/kinds.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/characterClasses.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/blockString.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/tokenKind.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/lexer.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/inspect.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/instanceOf.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/source.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/parser.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printString.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/visitor.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printer.mjs","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/resolveRequestDocument.js","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/types.js","../../../node_modules/.pnpm/cross-fetch@4.0.0/node_modules/cross-fetch/dist/browser-ponyfill.js","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/index.js","../../../node_modules/.pnpm/tslib@2.8.0/node_modules/tslib/tslib.es6.mjs","../../../node_modules/.pnpm/graphql-tag@2.12.6_graphql@16.9.0/node_modules/graphql-tag/lib/index.js","../../address/dist/configs.mjs","../../transactions/dist/configs.mjs","../../../node_modules/.pnpm/@fuels+vm-asm@0.58.2/node_modules/@fuels/vm-asm/dist/web/index.mjs","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/abstract/modular.js","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/abstract/curve.js","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/abstract/weierstrass.js","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/_shortw_utils.js","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/secp256k1.js","../../../node_modules/.pnpm/events@3.3.0/node_modules/events/events.js","../../merkle/dist/index.mjs","../../account/dist/index.mjs","../../program/dist/index.mjs","../../script/dist/index.mjs","../src/cli/utils/createConfig.ts","../src/cli/types.ts","../../contract/dist/index.mjs","../../math/dist/configs.mjs","../../account/dist/configs.mjs","../../recipes/dist/index.mjs"],"sourcesContent":["// src/lib/getBuiltinVersions.ts\nfunction getBuiltinVersions() {\n  return {\n    FORC: \"0.66.6\",\n    FUEL_CORE: \"0.40.4\",\n    FUELS: \"0.99.0\"\n  };\n}\n\n// src/lib/semver.ts\nfunction parseVersion(version) {\n  const [major, minor, patch] = version.split(\".\").map((v) => parseInt(v, 10));\n  return { major, minor, patch };\n}\nfunction versionDiffs(version1, version2) {\n  const semver1 = parseVersion(version1);\n  const semver2 = parseVersion(version2);\n  const major = semver1.major - semver2.major;\n  const minor = semver1.minor - semver2.minor;\n  const patch = semver1.patch - semver2.patch;\n  return {\n    major,\n    minor,\n    patch,\n    fullVersionDiff: major || minor || patch\n  };\n}\nfunction gt(version1, version2) {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff > 0;\n}\nfunction eq(version1, version2) {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff === 0;\n}\nfunction majorEq(version1, version2) {\n  const { major } = versionDiffs(version1, version2);\n  return major === 0;\n}\nfunction minorEq(version1, version2) {\n  const { minor } = versionDiffs(version1, version2);\n  return minor === 0;\n}\nfunction patchEq(version1, version2) {\n  const { patch } = versionDiffs(version1, version2);\n  return patch === 0;\n}\n\n// src/lib/checkFuelCoreVersionCompatibility.ts\nfunction checkFuelCoreVersionCompatibility(networkVersion) {\n  const { FUEL_CORE: supportedVersion } = getBuiltinVersions();\n  if (/^\\d+\\.\\d+\\.\\d+\\D+/m.test(networkVersion)) {\n    console.warn(`You're running against an unreleased fuel-core version: ${networkVersion}. Things may work as expected, but it's not guaranteed. Please use a released version.      \nThis unreleased fuel-core build may include features and updates not yet supported by this version of the TS-SDK.`);\n  }\n  return {\n    supportedVersion,\n    isMajorSupported: majorEq(networkVersion, supportedVersion),\n    isMinorSupported: minorEq(networkVersion, supportedVersion),\n    isPatchSupported: patchEq(networkVersion, supportedVersion)\n  };\n}\n\n// src/index.ts\nvar versions = getBuiltinVersions();\nexport {\n  checkFuelCoreVersionCompatibility,\n  eq,\n  gt,\n  majorEq,\n  minorEq,\n  patchEq,\n  versions\n};\n//# sourceMappingURL=index.mjs.map","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/error-codes.ts\nvar ErrorCode = /* @__PURE__ */ ((ErrorCode2) => {\n  ErrorCode2[\"NO_ABIS_FOUND\"] = \"no-abis-found\";\n  ErrorCode2[\"ABI_TYPES_AND_VALUES_MISMATCH\"] = \"abi-types-and-values-mismatch\";\n  ErrorCode2[\"ABI_MAIN_METHOD_MISSING\"] = \"abi-main-method-missing\";\n  ErrorCode2[\"INVALID_COMPONENT\"] = \"invalid-component\";\n  ErrorCode2[\"CONFIGURABLE_NOT_FOUND\"] = \"configurable-not-found\";\n  ErrorCode2[\"TYPE_NOT_FOUND\"] = \"type-not-found\";\n  ErrorCode2[\"LOG_TYPE_NOT_FOUND\"] = \"log-type-not-found\";\n  ErrorCode2[\"TYPE_NOT_SUPPORTED\"] = \"type-not-supported\";\n  ErrorCode2[\"INVALID_DECODE_VALUE\"] = \"invalid-decode-value\";\n  ErrorCode2[\"JSON_ABI_ERROR\"] = \"json-abi-error\";\n  ErrorCode2[\"TYPE_ID_NOT_FOUND\"] = \"type-id-not-found\";\n  ErrorCode2[\"BIN_FILE_NOT_FOUND\"] = \"bin-file-not-found\";\n  ErrorCode2[\"CODER_NOT_FOUND\"] = \"coder-not-found\";\n  ErrorCode2[\"INVALID_DATA\"] = \"invalid-data\";\n  ErrorCode2[\"FUNCTION_NOT_FOUND\"] = \"function-not-found\";\n  ErrorCode2[\"UNSUPPORTED_ENCODING_VERSION\"] = \"unsupported-encoding-version\";\n  ErrorCode2[\"TIMEOUT_EXCEEDED\"] = \"timeout-exceeded\";\n  ErrorCode2[\"CONFIG_FILE_NOT_FOUND\"] = \"config-file-not-found\";\n  ErrorCode2[\"CONFIG_FILE_ALREADY_EXISTS\"] = \"config-file-already-exists\";\n  ErrorCode2[\"WORKSPACE_NOT_DETECTED\"] = \"workspace-not-detected\";\n  ErrorCode2[\"INVALID_ADDRESS\"] = \"invalid-address\";\n  ErrorCode2[\"INVALID_EVM_ADDRESS\"] = \"invalid-evm-address\";\n  ErrorCode2[\"INVALID_B256_ADDRESS\"] = \"invalid-b256-address\";\n  ErrorCode2[\"CHAIN_INFO_CACHE_EMPTY\"] = \"chain-info-cache-empty\";\n  ErrorCode2[\"NODE_INFO_CACHE_EMPTY\"] = \"node-info-cache-empty\";\n  ErrorCode2[\"MISSING_PROVIDER\"] = \"missing-provider\";\n  ErrorCode2[\"INVALID_PROVIDER\"] = \"invalid-provider\";\n  ErrorCode2[\"CONNECTION_REFUSED\"] = \"connection-refused\";\n  ErrorCode2[\"INVALID_URL\"] = \"invalid-url\";\n  ErrorCode2[\"INVALID_PUBLIC_KEY\"] = \"invalid-public-key\";\n  ErrorCode2[\"WALLET_MANAGER_ERROR\"] = \"wallet-manager-error\";\n  ErrorCode2[\"HD_WALLET_ERROR\"] = \"hd-wallet-error\";\n  ErrorCode2[\"MISSING_CONNECTOR\"] = \"missing-connector\";\n  ErrorCode2[\"PARSE_FAILED\"] = \"parse-failed\";\n  ErrorCode2[\"ENCODE_ERROR\"] = \"encode-error\";\n  ErrorCode2[\"DECODE_ERROR\"] = \"decode-error\";\n  ErrorCode2[\"ENV_DEPENDENCY_MISSING\"] = \"env-dependency-missing\";\n  ErrorCode2[\"INVALID_TTL\"] = \"invalid-ttl\";\n  ErrorCode2[\"INVALID_INPUT_PARAMETERS\"] = \"invalid-input-parameters\";\n  ErrorCode2[\"NOT_IMPLEMENTED\"] = \"not-implemented\";\n  ErrorCode2[\"NOT_SUPPORTED\"] = \"not-supported\";\n  ErrorCode2[\"CONVERTING_FAILED\"] = \"converting-error\";\n  ErrorCode2[\"ELEMENT_NOT_FOUND\"] = \"element-not-found\";\n  ErrorCode2[\"MISSING_REQUIRED_PARAMETER\"] = \"missing-required-parameter\";\n  ErrorCode2[\"INVALID_REQUEST\"] = \"invalid-request\";\n  ErrorCode2[\"INVALID_TRANSFER_AMOUNT\"] = \"invalid-transfer-amount\";\n  ErrorCode2[\"NOT_ENOUGH_FUNDS\"] = \"not-enough-funds\";\n  ErrorCode2[\"INVALID_CREDENTIALS\"] = \"invalid-credentials\";\n  ErrorCode2[\"HASHER_LOCKED\"] = \"hasher-locked\";\n  ErrorCode2[\"GAS_PRICE_TOO_LOW\"] = \"gas-price-too-low\";\n  ErrorCode2[\"GAS_LIMIT_TOO_LOW\"] = \"gas-limit-too-low\";\n  ErrorCode2[\"MAX_FEE_TOO_LOW\"] = \"max-fee-too-low\";\n  ErrorCode2[\"TRANSACTION_NOT_FOUND\"] = \"transaction-not-found\";\n  ErrorCode2[\"TRANSACTION_FAILED\"] = \"transaction-failed\";\n  ErrorCode2[\"INVALID_CONFIGURABLE_CONSTANTS\"] = \"invalid-configurable-constants\";\n  ErrorCode2[\"INVALID_TRANSACTION_INPUT\"] = \"invalid-transaction-input\";\n  ErrorCode2[\"INVALID_TRANSACTION_OUTPUT\"] = \"invalid-transaction-output\";\n  ErrorCode2[\"INVALID_TRANSACTION_STATUS\"] = \"invalid-transaction-status\";\n  ErrorCode2[\"UNSUPPORTED_TRANSACTION_TYPE\"] = \"unsupported-transaction-type\";\n  ErrorCode2[\"TRANSACTION_ERROR\"] = \"transaction-error\";\n  ErrorCode2[\"INVALID_POLICY_TYPE\"] = \"invalid-policy-type\";\n  ErrorCode2[\"DUPLICATED_POLICY\"] = \"duplicated-policy\";\n  ErrorCode2[\"TRANSACTION_SQUEEZED_OUT\"] = \"transaction-squeezed-out\";\n  ErrorCode2[\"CONTRACT_SIZE_EXCEEDS_LIMIT\"] = \"contract-size-exceeds-limit\";\n  ErrorCode2[\"INVALID_CHUNK_SIZE_MULTIPLIER\"] = \"invalid-chunk-size-multiplier\";\n  ErrorCode2[\"MAX_INPUTS_EXCEEDED\"] = \"max-inputs-exceeded\";\n  ErrorCode2[\"FUNDS_TOO_LOW\"] = \"funds-too-low\";\n  ErrorCode2[\"MAX_OUTPUTS_EXCEEDED\"] = \"max-outputs-exceeded\";\n  ErrorCode2[\"MAX_COINS_REACHED\"] = \"max-coins-reached\";\n  ErrorCode2[\"ASSET_BURN_DETECTED\"] = \"asset-burn-detected\";\n  ErrorCode2[\"INVALID_RECEIPT_TYPE\"] = \"invalid-receipt-type\";\n  ErrorCode2[\"INVALID_WORD_LIST\"] = \"invalid-word-list\";\n  ErrorCode2[\"INVALID_MNEMONIC\"] = \"invalid-mnemonic\";\n  ErrorCode2[\"INVALID_ENTROPY\"] = \"invalid-entropy\";\n  ErrorCode2[\"INVALID_SEED\"] = \"invalid-seed\";\n  ErrorCode2[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n  ErrorCode2[\"INVALID_PASSWORD\"] = \"invalid-password\";\n  ErrorCode2[\"ACCOUNT_REQUIRED\"] = \"account-required\";\n  ErrorCode2[\"UNLOCKED_WALLET_REQUIRED\"] = \"unlocked-wallet-required\";\n  ErrorCode2[\"NUMBER_TOO_BIG\"] = \"number-too-big\";\n  ErrorCode2[\"ERROR_BUILDING_BLOCK_EXPLORER_URL\"] = \"error-building-block-explorer-url\";\n  ErrorCode2[\"VITEPRESS_PLUGIN_ERROR\"] = \"vitepress-plugin-error\";\n  ErrorCode2[\"SCRIPT_REVERTED\"] = \"script-reverted\";\n  ErrorCode2[\"SCRIPT_RETURN_INVALID_TYPE\"] = \"script-return-invalid-type\";\n  ErrorCode2[\"STREAM_PARSING_ERROR\"] = \"stream-parsing-error\";\n  ErrorCode2[\"NODE_LAUNCH_FAILED\"] = \"node-launch-failed\";\n  ErrorCode2[\"UNKNOWN\"] = \"unknown\";\n  return ErrorCode2;\n})(ErrorCode || {});\n\n// src/fuel-error.ts\nimport { versions } from \"@fuel-ts/versions\";\nvar _FuelError = class extends Error {\n  VERSIONS = versions;\n  metadata;\n  rawError;\n  static parse(e) {\n    const error = e;\n    if (error.code === void 0) {\n      throw new _FuelError(\n        \"parse-failed\" /* PARSE_FAILED */,\n        \"Failed to parse the error object. The required 'code' property is missing.\"\n      );\n    }\n    const enumValues = Object.values(ErrorCode);\n    const codeIsKnown = enumValues.includes(error.code);\n    if (!codeIsKnown) {\n      throw new _FuelError(\n        \"parse-failed\" /* PARSE_FAILED */,\n        `Unknown error code: ${error.code}. Accepted codes: ${enumValues.join(\", \")}.`\n      );\n    }\n    return new _FuelError(error.code, error.message);\n  }\n  code;\n  constructor(code, message, metadata = {}, rawError = null) {\n    super(message);\n    this.code = code;\n    this.name = \"FuelError\";\n    this.metadata = metadata;\n    this.rawError = rawError;\n  }\n  toObject() {\n    const { code, name, message, metadata, VERSIONS, rawError } = this;\n    return { code, name, message, metadata, VERSIONS, rawError };\n  }\n};\nvar FuelError = _FuelError;\n__publicField(FuelError, \"CODES\", ErrorCode);\nexport {\n  ErrorCode,\n  FuelError\n};\n//# sourceMappingURL=index.mjs.map","export default {}","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","// src/bn.ts\nimport { ErrorCode, FuelError } from \"@fuel-ts/errors\";\nimport BnJs from \"bn.js\";\n\n// src/configs.ts\nvar DEFAULT_PRECISION = 9;\nvar DEFAULT_MIN_PRECISION = 3;\nvar DEFAULT_DECIMAL_UNITS = 9;\n\n// src/bn.ts\nvar BN = class extends BnJs {\n  MAX_U64 = \"0xFFFFFFFFFFFFFFFF\";\n  constructor(value, base, endian) {\n    let bnValue = value;\n    let bnBase = base;\n    if (BN.isBN(value)) {\n      bnValue = value.toArray();\n    } else if (typeof value === \"string\" && value.slice(0, 2) === \"0x\") {\n      bnValue = value.substring(2);\n      bnBase = base || \"hex\";\n    }\n    if (typeof bnValue === \"number\" && bnValue > Number.MAX_SAFE_INTEGER) {\n      throw new FuelError(\n        ErrorCode.NUMBER_TOO_BIG,\n        `Value ${bnValue} is too large to be represented as a number, use string instead.`\n      );\n    }\n    super(bnValue == null ? 0 : bnValue, bnBase, endian);\n  }\n  // ANCHOR: HELPERS\n  // make sure we always include `0x` in hex strings\n  toString(base, length) {\n    const output = super.toString(base, length);\n    if (base === 16 || base === \"hex\") {\n      return `0x${output}`;\n    }\n    return output;\n  }\n  toHex(bytesPadding) {\n    const bytes = bytesPadding || 0;\n    const bytesLength = bytes * 2;\n    if (this.isNeg()) {\n      throw new FuelError(ErrorCode.CONVERTING_FAILED, \"Cannot convert negative value to hex.\");\n    }\n    if (bytesPadding && this.byteLength() > bytesPadding) {\n      throw new FuelError(\n        ErrorCode.CONVERTING_FAILED,\n        `Provided value ${this} is too large. It should fit within ${bytesPadding} bytes.`\n      );\n    }\n    return this.toString(16, bytesLength);\n  }\n  toBytes(bytesPadding) {\n    if (this.isNeg()) {\n      throw new FuelError(ErrorCode.CONVERTING_FAILED, \"Cannot convert negative value to bytes.\");\n    }\n    return Uint8Array.from(this.toArray(void 0, bytesPadding));\n  }\n  toJSON() {\n    return this.toString(16);\n  }\n  valueOf() {\n    return this.toString();\n  }\n  format(options) {\n    const {\n      units = DEFAULT_DECIMAL_UNITS,\n      precision: initialPrecision = DEFAULT_PRECISION,\n      minPrecision: initialMinPrecision = DEFAULT_MIN_PRECISION\n    } = options || {};\n    if (units === 0) {\n      return this.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    const minPrecision = initialMinPrecision > initialPrecision ? initialPrecision : initialMinPrecision;\n    const precision = initialPrecision > initialMinPrecision ? initialPrecision : initialMinPrecision;\n    const formattedUnits = this.formatUnits(units);\n    const [integerPart, fractionalPart = \"\"] = formattedUnits.split(\".\");\n    const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    if (precision === 0) {\n      return formattedInteger;\n    }\n    let formattedFractional = fractionalPart.replace(/0+$/, \"\");\n    if (formattedFractional.length > precision) {\n      if (integerPart === \"0\") {\n        const firstNonZeroIndex = formattedFractional.search(/[1-9]/);\n        if (firstNonZeroIndex >= 0 && firstNonZeroIndex < precision) {\n          formattedFractional = formattedFractional.slice(0, precision);\n        } else {\n          formattedFractional = formattedFractional.slice(0, firstNonZeroIndex + 1);\n        }\n      } else {\n        formattedFractional = formattedFractional.slice(0, precision);\n      }\n    } else {\n      formattedFractional = formattedFractional.slice(0, precision);\n    }\n    if (formattedFractional.length < minPrecision) {\n      formattedFractional = formattedFractional.padEnd(minPrecision, \"0\");\n    }\n    if (formattedFractional === \"\" && minPrecision === 0) {\n      return formattedInteger;\n    }\n    return formattedFractional ? `${formattedInteger}.${formattedFractional}` : formattedInteger;\n  }\n  formatUnits(units = DEFAULT_DECIMAL_UNITS) {\n    const valueString = this.toString();\n    const valueLength = valueString.length;\n    if (valueLength <= units) {\n      const paddedZeros = \"0\".repeat(units - valueLength);\n      return `0.${paddedZeros}${valueString}`;\n    }\n    const integerPart = valueString.slice(0, valueLength - units);\n    const fractionalPart = valueString.slice(valueLength - units);\n    return `${integerPart}.${fractionalPart}`;\n  }\n  // END ANCHOR: HELPERS\n  // ANCHOR: OVERRIDES to accept better inputs\n  add(v) {\n    return this.caller(v, \"add\");\n  }\n  pow(v) {\n    return this.caller(v, \"pow\");\n  }\n  sub(v) {\n    return this.caller(v, \"sub\");\n  }\n  div(v) {\n    return this.caller(v, \"div\");\n  }\n  mul(v) {\n    return this.caller(v, \"mul\");\n  }\n  mod(v) {\n    return this.caller(v, \"mod\");\n  }\n  divRound(v) {\n    return this.caller(v, \"divRound\");\n  }\n  lt(v) {\n    return this.caller(v, \"lt\");\n  }\n  lte(v) {\n    return this.caller(v, \"lte\");\n  }\n  gt(v) {\n    return this.caller(v, \"gt\");\n  }\n  gte(v) {\n    return this.caller(v, \"gte\");\n  }\n  eq(v) {\n    return this.caller(v, \"eq\");\n  }\n  cmp(v) {\n    return this.caller(v, \"cmp\");\n  }\n  // END ANCHOR: OVERRIDES to accept better inputs\n  // ANCHOR: OVERRIDES to output our BN type\n  sqr() {\n    return new BN(super.sqr().toArray());\n  }\n  neg() {\n    return new BN(super.neg().toArray());\n  }\n  abs() {\n    return new BN(super.abs().toArray());\n  }\n  toTwos(width) {\n    return new BN(super.toTwos(width).toArray());\n  }\n  fromTwos(width) {\n    return new BN(super.fromTwos(width).toArray());\n  }\n  // END ANCHOR: OVERRIDES to output our BN type\n  // ANCHOR: OVERRIDES to avoid losing references\n  caller(v, methodName) {\n    const output = super[methodName](new BN(v));\n    if (BN.isBN(output)) {\n      return new BN(output.toArray());\n    }\n    if (typeof output === \"boolean\") {\n      return output;\n    }\n    return output;\n  }\n  clone() {\n    return new BN(this.toArray());\n  }\n  mulTo(num, out) {\n    const output = new BnJs(this.toArray()).mulTo(num, out);\n    return new BN(output.toArray());\n  }\n  egcd(p) {\n    const { a, b, gcd } = new BnJs(this.toArray()).egcd(p);\n    return {\n      a: new BN(a.toArray()),\n      b: new BN(b.toArray()),\n      gcd: new BN(gcd.toArray())\n    };\n  }\n  divmod(num, mode, positive) {\n    const { div, mod } = new BnJs(this.toArray()).divmod(new BN(num), mode, positive);\n    return {\n      div: new BN(div?.toArray()),\n      mod: new BN(mod?.toArray())\n    };\n  }\n  maxU64() {\n    return this.gte(this.MAX_U64) ? new BN(this.MAX_U64) : this;\n  }\n  max(num) {\n    return this.gte(num) ? new BN(num) : this;\n  }\n  normalizeZeroToOne() {\n    return this.isZero() ? new BN(1) : this;\n  }\n  // END ANCHOR: OVERRIDES to avoid losing references\n};\nvar bn = (value, base, endian) => new BN(value, base, endian);\nbn.parseUnits = (value, units = DEFAULT_DECIMAL_UNITS) => {\n  const valueToParse = value === \".\" ? \"0.\" : value;\n  const [valueUnits = \"0\", valueDecimals = \"0\"] = valueToParse.split(\".\");\n  const length = valueDecimals.length;\n  if (units === 0) {\n    const valueWithoutDecimals = valueToParse.replace(\",\", \"\").split(\".\")[0];\n    return bn(valueWithoutDecimals);\n  }\n  if (length > units) {\n    throw new FuelError(\n      ErrorCode.CONVERTING_FAILED,\n      `Decimal can't have more than ${units} digits.`\n    );\n  }\n  const decimals = Array.from({ length: units }).fill(\"0\");\n  decimals.splice(0, length, valueDecimals);\n  const amount = `${valueUnits.replaceAll(\",\", \"\")}${decimals.join(\"\")}`;\n  return bn(amount);\n};\n\n// src/decimal.ts\nfunction toFixed(value, options) {\n  const { precision = DEFAULT_PRECISION, minPrecision = DEFAULT_MIN_PRECISION } = options || {};\n  const [valueUnits = \"0\", valueDecimals = \"0\"] = String(value || \"0.0\").split(\".\");\n  const groupRegex = /(\\d)(?=(\\d{3})+\\b)/g;\n  const units = valueUnits.replace(groupRegex, \"$1,\");\n  let decimals = valueDecimals.slice(0, precision);\n  if (minPrecision < precision) {\n    const trimmedDecimal = decimals.match(/.*[1-9]{1}/);\n    const lastNonZeroIndex = trimmedDecimal?.[0].length || 0;\n    const keepChars = Math.max(minPrecision, lastNonZeroIndex);\n    decimals = decimals.slice(0, keepChars);\n  }\n  const decimalPortion = decimals ? `.${decimals}` : \"\";\n  return `${units}${decimalPortion}`;\n}\n\n// src/functional.ts\nfunction toNumber(value) {\n  return bn(value).toNumber();\n}\nfunction toHex(value, bytesPadding) {\n  return bn(value).toHex(bytesPadding);\n}\nfunction toBytes(value, bytesPadding) {\n  return bn(value).toBytes(bytesPadding);\n}\nfunction formatUnits(value, units) {\n  return bn(value).formatUnits(units);\n}\nfunction format(value, options) {\n  return bn(value).format(options);\n}\n\n// src/math.ts\nfunction max(...numbers) {\n  return numbers.reduce((prev, cur) => bn(cur).gt(prev) ? bn(cur) : prev, bn(0));\n}\nfunction multiply(...numbers) {\n  return bn(Math.ceil(numbers.reduce((a, b) => bn(a).mul(b), bn(1)).toNumber()));\n}\nexport {\n  BN,\n  bn,\n  format,\n  formatUnits,\n  max,\n  multiply,\n  toBytes,\n  toFixed,\n  toHex,\n  toNumber\n};\n//# sourceMappingURL=index.mjs.map","// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/utils/capitalizeString.ts\nvar capitalizeString = (str) => {\n  if (!str.length) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n// src/utils/chunkAndPadBytes.ts\nvar chunkAndPadBytes = (bytes, chunkSize) => {\n  const chunks = [];\n  for (let offset = 0; offset < bytes.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytes.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n  const lastChunk = chunks[chunks.length - 1];\n  const remainingBytes = bytes.length % chunkSize;\n  const paddedChunkLength = remainingBytes + (8 - remainingBytes % 8) % 8;\n  const newChunk = lastChunk.slice(0, paddedChunkLength);\n  chunks[chunks.length - 1] = newChunk;\n  return chunks;\n};\n\n// src/utils/arrayify.ts\nimport { FuelError, ErrorCode } from \"@fuel-ts/errors\";\nvar arrayify = (value, name, copy = true) => {\n  if (value instanceof Uint8Array) {\n    if (copy) {\n      return new Uint8Array(value);\n    }\n    return value;\n  }\n  if (typeof value === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n  const nameMessage = name ? ` ${name} -` : \"\";\n  const message = `invalid data:${nameMessage} ${value}\nIf you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;\n  throw new FuelError(ErrorCode.INVALID_DATA, message);\n};\n\n// src/utils/concat.ts\nvar concatBytes = (arrays) => {\n  const byteArrays = arrays.map((array) => {\n    if (array instanceof Uint8Array) {\n      return array;\n    }\n    return Uint8Array.from(array);\n  });\n  const totalSize = byteArrays.reduce((accum, item) => accum + item.length, 0);\n  const concatenated = new Uint8Array(totalSize);\n  byteArrays.reduce((offset, object) => {\n    concatenated.set(object, offset);\n    return offset + object.length;\n  }, 0);\n  return concatenated;\n};\nvar concat = (arrays) => {\n  const bytes = arrays.map((v) => arrayify(v));\n  return concatBytes(bytes);\n};\n\n// src/utils/hexlify.ts\nvar HexCharacters = \"0123456789abcdef\";\nfunction hexlify(data) {\n  const bytes = arrayify(data);\n  let result = \"0x\";\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];\n  }\n  return result;\n}\n\n// src/utils/normalizeString.ts\nimport { ErrorCode as ErrorCode2, FuelError as FuelError2 } from \"@fuel-ts/errors\";\nvar normalizeString = (str) => {\n  const transformations = [\n    (s) => s.replace(/\\s+/g, \"-\"),\n    // spaces to -\n    (s) => s.replace(/\\./g, \"-\"),\n    // dots to -\n    (s) => s.replace(/_/g, \"-\"),\n    // underscore to -\n    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()),\n    // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, \"\"),\n    // delete any '-' left\n    (s) => s.replace(/^\\d+/, \"\"),\n    // removes leading digits\n    (s) => s[0].toUpperCase() + s.slice(1)\n    // capitalize first letter\n  ];\n  const output = transformations.reduce((s, t) => t(s), str);\n  if (output === \"\") {\n    const errMsg = `The provided string '${str}' results in an empty output after`.concat(\n      ` normalization, therefore, it can't normalize string.`\n    );\n    throw new FuelError2(ErrorCode2.PARSE_FAILED, errMsg);\n  }\n  return output;\n};\n\n// src/utils/date-time.ts\nvar TAI64_LEAP_SECONDS = 37;\nvar TAI64_UNIX_OFFSET = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);\nvar msToSeconds = (ms) => Math.floor(ms / 1e3);\nvar secondsToMs = (seconds) => seconds * 1e3;\nvar tai64ToUnixSeconds = (tai64) => Number(BigInt(tai64) - TAI64_UNIX_OFFSET);\nvar unixSecondsToTai64 = (unixSeconds) => String(BigInt(unixSeconds) + TAI64_UNIX_OFFSET);\nvar tai64ToUnixMilliseconds = (tai64) => secondsToMs(tai64ToUnixSeconds(tai64));\nvar _DateTime = class extends Date {\n  /**\n   * Generates a new DateTime instance from a Tai64 timestamp.\n   *\n   * @param tai64 - Tai64 timestamp\n   * @returns a new DateTime instance\n   */\n  static fromTai64(tai64) {\n    return new _DateTime(tai64ToUnixMilliseconds(tai64));\n  }\n  /**\n   * @param unixMilliseconds - unix milliseconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixMilliseconds(unixMilliseconds) {\n    return new _DateTime(unixMilliseconds);\n  }\n  /**\n   * @param unixSeconds - unix seconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixSeconds(unixSeconds) {\n    return new _DateTime(secondsToMs(unixSeconds));\n  }\n  /**\n   * Hide the constructor to prevent direct instantiation.\n   */\n  constructor(date) {\n    super(date);\n  }\n  /**\n   * Returns the Tai64 timestamp.\n   *\n   * @returns the Tai64 timestamp\n   */\n  toTai64() {\n    return unixSecondsToTai64(this.toUnixSeconds());\n  }\n  /**\n   * @returns the unix milliseconds timestamp\n   */\n  toUnixMilliseconds() {\n    return this.getTime();\n  }\n  /**\n   * @returns the unix seconds timestamp\n   */\n  toUnixSeconds() {\n    return msToSeconds(this.getTime());\n  }\n};\nvar DateTime = _DateTime;\n__publicField(DateTime, \"TAI64_NULL\", \"\");\n\n// src/utils/sleep.ts\nfunction sleep(time) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true);\n    }, time);\n  });\n}\n\n// src/utils/defaultSnapshots/chainConfig.json\nvar chainConfig_default = {\n  chain_name: \"local_testnet\",\n  consensus_parameters: {\n    V2: {\n      tx_params: {\n        V1: {\n          max_inputs: 255,\n          max_outputs: 255,\n          max_witnesses: 255,\n          max_gas_per_tx: 3e7,\n          max_size: 112640,\n          max_bytecode_subsections: 256\n        }\n      },\n      predicate_params: {\n        V1: {\n          max_predicate_length: 24576,\n          max_predicate_data_length: 24576,\n          max_message_data_length: 102400,\n          max_gas_per_predicate: 1e6\n        }\n      },\n      script_params: {\n        V1: {\n          max_script_length: 102400,\n          max_script_data_length: 102400\n        }\n      },\n      contract_params: {\n        V1: {\n          contract_max_size: 112640,\n          max_storage_slots: 1760\n        }\n      },\n      fee_params: {\n        V1: {\n          gas_price_factor: 115e4,\n          gas_per_byte: 63\n        }\n      },\n      chain_id: 0,\n      gas_costs: {\n        V4: {\n          add: 2,\n          addi: 2,\n          and: 2,\n          andi: 2,\n          bal: 274,\n          bhei: 2,\n          bhsh: 2,\n          burn: 7566,\n          cb: 2,\n          cfsi: 2,\n          div: 2,\n          divi: 2,\n          eck1: 1489,\n          ecr1: 20513,\n          eq: 2,\n          exp: 2,\n          expi: 2,\n          flag: 2,\n          gm: 2,\n          gt: 2,\n          gtf: 3,\n          ji: 2,\n          jmp: 2,\n          jne: 2,\n          jnei: 2,\n          jnzi: 2,\n          jmpf: 2,\n          jmpb: 2,\n          jnzf: 2,\n          jnzb: 2,\n          jnef: 2,\n          jneb: 2,\n          lb: 2,\n          log: 80,\n          lt: 2,\n          lw: 2,\n          mint: 6566,\n          mlog: 2,\n          mod: 2,\n          modi: 2,\n          move: 2,\n          movi: 1,\n          mroo: 3,\n          mul: 2,\n          muli: 2,\n          mldv: 3,\n          noop: 1,\n          not: 2,\n          or: 1,\n          ori: 2,\n          poph: 2,\n          popl: 2,\n          pshh: 5,\n          pshl: 5,\n          ret_contract: 43,\n          rvrt_contract: 39,\n          sb: 2,\n          sll: 2,\n          slli: 2,\n          srl: 2,\n          srli: 2,\n          srw: 237,\n          sub: 2,\n          subi: 2,\n          sw: 2,\n          sww: 5708,\n          time: 106,\n          tr: 9253,\n          tro: 7199,\n          wdcm: 2,\n          wqcm: 2,\n          wdop: 2,\n          wqop: 3,\n          wdml: 3,\n          wqml: 3,\n          wddv: 3,\n          wqdv: 4,\n          wdmd: 6,\n          wqmd: 9,\n          wdam: 6,\n          wqam: 6,\n          wdmm: 6,\n          wqmm: 6,\n          xor: 2,\n          xori: 2,\n          aloc: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 35\n            }\n          },\n          bsiz: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 564\n            }\n          },\n          bldd: {\n            LightOperation: {\n              base: 33,\n              units_per_gas: 130\n            }\n          },\n          cfe: {\n            LightOperation: {\n              base: 10,\n              units_per_gas: 62\n            }\n          },\n          cfei: {\n            LightOperation: {\n              base: 10,\n              units_per_gas: 66\n            }\n          },\n          call: {\n            LightOperation: {\n              base: 6934,\n              units_per_gas: 14\n            }\n          },\n          ccp: {\n            LightOperation: {\n              base: 21,\n              units_per_gas: 155\n            }\n          },\n          croo: {\n            LightOperation: {\n              base: 69,\n              units_per_gas: 4\n            }\n          },\n          csiz: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 580\n            }\n          },\n          ed19: {\n            LightOperation: {\n              base: 3232,\n              units_per_gas: 7\n            }\n          },\n          k256: {\n            LightOperation: {\n              base: 21,\n              units_per_gas: 6\n            }\n          },\n          ldc: {\n            LightOperation: {\n              base: 84,\n              units_per_gas: 113\n            }\n          },\n          logd: {\n            LightOperation: {\n              base: 278,\n              units_per_gas: 5\n            }\n          },\n          mcl: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1282\n            }\n          },\n          mcli: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1250\n            }\n          },\n          mcp: {\n            LightOperation: {\n              base: 3,\n              units_per_gas: 385\n            }\n          },\n          mcpi: {\n            LightOperation: {\n              base: 7,\n              units_per_gas: 585\n            }\n          },\n          meq: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1234\n            }\n          },\n          retd_contract: {\n            LightOperation: {\n              base: 227,\n              units_per_gas: 5\n            }\n          },\n          s256: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 5\n            }\n          },\n          scwq: {\n            HeavyOperation: {\n              base: 5666,\n              gas_per_unit: 6628\n            }\n          },\n          smo: {\n            LightOperation: {\n              base: 14635,\n              units_per_gas: 3\n            }\n          },\n          srwq: {\n            HeavyOperation: {\n              base: 245,\n              gas_per_unit: 243\n            }\n          },\n          swwq: {\n            HeavyOperation: {\n              base: 5661,\n              gas_per_unit: 5776\n            }\n          },\n          contract_root: {\n            LightOperation: {\n              base: 24,\n              units_per_gas: 3\n            }\n          },\n          state_root: {\n            HeavyOperation: {\n              base: 189,\n              gas_per_unit: 96\n            }\n          },\n          new_storage_per_byte: 63,\n          vm_initialization: {\n            LightOperation: {\n              base: 3127,\n              units_per_gas: 61\n            }\n          }\n        }\n      },\n      base_asset_id: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\",\n      block_gas_limit: 3e7,\n      block_transaction_size_limit: 260096,\n      privileged_address: \"0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  consensus: {\n    PoA: {\n      signing_key: \"0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d\"\n    }\n  }\n};\n\n// src/utils/defaultSnapshots/metadata.json\nvar metadata_default = {\n  chain_config: \"chainConfig.json\",\n  table_encoding: {\n    Json: {\n      filepath: \"stateConfig.json\"\n    }\n  }\n};\n\n// src/utils/defaultSnapshots/stateConfig.json\nvar stateConfig_default = {\n  coins: [],\n  messages: [],\n  contracts: [],\n  blobs: [],\n  block_height: 0,\n  da_block_height: 0\n};\n\n// src/utils/defaultSnapshotConfigs.ts\nvar defaultSnapshotConfigs = {\n  chainConfig: chainConfig_default,\n  metadata: metadata_default,\n  stateConfig: stateConfig_default\n};\nvar defaultConsensusKey = \"0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298\";\n\n// src/utils/isDefined.ts\nfunction isDefined(value) {\n  return value !== void 0;\n}\n\n// src/utils/base58.ts\nimport { ErrorCode as ErrorCode3, FuelError as FuelError3 } from \"@fuel-ts/errors\";\nimport { bn } from \"@fuel-ts/math\";\nvar BN_0 = bn(0);\nvar BN_58 = bn(58);\nvar Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar Lookup = null;\nfunction getAlpha(letter) {\n  if (Lookup == null) {\n    Lookup = {};\n    for (let i = 0; i < Alphabet.length; i++) {\n      Lookup[Alphabet[i]] = bn(i);\n    }\n  }\n  const result = Lookup[letter];\n  if (result == null) {\n    throw new FuelError3(ErrorCode3.INVALID_DATA, `invalid base58 value ${letter}`);\n  }\n  return bn(result);\n}\nfunction encodeBase58(_value) {\n  const bytes = arrayify(_value);\n  let value = bn(bytes);\n  let result = \"\";\n  while (value.gt(BN_0)) {\n    result = Alphabet[Number(value.mod(BN_58))] + result;\n    value = value.div(BN_58);\n  }\n  for (let i = 0; i < bytes.length; i++) {\n    if (bytes[i]) {\n      break;\n    }\n    result = Alphabet[0] + result;\n  }\n  return result;\n}\nfunction decodeBase58(value) {\n  let result = BN_0;\n  for (let i = 0; i < value.length; i++) {\n    result = result.mul(BN_58);\n    result = result.add(getAlpha(value[i].toString()));\n  }\n  return result;\n}\n\n// src/utils/dataSlice.ts\nimport { ErrorCode as ErrorCode4, FuelError as FuelError4 } from \"@fuel-ts/errors\";\nfunction dataSlice(data, start, end) {\n  const bytes = arrayify(data);\n  if (end != null && end > bytes.length) {\n    throw new FuelError4(ErrorCode4.INVALID_DATA, \"cannot slice beyond data bounds\");\n  }\n  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n\n// src/utils/toUtf8Bytes.ts\nimport { FuelError as FuelError5, ErrorCode as ErrorCode5 } from \"@fuel-ts/errors\";\nfunction toUtf8Bytes(stri, form = true) {\n  let str = stri;\n  if (form) {\n    str = stri.normalize(\"NFC\");\n  }\n  const result = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      result.push(c);\n    } else if (c < 2048) {\n      result.push(c >> 6 | 192);\n      result.push(c & 63 | 128);\n    } else if ((c & 64512) === 55296) {\n      i += 1;\n      const c2 = str.charCodeAt(i);\n      if (i >= str.length || (c2 & 64512) !== 56320) {\n        throw new FuelError5(\n          ErrorCode5.INVALID_INPUT_PARAMETERS,\n          \"Invalid UTF-8 in the input string.\"\n        );\n      }\n      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);\n      result.push(pair >> 18 | 240);\n      result.push(pair >> 12 & 63 | 128);\n      result.push(pair >> 6 & 63 | 128);\n      result.push(pair & 63 | 128);\n    } else {\n      result.push(c >> 12 | 224);\n      result.push(c >> 6 & 63 | 128);\n      result.push(c & 63 | 128);\n    }\n  }\n  return new Uint8Array(result);\n}\n\n// src/utils/toUtf8String.ts\nfunction onError(reason, offset, bytes, output, badCodepoint) {\n  console.log(`invalid codepoint at offset ${offset}; ${reason}, bytes: ${bytes}`);\n  return offset;\n}\nfunction helper(codePoints) {\n  return codePoints.map((codePoint) => {\n    if (codePoint <= 65535) {\n      return String.fromCharCode(codePoint);\n    }\n    codePoint -= 65536;\n    return String.fromCharCode(\n      (codePoint >> 10 & 1023) + 55296,\n      (codePoint & 1023) + 56320\n    );\n  }).join(\"\");\n}\nfunction getUtf8CodePoints(_bytes) {\n  const bytes = arrayify(_bytes, \"bytes\");\n  const result = [];\n  let i = 0;\n  while (i < bytes.length) {\n    const c = bytes[i++];\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n    let extraLength = null;\n    let overlongMask = null;\n    if ((c & 224) === 192) {\n      extraLength = 1;\n      overlongMask = 127;\n    } else if ((c & 240) === 224) {\n      extraLength = 2;\n      overlongMask = 2047;\n    } else if ((c & 248) === 240) {\n      extraLength = 3;\n      overlongMask = 65535;\n    } else {\n      if ((c & 192) === 128) {\n        i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n      } else {\n        i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n      }\n      continue;\n    }\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(\"OVERRUN\", i - 1, bytes, result);\n      continue;\n    }\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n    for (let j = 0; j < extraLength; j++) {\n      const nextChar = bytes[i];\n      if ((nextChar & 192) !== 128) {\n        i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n        res = null;\n        break;\n      }\n      res = res << 6 | nextChar & 63;\n      i++;\n    }\n    if (res === null) {\n      continue;\n    }\n    if (res > 1114111) {\n      i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    if (res >= 55296 && res <= 57343) {\n      i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    if (res <= overlongMask) {\n      i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    result.push(res);\n  }\n  return result;\n}\nfunction toUtf8String(bytes) {\n  return helper(getUtf8CodePoints(bytes));\n}\n\n// src/utils/bytecode.ts\nimport { gzipSync, gunzipSync } from \"fflate\";\nvar compressBytecode = (bytecodeAsBinary) => {\n  if (!bytecodeAsBinary) {\n    return \"\";\n  }\n  const bytecodeCompressBytes = arrayify(bytecodeAsBinary);\n  const bytecodeCompressGzipped = gzipSync(bytecodeCompressBytes, { mtime: 0 });\n  const bytecodeCompressBinary = String.fromCharCode.apply(\n    null,\n    new Uint8Array(bytecodeCompressGzipped)\n  );\n  const bytecodeCompressEncoded = btoa(bytecodeCompressBinary);\n  return bytecodeCompressEncoded;\n};\nvar decompressBytecode = (bytecodeAsBase64) => {\n  const bytecodeDecompressBinary = atob(bytecodeAsBase64);\n  const bytecodeDecompressDecoded = new Uint8Array(bytecodeDecompressBinary.length).map(\n    (_, i) => bytecodeDecompressBinary.charCodeAt(i)\n  );\n  const bytecodeDecompressBytes = gunzipSync(bytecodeDecompressDecoded);\n  return bytecodeDecompressBytes;\n};\n\n// src/index.ts\nfunction assertUnreachable(_x) {\n  throw new Error(\"Didn't expect to get here\");\n}\nexport {\n  DateTime,\n  arrayify,\n  assertUnreachable,\n  capitalizeString,\n  chunkAndPadBytes,\n  compressBytecode,\n  concat,\n  concatBytes,\n  dataSlice,\n  decodeBase58,\n  decompressBytecode,\n  defaultConsensusKey,\n  defaultSnapshotConfigs,\n  encodeBase58,\n  hexlify,\n  isDefined,\n  normalizeString,\n  sleep,\n  toUtf8Bytes,\n  toUtf8String\n};\n//# sourceMappingURL=index.mjs.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","import { hash as assertHash, number as assertNumber } from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    assertHash(hash);\n    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    assertNumber(c);\n    assertNumber(dkLen);\n    assertNumber(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = toBytes(_password);\n    const salt = toBytes(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexport async function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await asyncLoop(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n//# sourceMappingURL=pbkdf2.js.map","import { number as assertNumber } from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { rotl, asyncLoop, checkOpts, u32, isLE, byteSwap32 } from './utils.js';\n// RFC 7914 Scrypt KDF\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = checkOpts({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    assertNumber(N);\n    assertNumber(r);\n    assertNumber(p);\n    assertNumber(dkLen);\n    assertNumber(asyncTick);\n    assertNumber(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    // Max N is 2^32 (Integrify is 32-bit). Real limit is 2^22: JS engines Uint8Array limit is 4GB in 2024.\n    // Spec check `N >= 2 ** (blockSize / 8)` is not done for compat with popular libs,\n    // which used incorrect r: 1, p: 8. Also, the check seems to be a spec error:\n    // https://www.rfc-editor.org/errata_search.php?rfc=7914\n    if (N <= 1 || (N & (N - 1)) !== 0 || N > 2 ** 32) {\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, and less than 2^32');\n    }\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = u32(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = u32(new Uint8Array(blockSize * N));\n    const tmp = u32(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nexport function scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    if (!isLE)\n        byteSwap32(B32);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    if (!isLE)\n        byteSwap32(B32);\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n/**\n * Scrypt KDF from RFC 7914.\n */\nexport async function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    if (!isLE)\n        byteSwap32(B32);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await asyncLoop(N - 1, asyncTick, () => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await asyncLoop(N, asyncTick, () => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    if (!isLE)\n        byteSwap32(B32);\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n//# sourceMappingURL=scrypt.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, isLE, byteSwap32, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        if (!isLE)\n            byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE)\n            byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","import { HashMD } from './_md.js';\nimport { rotl, wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = /* @__PURE__ */ [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst R_BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            R_BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        R_BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n//# sourceMappingURL=ripemd160.js.map","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","// src/shared/scrypt.ts\nimport { scrypt as scryptNoble } from \"@noble/hashes/scrypt\";\nvar scrypt = (params) => {\n  const { password, salt, n, p, r, dklen } = params;\n  const derivedKey = scryptNoble(password, salt, { N: n, r, p, dkLen: dklen });\n  return derivedKey;\n};\n\n// src/shared/keccak256.ts\nimport { keccak_256 } from \"@noble/hashes/sha3\";\nvar keccak256 = (data) => keccak_256(data);\n\n// src/shared/ripemd160.ts\nimport { arrayify } from \"@fuel-ts/utils\";\nimport { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\nfunction ripemd160(_data) {\n  const data = arrayify(_data, \"data\");\n  return noble_ripemd160(data);\n}\n\n// src/browser/aes-ctr.ts\nimport { ErrorCode as ErrorCode2, FuelError as FuelError2 } from \"@fuel-ts/errors\";\nimport { arrayify as arrayify2 } from \"@fuel-ts/utils\";\n\n// src/browser/bufferFromString.ts\nvar bufferFromString = (string, encoding = \"base64\") => {\n  switch (encoding) {\n    case \"utf-8\": {\n      return new TextEncoder().encode(string);\n    }\n    case \"base64\": {\n      const binaryString = atob(string);\n      const len = binaryString.length;\n      const bytes = new Uint8Array(len).map((_, i) => binaryString.charCodeAt(i));\n      return bytes;\n    }\n    case \"hex\":\n    default: {\n      const bufferLength = string.length / 2;\n      const buffer = new Uint8Array(bufferLength).map((_, i) => {\n        const startIndex = i * 2;\n        const byteValue = parseInt(string.substring(startIndex, startIndex + 2), 16);\n        return byteValue;\n      });\n      return buffer;\n    }\n  }\n};\n\n// src/browser/pbkdf2.ts\nimport { hexlify } from \"@fuel-ts/utils\";\nimport { pbkdf2 as pb } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nvar pbkdf2 = (password, salt, iterations, keylen, algo) => {\n  const algorithm = { sha256, sha512 }[algo];\n  return hexlify(pb(algorithm, password, salt, { c: iterations, dkLen: keylen }));\n};\n\n// src/browser/crypto.ts\nimport { ErrorCode, FuelError } from \"@fuel-ts/errors\";\nvar { crypto: crypto2, btoa } = globalThis;\nif (!crypto2) {\n  throw new FuelError(\n    ErrorCode.ENV_DEPENDENCY_MISSING,\n    `Could not find 'crypto' in current browser environment.`\n  );\n}\nif (!btoa) {\n  throw new FuelError(\n    ErrorCode.ENV_DEPENDENCY_MISSING,\n    `Could not find 'btoa' in current browser environment.`\n  );\n}\n\n// src/browser/randomBytes.ts\nvar randomBytes = (length) => {\n  const randomValues = crypto2.getRandomValues(new Uint8Array(length));\n  return randomValues;\n};\n\n// src/browser/stringFromBuffer.ts\nvar stringFromBuffer = (buffer, encoding = \"base64\") => {\n  switch (encoding) {\n    case \"utf-8\": {\n      return new TextDecoder().decode(buffer);\n    }\n    case \"base64\": {\n      const binary = String.fromCharCode.apply(null, new Uint8Array(buffer));\n      return btoa(binary);\n    }\n    case \"hex\":\n    default: {\n      let hexString = \"\";\n      for (let i = 0; i < buffer.length; i += 1) {\n        const hex = buffer[i].toString(16);\n        hexString += hex.length === 1 ? `0${hex}` : hex;\n      }\n      return hexString;\n    }\n  }\n};\n\n// src/browser/aes-ctr.ts\nvar ALGORITHM = \"AES-CTR\";\nvar keyFromPassword = (password, saltBuffer) => {\n  const passBuffer = bufferFromString(String(password).normalize(\"NFKC\"), \"utf-8\");\n  const key = pbkdf2(passBuffer, saltBuffer, 1e5, 32, \"sha256\");\n  return arrayify2(key);\n};\nvar encrypt = async (password, data) => {\n  const iv = randomBytes(16);\n  const salt = randomBytes(32);\n  const secret = keyFromPassword(password, salt);\n  const dataString = JSON.stringify(data);\n  const dataBuffer = bufferFromString(dataString, \"utf-8\");\n  const alg = {\n    name: ALGORITHM,\n    counter: iv,\n    length: 64\n  };\n  const key = await crypto.subtle.importKey(\"raw\", secret, alg, false, [\"encrypt\"]);\n  const encBuffer = await crypto.subtle.encrypt(alg, key, dataBuffer);\n  return {\n    data: stringFromBuffer(new Uint8Array(encBuffer)),\n    iv: stringFromBuffer(iv),\n    salt: stringFromBuffer(salt)\n  };\n};\nvar decrypt = async (password, keystore) => {\n  const iv = bufferFromString(keystore.iv);\n  const salt = bufferFromString(keystore.salt);\n  const secret = keyFromPassword(password, salt);\n  const encryptedText = bufferFromString(keystore.data);\n  const alg = {\n    name: ALGORITHM,\n    counter: iv,\n    length: 64\n  };\n  const key = await crypto.subtle.importKey(\"raw\", secret, alg, false, [\"decrypt\"]);\n  const ptBuffer = await crypto.subtle.decrypt(alg, key, encryptedText);\n  const decryptedData = new TextDecoder().decode(ptBuffer);\n  try {\n    return JSON.parse(decryptedData);\n  } catch {\n    throw new FuelError2(ErrorCode2.INVALID_CREDENTIALS, \"Invalid credentials.\");\n  }\n};\n\n// src/browser/encryptJsonWalletData.ts\nvar encryptJsonWalletData = async (data, key, iv) => {\n  const subtle = crypto2.subtle;\n  const keyBuffer = new Uint8Array(key.subarray(0, 16));\n  const ivBuffer = iv;\n  const dataBuffer = data;\n  const cryptoKey = await subtle.importKey(\n    \"raw\",\n    keyBuffer,\n    { name: \"AES-CTR\", length: 128 },\n    false,\n    [\"encrypt\", \"decrypt\"]\n  );\n  const encrypted = await subtle.encrypt(\n    { name: \"AES-CTR\", counter: ivBuffer, length: 128 },\n    cryptoKey,\n    dataBuffer\n  );\n  return new Uint8Array(encrypted);\n};\nvar decryptJsonWalletData = async (data, key, iv) => {\n  const subtle = crypto2.subtle;\n  const keyBuffer = new Uint8Array(key.subarray(0, 16)).buffer;\n  const ivBuffer = new Uint8Array(iv).buffer;\n  const dataBuffer = new Uint8Array(data).buffer;\n  const cryptoKey = await subtle.importKey(\n    \"raw\",\n    keyBuffer,\n    { name: \"AES-CTR\", length: 128 },\n    false,\n    [\"encrypt\", \"decrypt\"]\n  );\n  const decrypted = await subtle.decrypt(\n    { name: \"AES-CTR\", counter: ivBuffer, length: 128 },\n    cryptoKey,\n    dataBuffer\n  );\n  return new Uint8Array(decrypted);\n};\n\n// src/browser/hmac.ts\nimport { hexlify as hexlify2 } from \"@fuel-ts/utils\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha256 as sha2562 } from \"@noble/hashes/sha256\";\nimport { sha512 as sha5122 } from \"@noble/hashes/sha512\";\nvar computeHmac = (algorithm, key, data) => {\n  const hash = algorithm === \"sha256\" ? sha2562 : sha5122;\n  const signature = hmac.create(hash, key).update(data).digest();\n  return hexlify2(signature);\n};\n\n// src/browser/randomUUID.ts\nvar randomUUID = () => crypto2.randomUUID();\n\n// src/browser/index.ts\nvar api = {\n  bufferFromString,\n  stringFromBuffer,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  computeHmac,\n  pbkdf2,\n  ripemd160,\n  randomUUID\n};\nvar browser_default = api;\n\n// src/index.browser.ts\nvar {\n  bufferFromString: bufferFromString2,\n  decrypt: decrypt2,\n  encrypt: encrypt2,\n  keyFromPassword: keyFromPassword2,\n  randomBytes: randomBytes2,\n  stringFromBuffer: stringFromBuffer2,\n  scrypt: scrypt2,\n  keccak256: keccak2562,\n  decryptJsonWalletData: decryptJsonWalletData2,\n  encryptJsonWalletData: encryptJsonWalletData2,\n  pbkdf2: pbkdf22,\n  computeHmac: computeHmac2,\n  ripemd160: ripemd1602,\n  randomUUID: randomUUID2\n} = browser_default;\nexport {\n  bufferFromString2 as bufferFromString,\n  computeHmac2 as computeHmac,\n  decrypt2 as decrypt,\n  decryptJsonWalletData2 as decryptJsonWalletData,\n  encrypt2 as encrypt,\n  encryptJsonWalletData2 as encryptJsonWalletData,\n  keccak2562 as keccak256,\n  keyFromPassword2 as keyFromPassword,\n  pbkdf22 as pbkdf2,\n  randomBytes2 as randomBytes,\n  randomUUID2 as randomUUID,\n  ripemd1602 as ripemd160,\n  scrypt2 as scrypt,\n  stringFromBuffer2 as stringFromBuffer\n};\n//# sourceMappingURL=index.browser.mjs.map","// src/hasher.ts\nimport { bufferFromString } from \"@fuel-ts/crypto\";\nimport { arrayify, hexlify } from \"@fuel-ts/utils\";\nimport { sha256 as sha256AsBytes } from \"@noble/hashes/sha256\";\nfunction sha256(data) {\n  return hexlify(sha256AsBytes(arrayify(data)));\n}\nfunction hash(data) {\n  return sha256(data);\n}\nfunction uint64ToBytesBE(value) {\n  const bigIntValue = BigInt(value);\n  const buffer = new ArrayBuffer(8);\n  const dataView = new DataView(buffer);\n  dataView.setBigUint64(0, bigIntValue, false);\n  return new Uint8Array(dataView.buffer);\n}\nfunction hashMessage(msg) {\n  return hash(bufferFromString(msg, \"utf-8\"));\n}\nexport {\n  hash,\n  hashMessage,\n  sha256,\n  uint64ToBytesBE\n};\n//# sourceMappingURL=index.mjs.map","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/encoding/coders/AbstractCoder.ts\nvar Coder = class {\n  name;\n  type;\n  encodedLength;\n  constructor(name, type, encodedLength) {\n    this.name = name;\n    this.type = type;\n    this.encodedLength = encodedLength;\n  }\n};\n\n// src/encoding/coders/ArrayCoder.ts\nimport { ErrorCode, FuelError } from \"@fuel-ts/errors\";\nimport { concat } from \"@fuel-ts/utils\";\n\n// src/utils/constants.ts\nvar U8_CODER_TYPE = \"u8\";\nvar U16_CODER_TYPE = \"u16\";\nvar U32_CODER_TYPE = \"u32\";\nvar U64_CODER_TYPE = \"u64\";\nvar U256_CODER_TYPE = \"u256\";\nvar RAW_PTR_CODER_TYPE = \"raw untyped ptr\";\nvar RAW_SLICE_CODER_TYPE = \"raw untyped slice\";\nvar BOOL_CODER_TYPE = \"bool\";\nvar B256_CODER_TYPE = \"b256\";\nvar B512_CODER_TYPE = \"struct std::b512::B512\";\nvar OPTION_CODER_TYPE = \"enum std::option::Option\";\nvar VEC_CODER_TYPE = \"struct std::vec::Vec\";\nvar BYTES_CODER_TYPE = \"struct std::bytes::Bytes\";\nvar STD_STRING_CODER_TYPE = \"struct std::string::String\";\nvar STR_SLICE_CODER_TYPE = \"str\";\nvar VOID_TYPE = \"()\";\nvar optionRegEx = /^enum (std::option::)?Option$/m;\nvar stringRegEx = /^str\\[(?<length>[0-9]+)\\]/;\nvar arrayRegEx = /^\\[(?<item>[\\w\\s\\\\[\\]]+);\\s*(?<length>[0-9]+)\\]/;\nvar structRegEx = /^struct.+/;\nvar enumRegEx = /^enum.+$/;\nvar tupleRegEx = /^\\((?<items>.*)\\)$/;\nvar genericRegEx = /^generic.+$/;\nvar fullNameRegExMatch = /([^\\s]+)$/m;\nvar ENCODING_V1 = \"1\";\nvar WORD_SIZE = 8;\nvar BYTES_32 = 32;\nvar UTXO_ID_LEN = BYTES_32 + 2;\nvar ASSET_ID_LEN = BYTES_32;\nvar CONTRACT_ID_LEN = BYTES_32;\nvar ADDRESS_LEN = BYTES_32;\nvar NONCE_LEN = BYTES_32;\nvar TX_LEN = WORD_SIZE * 4;\nvar TX_POINTER_LEN = WORD_SIZE * 2;\nvar MAX_BYTES = 2 ** 32 - 1;\nvar calculateVmTxMemory = ({ maxInputs }) => BYTES_32 + // Tx ID\nASSET_ID_LEN + // Base asset ID\n// Asset ID/Balance coin input pairs\nmaxInputs * (ASSET_ID_LEN + WORD_SIZE) + WORD_SIZE;\nvar SCRIPT_FIXED_SIZE = WORD_SIZE + // Identifier\nWORD_SIZE + // Gas limit\nWORD_SIZE + // Script size\nWORD_SIZE + // Script data size\nWORD_SIZE + // Policies\nWORD_SIZE + // Inputs size\nWORD_SIZE + // Outputs size\nWORD_SIZE + // Witnesses size\nBYTES_32;\nvar INPUT_COIN_FIXED_SIZE = WORD_SIZE + // Identifier\nTX_LEN + // Utxo Length\nWORD_SIZE + // Output Index\nADDRESS_LEN + // Owner\nWORD_SIZE + // Amount\nASSET_ID_LEN + // Asset id\nTX_POINTER_LEN + // TxPointer\nWORD_SIZE + // Witnesses index\nWORD_SIZE + // Predicate size\nWORD_SIZE + // Predicate data size\nWORD_SIZE;\nvar INPUT_MESSAGE_FIXED_SIZE = WORD_SIZE + // Identifier\nADDRESS_LEN + // Sender\nADDRESS_LEN + // Recipient\nWORD_SIZE + // Amount\nNONCE_LEN + // Nonce\nWORD_SIZE + // witness_index\nWORD_SIZE + // Data size\nWORD_SIZE + // Predicate size\nWORD_SIZE + // Predicate data size\nWORD_SIZE;\n\n// src/utils/utilities.ts\nvar isUint8Array = (value) => value instanceof Uint8Array;\nvar hasNestedOption = (coders) => {\n  const array = Array.isArray(coders) ? coders : Object.values(coders);\n  for (const node of array) {\n    if (node.type === OPTION_CODER_TYPE) {\n      return true;\n    }\n    if (\"coder\" in node && node.coder.type === OPTION_CODER_TYPE) {\n      return true;\n    }\n    if (\"coders\" in node) {\n      const child = hasNestedOption(node.coders);\n      if (child) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// src/encoding/coders/ArrayCoder.ts\nvar ArrayCoder = class extends Coder {\n  coder;\n  length;\n  #hasNestedOption;\n  constructor(coder, length) {\n    super(\"array\", `[${coder.type}; ${length}]`, length * coder.encodedLength);\n    this.coder = coder;\n    this.length = length;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n  encode(value) {\n    if (!Array.isArray(value)) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n    if (this.length !== value.length) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n    return concat(Array.from(value).map((v) => this.coder.encode(v)));\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength || data.length > MAX_BYTES) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid array data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = Array(this.length).fill(0).map(() => {\n      let decoded;\n      [decoded, newOffset] = this.coder.decode(data, newOffset);\n      return decoded;\n    });\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/B256Coder.ts\nimport { ErrorCode as ErrorCode2, FuelError as FuelError2 } from \"@fuel-ts/errors\";\nimport { bn, toHex } from \"@fuel-ts/math\";\nimport { arrayify } from \"@fuel-ts/utils\";\nvar B256Coder = class extends Coder {\n  constructor() {\n    super(\"b256\", \"b256\", WORD_SIZE * 4);\n  }\n  encode(value) {\n    let encodedValue;\n    try {\n      encodedValue = arrayify(value);\n    } catch (error) {\n      throw new FuelError2(ErrorCode2.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new FuelError2(ErrorCode2.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError2(ErrorCode2.DECODE_ERROR, `Invalid b256 data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    const decoded = bn(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(32);\n    }\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError2(ErrorCode2.DECODE_ERROR, `Invalid b256 byte data size.`);\n    }\n    return [toHex(bytes, 32), offset + 32];\n  }\n};\n\n// src/encoding/coders/B512Coder.ts\nimport { ErrorCode as ErrorCode3, FuelError as FuelError3 } from \"@fuel-ts/errors\";\nimport { bn as bn2, toHex as toHex2 } from \"@fuel-ts/math\";\nimport { arrayify as arrayify2 } from \"@fuel-ts/utils\";\nvar B512Coder = class extends Coder {\n  constructor() {\n    super(\"b512\", \"struct B512\", WORD_SIZE * 8);\n  }\n  encode(value) {\n    let encodedValue;\n    try {\n      encodedValue = arrayify2(value);\n    } catch (error) {\n      throw new FuelError3(ErrorCode3.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new FuelError3(ErrorCode3.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError3(ErrorCode3.DECODE_ERROR, `Invalid b512 data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    const decoded = bn2(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(64);\n    }\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError3(ErrorCode3.DECODE_ERROR, `Invalid b512 byte data size.`);\n    }\n    return [toHex2(bytes, this.encodedLength), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/BigNumberCoder.ts\nimport { ErrorCode as ErrorCode4, FuelError as FuelError4 } from \"@fuel-ts/errors\";\nimport { toBytes, bn as bn3 } from \"@fuel-ts/math\";\nvar encodedLengths = {\n  u64: WORD_SIZE,\n  u256: WORD_SIZE * 4\n};\nvar BigNumberCoder = class extends Coder {\n  constructor(baseType) {\n    super(\"bigNumber\", baseType, encodedLengths[baseType]);\n  }\n  encode(value) {\n    let bytes;\n    if (typeof value === \"number\" && value > Number.MAX_SAFE_INTEGER) {\n      throw new FuelError4(\n        ErrorCode4.ENCODE_ERROR,\n        `Invalid ${this.type} type - number value is too large. Number can only safely handle up to 53 bits.`\n      );\n    }\n    try {\n      bytes = toBytes(value, this.encodedLength);\n    } catch (error) {\n      throw new FuelError4(ErrorCode4.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return bytes;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError4(ErrorCode4.DECODE_ERROR, `Invalid ${this.type} data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    bytes = bytes.slice(0, this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError4(ErrorCode4.DECODE_ERROR, `Invalid ${this.type} byte data size.`);\n    }\n    return [bn3(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/BooleanCoder.ts\nimport { ErrorCode as ErrorCode5, FuelError as FuelError5 } from \"@fuel-ts/errors\";\nimport { bn as bn4, toBytes as toBytes2 } from \"@fuel-ts/math\";\nvar BooleanCoder = class extends Coder {\n  options;\n  constructor(options = {\n    padToWordSize: false\n  }) {\n    const encodedLength = options.padToWordSize ? WORD_SIZE : 1;\n    super(\"boolean\", \"boolean\", encodedLength);\n    this.options = options;\n  }\n  encode(value) {\n    const isTrueBool = value === true || value === false;\n    if (!isTrueBool) {\n      throw new FuelError5(ErrorCode5.ENCODE_ERROR, `Invalid boolean value.`);\n    }\n    return toBytes2(value ? 1 : 0, this.encodedLength);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError5(ErrorCode5.DECODE_ERROR, `Invalid boolean data size.`);\n    }\n    const bytes = bn4(data.slice(offset, offset + this.encodedLength));\n    if (bytes.isZero()) {\n      return [false, offset + this.encodedLength];\n    }\n    if (!bytes.eq(bn4(1))) {\n      throw new FuelError5(ErrorCode5.DECODE_ERROR, `Invalid boolean value.`);\n    }\n    return [true, offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/ByteCoder.ts\nimport { ErrorCode as ErrorCode6, FuelError as FuelError6 } from \"@fuel-ts/errors\";\nimport { bn as bn5 } from \"@fuel-ts/math\";\nvar ByteCoder = class extends Coder {\n  constructor() {\n    super(\"struct\", \"struct Bytes\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(bytes.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < WORD_SIZE) {\n      throw new FuelError6(ErrorCode6.DECODE_ERROR, `Invalid byte data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn5(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new FuelError6(ErrorCode6.DECODE_ERROR, `Invalid bytes byte data size.`);\n    }\n    return [dataBytes, offsetAndLength + length];\n  }\n};\n__publicField(ByteCoder, \"memorySize\", 1);\n\n// src/encoding/coders/EnumCoder.ts\nimport { ErrorCode as ErrorCode7, FuelError as FuelError7 } from \"@fuel-ts/errors\";\nimport { toNumber } from \"@fuel-ts/math\";\nimport { concat as concat2 } from \"@fuel-ts/utils\";\nvar EnumCoder = class extends Coder {\n  name;\n  coders;\n  #caseIndexCoder;\n  #encodedValueSize;\n  #shouldValidateLength;\n  constructor(name, coders) {\n    const caseIndexCoder = new BigNumberCoder(\"u64\");\n    const encodedValueSize = Object.values(coders).reduce(\n      (min, coder) => Math.min(min, coder.encodedLength),\n      0\n    );\n    super(`enum ${name}`, `enum ${name}`, caseIndexCoder.encodedLength + encodedValueSize);\n    this.name = name;\n    this.coders = coders;\n    this.#caseIndexCoder = caseIndexCoder;\n    this.#encodedValueSize = encodedValueSize;\n    this.#shouldValidateLength = !(optionRegEx.test(this.type) || hasNestedOption(coders));\n  }\n  // Checks that we're handling a native enum that is of type void.\n  #isNativeEnum(coder) {\n    return this.type !== OPTION_CODER_TYPE && coder.type === VOID_TYPE;\n  }\n  #encodeNativeEnum(value) {\n    const valueCoder = this.coders[value];\n    const encodedValue = valueCoder.encode([]);\n    const caseIndex = Object.keys(this.coders).indexOf(value);\n    const padding = new Uint8Array(this.#encodedValueSize - valueCoder.encodedLength);\n    return concat2([this.#caseIndexCoder.encode(caseIndex), padding, encodedValue]);\n  }\n  encode(value) {\n    if (typeof value === \"string\" && this.coders[value]) {\n      return this.#encodeNativeEnum(value);\n    }\n    const [caseKey, ...empty] = Object.keys(value);\n    if (!caseKey) {\n      throw new FuelError7(ErrorCode7.INVALID_DECODE_VALUE, \"A field for the case must be provided.\");\n    }\n    if (empty.length !== 0) {\n      throw new FuelError7(ErrorCode7.INVALID_DECODE_VALUE, \"Only one field must be provided.\");\n    }\n    const valueCoder = this.coders[caseKey];\n    const caseIndex = Object.keys(this.coders).indexOf(caseKey);\n    if (caseIndex === -1) {\n      const validCases = Object.keys(this.coders).map((v) => `'${v}'`).join(\", \");\n      throw new FuelError7(\n        ErrorCode7.INVALID_DECODE_VALUE,\n        `Invalid case '${caseKey}'. Valid cases: ${validCases}.`\n      );\n    }\n    const encodedValue = valueCoder.encode(value[caseKey]);\n    return new Uint8Array([...this.#caseIndexCoder.encode(caseIndex), ...encodedValue]);\n  }\n  #decodeNativeEnum(caseKey, newOffset) {\n    return [caseKey, newOffset];\n  }\n  decode(data, offset) {\n    if (this.#shouldValidateLength && data.length < this.encodedLength) {\n      throw new FuelError7(ErrorCode7.DECODE_ERROR, `Invalid enum data size.`);\n    }\n    const caseBytes = new BigNumberCoder(\"u64\").decode(data, offset)[0];\n    const caseIndex = toNumber(caseBytes);\n    const caseKey = Object.keys(this.coders)[caseIndex];\n    if (!caseKey) {\n      throw new FuelError7(\n        ErrorCode7.INVALID_DECODE_VALUE,\n        `Invalid caseIndex \"${caseIndex}\". Valid cases: ${Object.keys(this.coders)}.`\n      );\n    }\n    const valueCoder = this.coders[caseKey];\n    const offsetAndCase = offset + this.#caseIndexCoder.encodedLength;\n    if (this.#shouldValidateLength && data.length < offsetAndCase + valueCoder.encodedLength) {\n      throw new FuelError7(ErrorCode7.DECODE_ERROR, `Invalid enum data size.`);\n    }\n    const [decoded, newOffset] = valueCoder.decode(data, offsetAndCase);\n    if (this.#isNativeEnum(this.coders[caseKey])) {\n      return this.#decodeNativeEnum(caseKey, newOffset);\n    }\n    return [{ [caseKey]: decoded }, newOffset];\n  }\n};\n\n// src/encoding/coders/NumberCoder.ts\nimport { ErrorCode as ErrorCode8, FuelError as FuelError8 } from \"@fuel-ts/errors\";\nimport { toNumber as toNumber2, toBytes as toBytes3 } from \"@fuel-ts/math\";\nvar getLength = (baseType) => {\n  switch (baseType) {\n    case \"u8\":\n      return 1;\n    case \"u16\":\n      return 2;\n    case \"u32\":\n      return 4;\n    default:\n      throw new FuelError8(ErrorCode8.TYPE_NOT_SUPPORTED, `Invalid number type: ${baseType}`);\n  }\n};\nvar NumberCoder = class extends Coder {\n  baseType;\n  options;\n  constructor(baseType, options = {\n    padToWordSize: false\n  }) {\n    const length = options.padToWordSize ? WORD_SIZE : getLength(baseType);\n    super(\"number\", baseType, length);\n    this.baseType = baseType;\n    this.options = options;\n  }\n  encode(value) {\n    let bytes;\n    try {\n      bytes = toBytes3(value);\n    } catch (error) {\n      throw new FuelError8(ErrorCode8.ENCODE_ERROR, `Invalid ${this.baseType}.`);\n    }\n    if (bytes.length > this.encodedLength) {\n      throw new FuelError8(ErrorCode8.ENCODE_ERROR, `Invalid ${this.baseType}, too many bytes.`);\n    }\n    return toBytes3(bytes, this.encodedLength);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError8(ErrorCode8.DECODE_ERROR, `Invalid number data size.`);\n    }\n    const bytes = data.slice(offset, offset + this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError8(ErrorCode8.DECODE_ERROR, `Invalid number byte data size.`);\n    }\n    return [toNumber2(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/OptionCoder.ts\nvar OptionCoder = class extends EnumCoder {\n  encode(value) {\n    const result = super.encode(this.toSwayOption(value));\n    return result;\n  }\n  toSwayOption(input) {\n    if (input !== void 0) {\n      return { Some: input };\n    }\n    return { None: [] };\n  }\n  decode(data, offset) {\n    const [decoded, newOffset] = super.decode(data, offset);\n    return [this.toOption(decoded), newOffset];\n  }\n  toOption(output) {\n    if (output && \"Some\" in output) {\n      return output.Some;\n    }\n    return void 0;\n  }\n};\n\n// src/encoding/coders/RawSliceCoder.ts\nimport { ErrorCode as ErrorCode9, FuelError as FuelError9 } from \"@fuel-ts/errors\";\nimport { bn as bn6 } from \"@fuel-ts/math\";\nvar RawSliceCoder = class extends Coder {\n  constructor() {\n    super(\"raw untyped slice\", \"raw untyped slice\", WORD_SIZE);\n  }\n  encode(value) {\n    if (!Array.isArray(value)) {\n      throw new FuelError9(ErrorCode9.ENCODE_ERROR, `Expected array value.`);\n    }\n    const internalCoder = new ArrayCoder(new NumberCoder(\"u8\"), value.length);\n    const bytes = internalCoder.encode(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(bytes.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError9(ErrorCode9.DECODE_ERROR, `Invalid raw slice data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn6(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new FuelError9(ErrorCode9.DECODE_ERROR, `Invalid raw slice byte data size.`);\n    }\n    const internalCoder = new ArrayCoder(new NumberCoder(\"u8\"), length);\n    const [decodedValue] = internalCoder.decode(dataBytes, 0);\n    return [decodedValue, offsetAndLength + length];\n  }\n};\n\n// src/encoding/coders/StdStringCoder.ts\nimport { ErrorCode as ErrorCode10, FuelError as FuelError10 } from \"@fuel-ts/errors\";\nimport { bn as bn7 } from \"@fuel-ts/math\";\nimport { toUtf8Bytes, toUtf8String } from \"@fuel-ts/utils\";\nvar StdStringCoder = class extends Coder {\n  constructor() {\n    super(\"struct\", \"struct String\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = toUtf8Bytes(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(value.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError10(ErrorCode10.DECODE_ERROR, `Invalid std string data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn7(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new FuelError10(ErrorCode10.DECODE_ERROR, `Invalid std string byte data size.`);\n    }\n    return [toUtf8String(dataBytes), offsetAndLength + length];\n  }\n};\n__publicField(StdStringCoder, \"memorySize\", 1);\n\n// src/encoding/coders/StrSliceCoder.ts\nimport { ErrorCode as ErrorCode11, FuelError as FuelError11 } from \"@fuel-ts/errors\";\nimport { bn as bn8 } from \"@fuel-ts/math\";\nimport { toUtf8Bytes as toUtf8Bytes2, toUtf8String as toUtf8String2 } from \"@fuel-ts/utils\";\nvar StrSliceCoder = class extends Coder {\n  constructor() {\n    super(\"strSlice\", \"str\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = toUtf8Bytes2(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(value.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError11(ErrorCode11.DECODE_ERROR, `Invalid string slice data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn8(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const bytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (bytes.length !== length) {\n      throw new FuelError11(ErrorCode11.DECODE_ERROR, `Invalid string slice byte data size.`);\n    }\n    return [toUtf8String2(bytes), offsetAndLength + length];\n  }\n};\n__publicField(StrSliceCoder, \"memorySize\", 1);\n\n// src/encoding/coders/StringCoder.ts\nimport { ErrorCode as ErrorCode12, FuelError as FuelError12 } from \"@fuel-ts/errors\";\nimport { toUtf8Bytes as toUtf8Bytes3, toUtf8String as toUtf8String3 } from \"@fuel-ts/utils\";\nvar StringCoder = class extends Coder {\n  constructor(length) {\n    super(\"string\", `str[${length}]`, length);\n  }\n  encode(value) {\n    if (value.length !== this.encodedLength) {\n      throw new FuelError12(ErrorCode12.ENCODE_ERROR, `Value length mismatch during encode.`);\n    }\n    return toUtf8Bytes3(value);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new FuelError12(ErrorCode12.DECODE_ERROR, `Invalid string data size.`);\n    }\n    const bytes = data.slice(offset, offset + this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError12(ErrorCode12.DECODE_ERROR, `Invalid string byte data size.`);\n    }\n    return [toUtf8String3(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/StructCoder.ts\nimport { ErrorCode as ErrorCode13, FuelError as FuelError13 } from \"@fuel-ts/errors\";\nimport { concatBytes } from \"@fuel-ts/utils\";\nvar StructCoder = class extends Coder {\n  name;\n  coders;\n  #hasNestedOption;\n  constructor(name, coders) {\n    const encodedLength = Object.values(coders).reduce(\n      (acc, coder) => acc + coder.encodedLength,\n      0\n    );\n    super(\"struct\", `struct ${name}`, encodedLength);\n    this.name = name;\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n  encode(value) {\n    return concatBytes(\n      Object.keys(this.coders).map((fieldName) => {\n        const fieldCoder = this.coders[fieldName];\n        const fieldValue = value[fieldName];\n        if (!(fieldCoder instanceof OptionCoder) && fieldValue == null) {\n          throw new FuelError13(\n            ErrorCode13.ENCODE_ERROR,\n            `Invalid ${this.type}. Field \"${fieldName}\" not present.`\n          );\n        }\n        return fieldCoder.encode(fieldValue);\n      })\n    );\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new FuelError13(ErrorCode13.DECODE_ERROR, `Invalid struct data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = Object.keys(this.coders).reduce((obj, fieldName) => {\n      const fieldCoder = this.coders[fieldName];\n      let decoded;\n      [decoded, newOffset] = fieldCoder.decode(data, newOffset);\n      obj[fieldName] = decoded;\n      return obj;\n    }, {});\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/TupleCoder.ts\nimport { ErrorCode as ErrorCode14, FuelError as FuelError14 } from \"@fuel-ts/errors\";\nimport { concatBytes as concatBytes2 } from \"@fuel-ts/utils\";\nvar TupleCoder = class extends Coder {\n  coders;\n  #hasNestedOption;\n  constructor(coders) {\n    const encodedLength = coders.reduce((acc, coder) => acc + coder.encodedLength, 0);\n    super(\"tuple\", `(${coders.map((coder) => coder.type).join(\", \")})`, encodedLength);\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n  encode(value) {\n    if (this.coders.length !== value.length) {\n      throw new FuelError14(ErrorCode14.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n    return concatBytes2(this.coders.map((coder, i) => coder.encode(value[i])));\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new FuelError14(ErrorCode14.DECODE_ERROR, `Invalid tuple data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = this.coders.map((coder) => {\n      let decoded;\n      [decoded, newOffset] = coder.decode(data, newOffset);\n      return decoded;\n    });\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/VecCoder.ts\nimport { ErrorCode as ErrorCode15, FuelError as FuelError15 } from \"@fuel-ts/errors\";\nimport { bn as bn9 } from \"@fuel-ts/math\";\nimport { concatBytes as concatBytes3 } from \"@fuel-ts/utils\";\nvar VecCoder = class extends Coder {\n  coder;\n  #hasNestedOption;\n  constructor(coder) {\n    super(\"struct\", `struct Vec`, WORD_SIZE);\n    this.coder = coder;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n  encode(value) {\n    if (!Array.isArray(value) && !isUint8Array(value)) {\n      throw new FuelError15(\n        ErrorCode15.ENCODE_ERROR,\n        `Expected array value, or a Uint8Array. You can use arrayify to convert a value to a Uint8Array.`\n      );\n    }\n    const lengthCoder = new BigNumberCoder(\"u64\");\n    if (isUint8Array(value)) {\n      return new Uint8Array([...lengthCoder.encode(value.length), ...value]);\n    }\n    const bytes = value.map((v) => this.coder.encode(v));\n    const lengthBytes = lengthCoder.encode(value.length);\n    return new Uint8Array([...lengthBytes, ...concatBytes3(bytes)]);\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength || data.length > MAX_BYTES) {\n      throw new FuelError15(ErrorCode15.DECODE_ERROR, `Invalid vec data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn9(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataLength = length * this.coder.encodedLength;\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + dataLength);\n    if (!this.#hasNestedOption && dataBytes.length !== dataLength) {\n      throw new FuelError15(ErrorCode15.DECODE_ERROR, `Invalid vec byte data size.`);\n    }\n    let newOffset = offsetAndLength;\n    const chunks = [];\n    for (let i = 0; i < length; i++) {\n      const [decoded, optionOffset] = this.coder.decode(data, newOffset);\n      chunks.push(decoded);\n      newOffset = optionOffset;\n    }\n    return [chunks, newOffset];\n  }\n};\n\n// src/Interface.ts\nimport { ErrorCode as ErrorCode21, FuelError as FuelError21 } from \"@fuel-ts/errors\";\nimport { arrayify as arrayify4 } from \"@fuel-ts/utils\";\n\n// src/ResolvedAbiType.ts\nimport { FuelError as FuelError17, ErrorCode as ErrorCode17 } from \"@fuel-ts/errors\";\n\n// src/utils/json-abi.ts\nimport { ErrorCode as ErrorCode16, FuelError as FuelError16 } from \"@fuel-ts/errors\";\nvar getEncodingVersion = (encoding) => {\n  switch (encoding) {\n    case void 0:\n    case ENCODING_V1:\n      return ENCODING_V1;\n    default:\n      throw new FuelError16(\n        ErrorCode16.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version '${encoding}' is unsupported.`\n      );\n  }\n};\nvar findTypeById = (abi, typeId) => {\n  const type = abi.types.find((t) => t.typeId === typeId);\n  if (!type) {\n    throw new FuelError16(\n      ErrorCode16.TYPE_NOT_FOUND,\n      `Type with typeId '${typeId}' doesn't exist in the ABI.`\n    );\n  }\n  return type;\n};\nvar findNonVoidInputs = (abi, inputs) => inputs.filter((input) => findTypeById(abi, input.type).type !== VOID_TYPE);\nvar findVectorBufferArgument = (components) => {\n  const bufferComponent = components.find((c) => c.name === \"buf\");\n  const bufferTypeArgument = bufferComponent?.originalTypeArguments?.[0];\n  if (!bufferComponent || !bufferTypeArgument) {\n    throw new FuelError16(\n      ErrorCode16.INVALID_COMPONENT,\n      `The Vec type provided is missing or has a malformed 'buf' component.`\n    );\n  }\n  return bufferTypeArgument;\n};\n\n// src/ResolvedAbiType.ts\nvar ResolvedAbiType = class {\n  abi;\n  name;\n  type;\n  originalTypeArguments;\n  components;\n  constructor(abi, argument) {\n    this.abi = abi;\n    this.name = argument.name;\n    const jsonABIType = findTypeById(abi, argument.type);\n    if (jsonABIType.type.length > 256) {\n      throw new FuelError17(\n        ErrorCode17.INVALID_COMPONENT,\n        `The provided ABI type is too long: ${jsonABIType.type}.`\n      );\n    }\n    this.type = jsonABIType.type;\n    this.originalTypeArguments = argument.typeArguments;\n    this.components = ResolvedAbiType.getResolvedGenericComponents(\n      abi,\n      argument,\n      jsonABIType.components,\n      jsonABIType.typeParameters ?? ResolvedAbiType.getImplicitGenericTypeParameters(abi, jsonABIType.components)\n    );\n  }\n  static getResolvedGenericComponents(abi, arg, components, typeParameters) {\n    if (components === null) {\n      return null;\n    }\n    if (typeParameters === null || typeParameters.length === 0) {\n      return components.map((c) => new ResolvedAbiType(abi, c));\n    }\n    const typeParametersAndArgsMap = typeParameters.reduce(\n      (obj, typeParameter, typeParameterIndex) => {\n        const o = { ...obj };\n        o[typeParameter] = structuredClone(\n          arg.typeArguments?.[typeParameterIndex]\n        );\n        return o;\n      },\n      {}\n    );\n    const resolvedComponents = this.resolveGenericArgTypes(\n      abi,\n      components,\n      typeParametersAndArgsMap\n    );\n    return resolvedComponents.map((c) => new ResolvedAbiType(abi, c));\n  }\n  static resolveGenericArgTypes(abi, args, typeParametersAndArgsMap) {\n    return args.map((arg) => {\n      if (typeParametersAndArgsMap[arg.type] !== void 0) {\n        return {\n          ...typeParametersAndArgsMap[arg.type],\n          name: arg.name\n        };\n      }\n      if (arg.typeArguments) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: this.resolveGenericArgTypes(\n            abi,\n            arg.typeArguments,\n            typeParametersAndArgsMap\n          )\n        };\n      }\n      const argType = findTypeById(abi, arg.type);\n      const implicitTypeParameters = this.getImplicitGenericTypeParameters(abi, argType.components);\n      if (implicitTypeParameters && implicitTypeParameters.length > 0) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: implicitTypeParameters.map((itp) => typeParametersAndArgsMap[itp])\n        };\n      }\n      return arg;\n    });\n  }\n  static getImplicitGenericTypeParameters(abi, args, implicitGenericParametersParam) {\n    if (!Array.isArray(args)) {\n      return null;\n    }\n    const implicitGenericParameters = implicitGenericParametersParam ?? [];\n    args.forEach((a) => {\n      const argType = findTypeById(abi, a.type);\n      if (genericRegEx.test(argType.type)) {\n        implicitGenericParameters.push(argType.typeId);\n        return;\n      }\n      if (!Array.isArray(a.typeArguments)) {\n        return;\n      }\n      this.getImplicitGenericTypeParameters(abi, a.typeArguments, implicitGenericParameters);\n    });\n    return implicitGenericParameters.length > 0 ? implicitGenericParameters : null;\n  }\n  getSignature() {\n    const prefix = this.getArgSignaturePrefix();\n    const content = this.getArgSignatureContent();\n    return `${prefix}${content}`;\n  }\n  getArgSignaturePrefix() {\n    const structMatch = structRegEx.test(this.type);\n    if (structMatch) {\n      return \"s\";\n    }\n    const arrayMatch = arrayRegEx.test(this.type);\n    if (arrayMatch) {\n      return \"a\";\n    }\n    const enumMatch = enumRegEx.test(this.type);\n    if (enumMatch) {\n      return \"e\";\n    }\n    return \"\";\n  }\n  getArgSignatureContent() {\n    if (this.type === \"raw untyped ptr\") {\n      return \"rawptr\";\n    }\n    if (this.type === \"raw untyped slice\") {\n      return \"rawslice\";\n    }\n    const strMatch = stringRegEx.exec(this.type)?.groups;\n    if (strMatch) {\n      return `str[${strMatch.length}]`;\n    }\n    if (this.components === null) {\n      return this.type;\n    }\n    const arrayMatch = arrayRegEx.exec(this.type)?.groups;\n    if (arrayMatch) {\n      return `[${this.components[0].getSignature()};${arrayMatch.length}]`;\n    }\n    const typeArgumentsSignature = this.originalTypeArguments !== null ? `<${this.originalTypeArguments.map((a) => new ResolvedAbiType(this.abi, a).getSignature()).join(\",\")}>` : \"\";\n    const componentsSignature = `(${this.components.map((c) => c.getSignature()).join(\",\")})`;\n    return `${typeArgumentsSignature}${componentsSignature}`;\n  }\n};\n\n// src/encoding/strategies/getCoderForEncoding.ts\nimport { ErrorCode as ErrorCode19, FuelError as FuelError19 } from \"@fuel-ts/errors\";\n\n// src/encoding/strategies/getCoderV1.ts\nimport { ErrorCode as ErrorCode18, FuelError as FuelError18 } from \"@fuel-ts/errors\";\n\n// src/encoding/coders/VoidCoder.ts\nvar VoidCoder = class extends Coder {\n  constructor() {\n    super(\"void\", VOID_TYPE, 0);\n  }\n  encode(_value) {\n    return new Uint8Array([]);\n  }\n  decode(_data, offset) {\n    return [void 0, offset];\n  }\n};\n\n// src/encoding/strategies/getCoders.ts\nfunction getCoders(components, options) {\n  const { getCoder: getCoder2 } = options;\n  return components.reduce((obj, component) => {\n    const o = obj;\n    o[component.name] = getCoder2(component, options);\n    return o;\n  }, {});\n}\n\n// src/encoding/strategies/getCoderV1.ts\nvar getCoder = (resolvedAbiType, _options) => {\n  switch (resolvedAbiType.type) {\n    case U8_CODER_TYPE:\n    case U16_CODER_TYPE:\n    case U32_CODER_TYPE:\n      return new NumberCoder(resolvedAbiType.type);\n    case U64_CODER_TYPE:\n    case RAW_PTR_CODER_TYPE:\n      return new BigNumberCoder(\"u64\");\n    case U256_CODER_TYPE:\n      return new BigNumberCoder(\"u256\");\n    case RAW_SLICE_CODER_TYPE:\n      return new RawSliceCoder();\n    case BOOL_CODER_TYPE:\n      return new BooleanCoder();\n    case B256_CODER_TYPE:\n      return new B256Coder();\n    case B512_CODER_TYPE:\n      return new B512Coder();\n    case BYTES_CODER_TYPE:\n      return new ByteCoder();\n    case STD_STRING_CODER_TYPE:\n      return new StdStringCoder();\n    case STR_SLICE_CODER_TYPE:\n      return new StrSliceCoder();\n    case VOID_TYPE:\n      return new VoidCoder();\n    default:\n      break;\n  }\n  const stringMatch = stringRegEx.exec(resolvedAbiType.type)?.groups;\n  if (stringMatch) {\n    const length = parseInt(stringMatch.length, 10);\n    return new StringCoder(length);\n  }\n  const components = resolvedAbiType.components;\n  const arrayMatch = arrayRegEx.exec(resolvedAbiType.type)?.groups;\n  if (arrayMatch) {\n    const length = parseInt(arrayMatch.length, 10);\n    const arg = components[0];\n    if (!arg) {\n      throw new FuelError18(\n        ErrorCode18.INVALID_COMPONENT,\n        `The provided Array type is missing an item of 'component'.`\n      );\n    }\n    const arrayElementCoder = getCoder(arg);\n    return new ArrayCoder(arrayElementCoder, length);\n  }\n  if (resolvedAbiType.type === VEC_CODER_TYPE) {\n    const arg = findVectorBufferArgument(components);\n    const argType = new ResolvedAbiType(resolvedAbiType.abi, arg);\n    const itemCoder = getCoder(argType, { encoding: ENCODING_V1 });\n    return new VecCoder(itemCoder);\n  }\n  const coderName = resolvedAbiType.type.match(fullNameRegExMatch)?.[0];\n  const structMatch = structRegEx.test(resolvedAbiType.type);\n  if (structMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    return new StructCoder(coderName, coders);\n  }\n  const enumMatch = enumRegEx.test(resolvedAbiType.type);\n  if (enumMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    const isOptionEnum = resolvedAbiType.type === OPTION_CODER_TYPE;\n    if (isOptionEnum) {\n      return new OptionCoder(coderName, coders);\n    }\n    return new EnumCoder(coderName, coders);\n  }\n  const tupleMatch = tupleRegEx.exec(resolvedAbiType.type)?.groups;\n  if (tupleMatch) {\n    const coders = components.map((component) => getCoder(component, { encoding: ENCODING_V1 }));\n    return new TupleCoder(coders);\n  }\n  throw new FuelError18(\n    ErrorCode18.CODER_NOT_FOUND,\n    `Coder not found: ${JSON.stringify(resolvedAbiType)}.`\n  );\n};\n\n// src/encoding/strategies/getCoderForEncoding.ts\nfunction getCoderForEncoding(encoding = ENCODING_V1) {\n  switch (encoding) {\n    case ENCODING_V1:\n      return getCoder;\n    default:\n      throw new FuelError19(\n        ErrorCode19.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version ${encoding} is unsupported.`\n      );\n  }\n}\n\n// src/AbiCoder.ts\nvar AbiCoder = class {\n  static getCoder(abi, argument, options = {\n    padToWordSize: false\n  }) {\n    const resolvedAbiType = new ResolvedAbiType(abi, argument);\n    return getCoderForEncoding(options.encoding)(resolvedAbiType, options);\n  }\n  static encode(abi, argument, value, options) {\n    return this.getCoder(abi, argument, options).encode(value);\n  }\n  static decode(abi, argument, data, offset, options) {\n    return this.getCoder(abi, argument, options).decode(data, offset);\n  }\n};\n\n// src/FunctionFragment.ts\nimport { bufferFromString } from \"@fuel-ts/crypto\";\nimport { ErrorCode as ErrorCode20, FuelError as FuelError20 } from \"@fuel-ts/errors\";\nimport { sha256 } from \"@fuel-ts/hasher\";\nimport { bn as bn10 } from \"@fuel-ts/math\";\nimport { arrayify as arrayify3 } from \"@fuel-ts/utils\";\n\n// src/utils/getFunctionInputs.ts\nvar getFunctionInputs = (params) => {\n  const { jsonAbi, inputs } = params;\n  let isMandatory = false;\n  return inputs.reduceRight((result, input) => {\n    const type = findTypeById(jsonAbi, input.type);\n    isMandatory = isMandatory || type.type !== VOID_TYPE && !optionRegEx.test(type.type);\n    return [{ ...input, isOptional: !isMandatory }, ...result];\n  }, []);\n};\n\n// src/utils/padValuesWithUndefined.ts\nvar padValuesWithUndefined = (values, inputs) => {\n  if (values.length >= inputs.length) {\n    return values;\n  }\n  const paddedValues = values.slice();\n  paddedValues.length = inputs.length;\n  paddedValues.fill(void 0, values.length);\n  return paddedValues;\n};\n\n// src/FunctionFragment.ts\nvar FunctionFragment = class {\n  signature;\n  selector;\n  selectorBytes;\n  encoding;\n  name;\n  jsonFn;\n  attributes;\n  jsonAbiOld;\n  jsonFnOld;\n  constructor(jsonAbi, fn) {\n    this.jsonFn = fn;\n    this.jsonAbiOld = jsonAbi;\n    this.jsonFnOld = jsonAbi.functions.find((f) => f.name === fn.name);\n    this.name = fn.name;\n    this.signature = FunctionFragment.getSignature(this.jsonAbiOld, this.jsonFnOld);\n    this.selector = FunctionFragment.getFunctionSelector(this.signature);\n    this.selectorBytes = new StdStringCoder().encode(this.name);\n    this.encoding = getEncodingVersion(jsonAbi.encoding);\n    this.attributes = this.jsonFn.attributes ?? [];\n  }\n  static getSignature(abi, fn) {\n    const inputsSignatures = fn.inputs.map(\n      (input) => new ResolvedAbiType(abi, input).getSignature()\n    );\n    return `${fn.name}(${inputsSignatures.join(\",\")})`;\n  }\n  static getFunctionSelector(functionSignature) {\n    const hashedFunctionSignature = sha256(bufferFromString(functionSignature, \"utf-8\"));\n    return bn10(hashedFunctionSignature.slice(0, 10)).toHex(8);\n  }\n  encodeArguments(values) {\n    const inputs = getFunctionInputs({ jsonAbi: this.jsonAbiOld, inputs: this.jsonFnOld.inputs });\n    const mandatoryInputLength = inputs.filter((i) => !i.isOptional).length;\n    if (values.length < mandatoryInputLength) {\n      throw new FuelError20(\n        ErrorCode20.ABI_TYPES_AND_VALUES_MISMATCH,\n        `Invalid number of arguments. Expected a minimum of ${mandatoryInputLength} arguments, received ${values.length}`\n      );\n    }\n    const coders = this.jsonFnOld.inputs.map(\n      (t) => AbiCoder.getCoder(this.jsonAbiOld, t, {\n        encoding: this.encoding\n      })\n    );\n    const argumentValues = padValuesWithUndefined(values, this.jsonFn.inputs);\n    return new TupleCoder(coders).encode(argumentValues);\n  }\n  decodeArguments(data) {\n    const bytes = arrayify3(data);\n    const nonVoidInputs = findNonVoidInputs(this.jsonAbiOld, this.jsonFnOld.inputs);\n    if (nonVoidInputs.length === 0) {\n      if (bytes.length === 0) {\n        return void 0;\n      }\n      throw new FuelError20(\n        ErrorCode20.DECODE_ERROR,\n        `Types/values length mismatch during decode. ${JSON.stringify({\n          count: {\n            types: this.jsonFn.inputs.length,\n            nonVoidInputs: nonVoidInputs.length,\n            values: bytes.length\n          },\n          value: {\n            args: this.jsonFn.inputs,\n            nonVoidInputs,\n            values: bytes\n          }\n        })}`\n      );\n    }\n    const result = this.jsonFnOld.inputs.reduce(\n      (obj, input) => {\n        const coder = AbiCoder.getCoder(this.jsonAbiOld, input, { encoding: this.encoding });\n        const [decodedValue, decodedOffset] = coder.decode(bytes, obj.offset);\n        return {\n          decoded: [...obj.decoded, decodedValue],\n          offset: decodedOffset\n        };\n      },\n      { decoded: [], offset: 0 }\n    );\n    return result.decoded;\n  }\n  decodeOutput(data) {\n    const bytes = arrayify3(data);\n    const coder = AbiCoder.getCoder(this.jsonAbiOld, this.jsonFnOld.output, {\n      encoding: this.encoding\n    });\n    return coder.decode(bytes, 0);\n  }\n  /**\n   * Checks if the function is read-only i.e. it only reads from storage, does not write to it.\n   *\n   * @returns True if the function is read-only or pure, false otherwise.\n   */\n  isReadOnly() {\n    const storageAttribute = this.attributes.find((attr) => attr.name === \"storage\");\n    return !storageAttribute?.arguments?.includes(\"write\");\n  }\n};\n\n// src/utils/transpile-abi.ts\nvar findTypeByConcreteId = (types, id) => types.find((x) => x.concreteTypeId === id);\nvar findConcreteTypeById = (abi, id) => abi.concreteTypes.find((x) => x.concreteTypeId === id);\nfunction finsertTypeIdByConcreteTypeId(abi, types, id) {\n  const concreteType = findConcreteTypeById(abi, id);\n  if (concreteType.metadataTypeId !== void 0) {\n    return concreteType.metadataTypeId;\n  }\n  const type = findTypeByConcreteId(types, id);\n  if (type) {\n    return type.typeId;\n  }\n  types.push({\n    typeId: types.length,\n    type: concreteType.type,\n    components: parseComponents(concreteType.components),\n    concreteTypeId: id,\n    typeParameters: concreteType.typeParameters ?? null,\n    originalConcreteTypeId: concreteType?.concreteTypeId\n  });\n  return types.length - 1;\n}\nfunction parseFunctionTypeArguments(abi, types, concreteType) {\n  return concreteType.typeArguments?.map((cTypeId) => {\n    const self = findConcreteTypeById(abi, cTypeId);\n    const type = !isNaN(cTypeId) ? cTypeId : finsertTypeIdByConcreteTypeId(abi, types, cTypeId);\n    return {\n      name: \"\",\n      type,\n      // originalTypeId: cTypeId,\n      typeArguments: parseFunctionTypeArguments(abi, types, self)\n    };\n  }) ?? null;\n}\nfunction parseConcreteType(abi, types, concreteTypeId, name) {\n  const type = finsertTypeIdByConcreteTypeId(abi, types, concreteTypeId);\n  const concrete = findConcreteTypeById(abi, concreteTypeId);\n  return {\n    name: name ?? \"\",\n    type,\n    // concreteTypeId,\n    typeArguments: parseFunctionTypeArguments(abi, types, concrete)\n  };\n}\nfunction parseComponents(abi, types, components) {\n  return components?.map((component) => {\n    const { typeId, name, typeArguments } = component;\n    const type = !isNaN(typeId) ? typeId : finsertTypeIdByConcreteTypeId(abi, types, typeId);\n    return {\n      name,\n      type,\n      // originalTypeId: typeId,\n      typeArguments: parseComponents(abi, types, typeArguments)\n    };\n  }) ?? null;\n}\nfunction transpileAbi(abi) {\n  if (!abi.specVersion) {\n    return abi;\n  }\n  const types = [];\n  abi.metadataTypes.forEach((m) => {\n    const t = {\n      typeId: m.metadataTypeId,\n      type: m.type,\n      components: m.components ?? (m.type === \"()\" ? [] : null),\n      typeParameters: m.typeParameters ?? null\n    };\n    types.push(t);\n  });\n  types.forEach((t) => {\n    t.components = parseComponents(abi, types, t.components);\n  });\n  const functions = abi.functions.map((fn) => {\n    const inputs = fn.inputs.map(\n      ({ concreteTypeId, name }) => parseConcreteType(abi, types, concreteTypeId, name)\n    );\n    const output = parseConcreteType(abi, types, fn.output, \"\");\n    return { ...fn, inputs, output };\n  });\n  const configurables = abi.configurables.map((conf) => ({\n    name: conf.name,\n    configurableType: parseConcreteType(abi, types, conf.concreteTypeId),\n    offset: conf.offset\n  }));\n  const loggedTypes = abi.loggedTypes.map((log) => ({\n    logId: log.logId,\n    loggedType: parseConcreteType(abi, types, log.concreteTypeId)\n  }));\n  const transpiled = {\n    encoding: abi.encodingVersion,\n    types,\n    functions,\n    loggedTypes,\n    messagesTypes: abi.messagesTypes,\n    configurables\n  };\n  return transpiled;\n}\n\n// src/Interface.ts\nvar Interface = class {\n  functions;\n  configurables;\n  jsonAbi;\n  encoding;\n  jsonAbiOld;\n  constructor(jsonAbi) {\n    this.jsonAbi = jsonAbi;\n    this.encoding = getEncodingVersion(jsonAbi.encodingVersion);\n    this.jsonAbiOld = transpileAbi(jsonAbi);\n    this.functions = Object.fromEntries(\n      this.jsonAbi.functions.map((fn) => [fn.name, new FunctionFragment(this.jsonAbiOld, fn)])\n    );\n    this.configurables = Object.fromEntries(this.jsonAbi.configurables.map((x) => [x.name, x]));\n  }\n  /**\n   * Returns function fragment for a dynamic input.\n   * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment\n   */\n  getFunction(nameOrSignatureOrSelector) {\n    const fn = Object.values(this.functions).find(\n      (f) => f.name === nameOrSignatureOrSelector || f.signature === nameOrSignatureOrSelector || f.selector === nameOrSignatureOrSelector\n    );\n    if (fn !== void 0) {\n      return fn;\n    }\n    throw new FuelError21(\n      ErrorCode21.FUNCTION_NOT_FOUND,\n      `function ${nameOrSignatureOrSelector} not found: ${JSON.stringify(fn)}.`\n    );\n  }\n  // Decode the result of a function call\n  decodeFunctionResult(functionFragment, data) {\n    const fragment = typeof functionFragment === \"string\" ? this.getFunction(functionFragment) : functionFragment;\n    return fragment.decodeOutput(data);\n  }\n  decodeLog(data, logId) {\n    const loggedType = this.jsonAbiOld.loggedTypes.find((type) => type.logId === logId);\n    if (!loggedType) {\n      throw new FuelError21(\n        ErrorCode21.LOG_TYPE_NOT_FOUND,\n        `Log type with logId '${logId}' doesn't exist in the ABI.`\n      );\n    }\n    return AbiCoder.decode(this.jsonAbiOld, loggedType.loggedType, arrayify4(data), 0, {\n      encoding: this.encoding\n    });\n  }\n  encodeConfigurable(name, value) {\n    const configurable = this.jsonAbiOld.configurables.find((c) => c.name === name);\n    if (!configurable) {\n      throw new FuelError21(\n        ErrorCode21.CONFIGURABLE_NOT_FOUND,\n        `A configurable with the '${name}' was not found in the ABI.`\n      );\n    }\n    return AbiCoder.encode(this.jsonAbiOld, configurable.configurableType, value, {\n      encoding: this.encoding\n    });\n  }\n  encodeType(concreteTypeId, value) {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      \"\"\n    );\n    return AbiCoder.encode(this.jsonAbiOld, typeArg, value, {\n      encoding: this.encoding\n    });\n  }\n  decodeType(concreteTypeId, data) {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      \"\"\n    );\n    return AbiCoder.decode(this.jsonAbiOld, typeArg, data, 0, { encoding: this.encoding });\n  }\n};\nexport {\n  ASSET_ID_LEN,\n  ArrayCoder,\n  B256Coder,\n  B512Coder,\n  BYTES_32,\n  BigNumberCoder,\n  BooleanCoder,\n  ByteCoder,\n  CONTRACT_ID_LEN,\n  Coder,\n  ENCODING_V1,\n  EnumCoder,\n  INPUT_COIN_FIXED_SIZE,\n  Interface,\n  NumberCoder,\n  OptionCoder,\n  RawSliceCoder,\n  SCRIPT_FIXED_SIZE,\n  StdStringCoder,\n  StrSliceCoder,\n  StringCoder,\n  StructCoder,\n  TupleCoder,\n  UTXO_ID_LEN,\n  VecCoder,\n  WORD_SIZE,\n  calculateVmTxMemory\n};\n//# sourceMappingURL=index.mjs.map","// src/address.ts\nimport { FuelError as FuelError2 } from \"@fuel-ts/errors\";\nimport { arrayify as arrayify2, hexlify as hexlify2 } from \"@fuel-ts/utils\";\nimport { sha256 as sha2562 } from \"@noble/hashes/sha256\";\n\n// src/utils.ts\nimport { randomBytes } from \"@fuel-ts/crypto\";\nimport { FuelError } from \"@fuel-ts/errors\";\nimport { arrayify, concat, hexlify } from \"@fuel-ts/utils\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nfunction isB256(address) {\n  return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);\n}\nfunction isPublicKey(address) {\n  return address.length === 130 && /(0x)[0-9a-f]{128}$/i.test(address);\n}\nfunction isEvmAddress(address) {\n  return address.length === 42 && /(0x)[0-9a-f]{40}$/i.test(address);\n}\nfunction normalizeB256(address) {\n  return address.toLowerCase();\n}\nfunction isAddress(address) {\n  return \"b256Address\" in address;\n}\nvar addressify = (addressLike) => {\n  if (isAddress(addressLike)) {\n    return addressLike;\n  }\n  if (\"address\" in addressLike && isAddress(addressLike.address)) {\n    return addressLike.address;\n  }\n  if (\"id\" in addressLike && isAddress(addressLike.id)) {\n    return addressLike.id;\n  }\n  throw new FuelError(FuelError.CODES.INVALID_ADDRESS, \"Invalid address\");\n};\nvar getRandomB256 = () => hexlify(randomBytes(32));\nvar toB256AddressEvm = (b256) => {\n  try {\n    if (!isB256(b256)) {\n      throw new FuelError(FuelError.CODES.INVALID_B256_ADDRESS, `Invalid B256 Address: ${b256}.`);\n    }\n    const evmBytes = arrayify(b256).slice(12);\n    const paddedBytes = new Uint8Array(12).fill(0);\n    return hexlify(concat([paddedBytes, evmBytes]));\n  } catch (error) {\n    throw new FuelError(\n      FuelError.CODES.PARSE_FAILED,\n      `Cannot generate EVM Address B256 from: ${b256}.`\n    );\n  }\n};\nvar padFirst12BytesOfEvmAddress = (address) => {\n  if (!isEvmAddress(address)) {\n    throw new FuelError(FuelError.CODES.INVALID_EVM_ADDRESS, \"Invalid EVM address format.\");\n  }\n  return address.replace(\"0x\", \"0x000000000000000000000000\");\n};\nvar fromEvmAddressToB256 = (address) => padFirst12BytesOfEvmAddress(address);\nvar fromPublicKeyToB256 = (publicKey) => {\n  if (!isPublicKey(publicKey)) {\n    throw new FuelError(FuelError.CODES.INVALID_PUBLIC_KEY, `Invalid Public Key: ${publicKey}.`);\n  }\n  return hexlify(sha256(arrayify(publicKey)));\n};\nvar fromDynamicInputToB256 = (address) => {\n  if (typeof address !== \"string\" && \"toB256\" in address) {\n    return address.toB256();\n  }\n  if (isB256(address)) {\n    return address;\n  }\n  if (isPublicKey(address)) {\n    return fromPublicKeyToB256(address);\n  }\n  if (isEvmAddress(address)) {\n    return fromEvmAddressToB256(address);\n  }\n  throw new FuelError(\n    FuelError.CODES.PARSE_FAILED,\n    `Unknown address format: only 'B256', 'Public Key (512)', or 'EVM Address' are supported.`\n  );\n};\n\n// src/address.ts\nvar Address = class {\n  // #region address-2\n  b256Address;\n  // #endregion address-2\n  /**\n   * @param address - A B256 address, public key, EVM address, or Address instance\n   */\n  constructor(address) {\n    const b256Address = fromDynamicInputToB256(address);\n    this.b256Address = normalizeB256(b256Address);\n  }\n  /**\n   * Takes an B256 Address and returns back an checksum address.\n   * The implementation follows the ERC-55 https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md.\n   *\n   * @returns A new `ChecksumAddress` instance\n   */\n  toChecksum() {\n    return Address.toChecksum(this.b256Address);\n  }\n  /**\n   * Returns the `b256Address` property\n   */\n  toAddress() {\n    return this.b256Address;\n  }\n  /**\n   * Returns the B256 hash address as a string\n   *\n   * @returns The B256 address\n   */\n  toB256() {\n    return this.b256Address;\n  }\n  /**\n   * Returns the B256 hash address as a Uint8Array\n   *\n   * @returns The B256 address as a Uint8Array\n   */\n  toBytes() {\n    return arrayify2(this.b256Address);\n  }\n  /**\n   * Returns the B256 hash address as a string\n   *\n   * @returns The B256 address\n   */\n  toHexString() {\n    return this.toB256();\n  }\n  /**\n   * returns the address `checksum` as a string\n   *\n   * @returns The `b256Address` property as a string\n   */\n  toString() {\n    return this.toChecksum();\n  }\n  /**\n   * Converts and returns the `b256Address` property as a string\n   * @returns The `b256Address` property as a JSON string\n   */\n  toJSON() {\n    return this.b256Address;\n  }\n  /**\n   * Converts to an EVM address\n   *\n   * @returns an {@link EvmAddress | `EvmAddress`} representation of the address\n   */\n  toEvmAddress() {\n    return {\n      bits: toB256AddressEvm(this.b256Address)\n    };\n  }\n  /**\n   * Wraps the B256 property and returns as an `AssetId`.\n   * @returns The B256 property as an {@link AssetId | `AssetId`}\n   */\n  toAssetId() {\n    return {\n      bits: this.b256Address\n    };\n  }\n  /**\n   * Wraps the B256 address `checksum` and returns it as a string\n   * @returns The B256 address `checksum` as a string\n   */\n  valueOf() {\n    return this.toChecksum();\n  }\n  /**\n   * Compares this the `b256Address` property to another for direct equality\n   * @param other - Another address to compare against\n   * @returns The equality of the comparison\n   */\n  equals(other) {\n    return this.toChecksum() === other.toChecksum();\n  }\n  /**\n   * Takes a Public Key, hashes it, and creates an `Address`\n   *\n   * @param publicKey - A wallets public key\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromPublicKey(publicKey) {\n    const b256Address = fromPublicKeyToB256(publicKey);\n    return new Address(b256Address);\n  }\n  /**\n   * Takes a B256 Address and creates an `Address`\n   *\n   * @param b256Address - A b256 hash\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromB256(b256Address) {\n    if (!isB256(b256Address)) {\n      throw new FuelError2(\n        FuelError2.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${b256Address}.`\n      );\n    }\n    return new Address(b256Address);\n  }\n  /**\n   * Creates an `Address` with a randomized `b256Address` property\n   *\n   * @returns A new `Address` instance\n   */\n  static fromRandom() {\n    return new Address(getRandomB256());\n  }\n  /**\n   * Takes an ambiguous string and attempts to create an `Address`\n   *\n   * @param address - An ambiguous string\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromString(address) {\n    return new Address(address);\n  }\n  /**\n   * Takes an ambiguous string or address and creates an `Address`\n   *\n   * @returns a new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromAddressOrString(address) {\n    return new Address(address);\n  }\n  /**\n   * Takes a dynamic string or `Address` and creates an `Address`\n   *\n   * @param addressId - A string containing B256, or Public Key\n   * @throws Error - Unknown address if the format is not recognised\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromDynamicInput(address) {\n    return new Address(address);\n  }\n  /**\n   * Takes an Evm Address and returns back an `Address`\n   *\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromEvmAddress(evmAddress) {\n    if (!isEvmAddress(evmAddress)) {\n      throw new FuelError2(\n        FuelError2.CODES.INVALID_EVM_ADDRESS,\n        `Invalid Evm Address: ${evmAddress}.`\n      );\n    }\n    return new Address(evmAddress);\n  }\n  /**\n   * Takes an ChecksumAddress and validates if it is a valid checksum address.\n   *\n   * @returns A `boolean` instance indicating if the address is valid.\n   */\n  static isChecksumValid(address) {\n    let addressParsed = address;\n    if (!address.startsWith(\"0x\")) {\n      addressParsed = `0x${address}`;\n    }\n    if (addressParsed.trim().length !== 66) {\n      return false;\n    }\n    return Address.toChecksum(hexlify2(addressParsed)) === addressParsed;\n  }\n  /** @hidden */\n  static toChecksum(address) {\n    if (!isB256(address)) {\n      throw new FuelError2(\n        FuelError2.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${address}.`\n      );\n    }\n    const addressHex = hexlify2(address).toLowerCase().slice(2);\n    const checksum = sha2562(addressHex);\n    let ret = \"0x\";\n    for (let i = 0; i < 32; ++i) {\n      const byte = checksum[i];\n      const ha = addressHex.charAt(i * 2);\n      const hb = addressHex.charAt(i * 2 + 1);\n      ret += (byte & 240) >= 128 ? ha.toUpperCase() : ha;\n      ret += (byte & 15) >= 8 ? hb.toUpperCase() : hb;\n    }\n    return ret;\n  }\n};\nexport {\n  Address,\n  addressify,\n  fromDynamicInputToB256,\n  fromEvmAddressToB256,\n  fromPublicKeyToB256,\n  getRandomB256,\n  isAddress,\n  isB256,\n  isEvmAddress,\n  isPublicKey,\n  normalizeB256,\n  padFirst12BytesOfEvmAddress,\n  toB256AddressEvm\n};\n//# sourceMappingURL=index.mjs.map","// src/coders/input.ts\nimport { Coder as Coder2, B256Coder, NumberCoder as NumberCoder2, BigNumberCoder } from \"@fuel-ts/abi-coder\";\nimport { ErrorCode as ErrorCode2, FuelError as FuelError2 } from \"@fuel-ts/errors\";\nimport { sha256 } from \"@fuel-ts/hasher\";\nimport { concat as concat2, arrayify as arrayify2 } from \"@fuel-ts/utils\";\n\n// src/coders/byte-array.ts\nimport { Coder } from \"@fuel-ts/abi-coder\";\nimport { concat, hexlify, arrayify } from \"@fuel-ts/utils\";\nvar ByteArrayCoder = class extends Coder {\n  length;\n  #paddingLength;\n  constructor(length) {\n    const paddingLength = (8 - length % 8) % 8;\n    const encodedLength = length + paddingLength;\n    super(\n      \"ByteArray\",\n      // While this might sound like a [u8; N] coder it's actually not.\n      // A [u8; N] coder would pad every u8 to 8 bytes which would\n      // make every u8 have the same size as a u64.\n      // We are packing four u8s into u64s here, avoiding this padding.\n      `[u64; ${encodedLength / 4}]`,\n      encodedLength\n    );\n    this.length = length;\n    this.#paddingLength = paddingLength;\n  }\n  encode(value) {\n    const parts = [];\n    const data = arrayify(value);\n    parts.push(data);\n    if (this.#paddingLength) {\n      parts.push(new Uint8Array(this.#paddingLength));\n    }\n    return concat(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = [hexlify(data.slice(o, o + this.length)), o + this.length];\n    const value = decoded;\n    if (this.#paddingLength) {\n      [decoded, o] = [null, o + this.#paddingLength];\n    }\n    return [value, o];\n  }\n};\n\n// src/coders/tx-pointer.ts\nimport { NumberCoder, StructCoder } from \"@fuel-ts/abi-coder\";\nimport { ErrorCode, FuelError } from \"@fuel-ts/errors\";\nvar TxPointerCoder = class extends StructCoder {\n  constructor() {\n    super(\"TxPointer\", {\n      blockHeight: new NumberCoder(\"u32\", { padToWordSize: true }),\n      txIndex: new NumberCoder(\"u16\", { padToWordSize: true })\n    });\n  }\n  static decodeFromGqlScalar(value) {\n    if (value.length !== 12) {\n      throw new FuelError(\n        ErrorCode.DECODE_ERROR,\n        `Invalid TxPointer scalar string length ${value.length}. It must have length 12.`\n      );\n    }\n    const [blockHeight, txIndex] = [value.substring(0, 8), value.substring(8)];\n    return {\n      blockHeight: parseInt(blockHeight, 16),\n      txIndex: parseInt(txIndex, 16)\n    };\n  }\n};\n\n// src/coders/input.ts\nvar InputType = /* @__PURE__ */ ((InputType2) => {\n  InputType2[InputType2[\"Coin\"] = 0] = \"Coin\";\n  InputType2[InputType2[\"Contract\"] = 1] = \"Contract\";\n  InputType2[InputType2[\"Message\"] = 2] = \"Message\";\n  return InputType2;\n})(InputType || {});\nvar InputCoinCoder = class extends Coder2 {\n  constructor() {\n    super(\"InputCoin\", \"struct InputCoin\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new B256Coder().encode(value.txID));\n    parts.push(new NumberCoder2(\"u16\", { padToWordSize: true }).encode(value.outputIndex));\n    parts.push(new B256Coder().encode(value.owner));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new NumberCoder2(\"u16\", { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.predicateGasUsed));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.predicateLength));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));\n    parts.push(\n      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)\n    );\n    return concat2(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new NumberCoder2(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const owner = decoded;\n    [decoded, o] = new BigNumberCoder(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new NumberCoder2(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new BigNumberCoder(\"u64\").decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new BigNumberCoder(\"u64\").decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new BigNumberCoder(\"u64\").decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);\n    const predicateData = decoded;\n    return [\n      {\n        type: 0 /* Coin */,\n        txID,\n        outputIndex,\n        owner,\n        amount,\n        assetId,\n        txPointer,\n        witnessIndex,\n        predicateGasUsed,\n        predicateLength,\n        predicateDataLength,\n        predicate,\n        predicateData\n      },\n      o\n    ];\n  }\n};\nvar InputContractCoder = class extends Coder2 {\n  constructor() {\n    super(\"InputContract\", \"struct InputContract\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new B256Coder().encode(value.txID));\n    parts.push(new NumberCoder2(\"u16\", { padToWordSize: true }).encode(value.outputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new B256Coder().encode(value.contractID));\n    return concat2(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new NumberCoder2(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractID = decoded;\n    return [\n      {\n        type: 1 /* Contract */,\n        txID,\n        outputIndex,\n        balanceRoot,\n        stateRoot,\n        txPointer,\n        contractID\n      },\n      o\n    ];\n  }\n};\nvar InputMessageCoder = class extends Coder2 {\n  constructor() {\n    super(\"InputMessage\", \"struct InputMessage\", 0);\n  }\n  static getMessageId(value) {\n    const parts = [];\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push(arrayify2(value.data || \"0x\"));\n    return sha256(concat2(parts));\n  }\n  static encodeData(messageData) {\n    const bytes = arrayify2(messageData || \"0x\");\n    const dataLength = bytes.length;\n    return new ByteArrayCoder(dataLength).encode(bytes);\n  }\n  encode(value) {\n    const parts = [];\n    const data = InputMessageCoder.encodeData(value.data);\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new NumberCoder2(\"u16\", { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.predicateGasUsed));\n    parts.push(new BigNumberCoder(\"u64\").encode(data.length));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.predicateLength));\n    parts.push(new BigNumberCoder(\"u64\").encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(data.length).encode(data));\n    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));\n    parts.push(\n      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)\n    );\n    return concat2(parts);\n  }\n  static decodeData(messageData) {\n    const bytes = arrayify2(messageData);\n    const dataLength = bytes.length;\n    const [data] = new ByteArrayCoder(dataLength).decode(bytes, 0);\n    return arrayify2(data);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const sender = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const recipient = decoded;\n    [decoded, o] = new BigNumberCoder(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const nonce = decoded;\n    [decoded, o] = new NumberCoder2(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new BigNumberCoder(\"u64\").decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new NumberCoder2(\"u32\", { padToWordSize: true }).decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new BigNumberCoder(\"u64\").decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new BigNumberCoder(\"u64\").decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const messageData = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);\n    const predicateData = decoded;\n    return [\n      {\n        type: 2 /* Message */,\n        sender,\n        recipient,\n        amount,\n        witnessIndex,\n        nonce,\n        predicateGasUsed,\n        dataLength,\n        predicateLength,\n        predicateDataLength,\n        data: messageData,\n        predicate,\n        predicateData\n      },\n      o\n    ];\n  }\n};\nvar InputCoder = class extends Coder2 {\n  constructor() {\n    super(\"Input\", \"struct Input\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new NumberCoder2(\"u8\", { padToWordSize: true }).encode(value.type));\n    const { type } = value;\n    switch (type) {\n      case 0 /* Coin */: {\n        parts.push(new InputCoinCoder().encode(value));\n        break;\n      }\n      case 1 /* Contract */: {\n        parts.push(new InputContractCoder().encode(value));\n        break;\n      }\n      case 2 /* Message */: {\n        parts.push(new InputMessageCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError2(\n          ErrorCode2.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n    return concat2(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new NumberCoder2(\"u8\", { padToWordSize: true }).decode(data, o);\n    const type = decoded;\n    switch (type) {\n      case 0 /* Coin */: {\n        [decoded, o] = new InputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 1 /* Contract */: {\n        [decoded, o] = new InputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 2 /* Message */: {\n        [decoded, o] = new InputMessageCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError2(\n          ErrorCode2.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n  }\n};\n\n// src/coders/output.ts\nimport { Coder as Coder3, B256Coder as B256Coder2, NumberCoder as NumberCoder3, BigNumberCoder as BigNumberCoder2 } from \"@fuel-ts/abi-coder\";\nimport { ErrorCode as ErrorCode3, FuelError as FuelError3 } from \"@fuel-ts/errors\";\nimport { concat as concat3 } from \"@fuel-ts/utils\";\nvar OutputType = /* @__PURE__ */ ((OutputType2) => {\n  OutputType2[OutputType2[\"Coin\"] = 0] = \"Coin\";\n  OutputType2[OutputType2[\"Contract\"] = 1] = \"Contract\";\n  OutputType2[OutputType2[\"Change\"] = 2] = \"Change\";\n  OutputType2[OutputType2[\"Variable\"] = 3] = \"Variable\";\n  OutputType2[OutputType2[\"ContractCreated\"] = 4] = \"ContractCreated\";\n  return OutputType2;\n})(OutputType || {});\nvar OutputCoinCoder = class extends Coder3 {\n  constructor() {\n    super(\"OutputCoin\", \"struct OutputCoin\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new B256Coder2().encode(value.to));\n    parts.push(new BigNumberCoder2(\"u64\").encode(value.amount));\n    parts.push(new B256Coder2().encode(value.assetId));\n    return concat3(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder2(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const assetId = decoded;\n    return [\n      {\n        type: 0 /* Coin */,\n        to,\n        amount,\n        assetId\n      },\n      o\n    ];\n  }\n};\nvar OutputContractCoder = class extends Coder3 {\n  constructor() {\n    super(\"OutputContract\", \"struct OutputContract\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new NumberCoder3(\"u8\", { padToWordSize: true }).encode(value.inputIndex));\n    parts.push(new B256Coder2().encode(value.balanceRoot));\n    parts.push(new B256Coder2().encode(value.stateRoot));\n    return concat3(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new NumberCoder3(\"u8\", { padToWordSize: true }).decode(data, o);\n    const inputIndex = decoded;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const stateRoot = decoded;\n    return [\n      {\n        type: 1 /* Contract */,\n        inputIndex,\n        balanceRoot,\n        stateRoot\n      },\n      o\n    ];\n  }\n};\nvar OutputChangeCoder = class extends Coder3 {\n  constructor() {\n    super(\"OutputChange\", \"struct OutputChange\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new B256Coder2().encode(value.to));\n    parts.push(new BigNumberCoder2(\"u64\").encode(value.amount));\n    parts.push(new B256Coder2().encode(value.assetId));\n    return concat3(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder2(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const assetId = decoded;\n    return [\n      {\n        type: 2 /* Change */,\n        to,\n        amount,\n        assetId\n      },\n      o\n    ];\n  }\n};\nvar OutputVariableCoder = class extends Coder3 {\n  constructor() {\n    super(\"OutputVariable\", \"struct OutputVariable\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new B256Coder2().encode(value.to));\n    parts.push(new BigNumberCoder2(\"u64\").encode(value.amount));\n    parts.push(new B256Coder2().encode(value.assetId));\n    return concat3(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder2(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const assetId = decoded;\n    return [\n      {\n        type: 3 /* Variable */,\n        to,\n        amount,\n        assetId\n      },\n      o\n    ];\n  }\n};\nvar OutputContractCreatedCoder = class extends Coder3 {\n  constructor() {\n    super(\"OutputContractCreated\", \"struct OutputContractCreated\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new B256Coder2().encode(value.contractId));\n    parts.push(new B256Coder2().encode(value.stateRoot));\n    return concat3(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new B256Coder2().decode(data, o);\n    const stateRoot = decoded;\n    return [\n      {\n        type: 4 /* ContractCreated */,\n        contractId,\n        stateRoot\n      },\n      o\n    ];\n  }\n};\nvar OutputCoder = class extends Coder3 {\n  constructor() {\n    super(\"Output\", \" struct Output\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new NumberCoder3(\"u8\", { padToWordSize: true }).encode(value.type));\n    const { type } = value;\n    switch (type) {\n      case 0 /* Coin */: {\n        parts.push(new OutputCoinCoder().encode(value));\n        break;\n      }\n      case 1 /* Contract */: {\n        parts.push(new OutputContractCoder().encode(value));\n        break;\n      }\n      case 2 /* Change */: {\n        parts.push(new OutputChangeCoder().encode(value));\n        break;\n      }\n      case 3 /* Variable */: {\n        parts.push(new OutputVariableCoder().encode(value));\n        break;\n      }\n      case 4 /* ContractCreated */: {\n        parts.push(new OutputContractCreatedCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError3(\n          ErrorCode3.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n    return concat3(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new NumberCoder3(\"u8\", { padToWordSize: true }).decode(data, o);\n    const type = decoded;\n    switch (type) {\n      case 0 /* Coin */: {\n        [decoded, o] = new OutputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 1 /* Contract */: {\n        [decoded, o] = new OutputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 2 /* Change */: {\n        [decoded, o] = new OutputChangeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 3 /* Variable */: {\n        [decoded, o] = new OutputVariableCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 4 /* ContractCreated */: {\n        [decoded, o] = new OutputContractCreatedCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError3(\n          ErrorCode3.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n  }\n};\n\n// src/coders/policy.ts\nimport { BigNumberCoder as BigNumberCoder3, Coder as Coder4, NumberCoder as NumberCoder4 } from \"@fuel-ts/abi-coder\";\nimport { ErrorCode as ErrorCode4, FuelError as FuelError4 } from \"@fuel-ts/errors\";\nimport { concat as concat4 } from \"@fuel-ts/utils\";\nvar PolicyType = /* @__PURE__ */ ((PolicyType2) => {\n  PolicyType2[PolicyType2[\"Tip\"] = 1] = \"Tip\";\n  PolicyType2[PolicyType2[\"WitnessLimit\"] = 2] = \"WitnessLimit\";\n  PolicyType2[PolicyType2[\"Maturity\"] = 4] = \"Maturity\";\n  PolicyType2[PolicyType2[\"MaxFee\"] = 8] = \"MaxFee\";\n  return PolicyType2;\n})(PolicyType || {});\nvar sortPolicies = (policies) => policies.sort((a, b) => a.type - b.type);\nfunction validateDuplicatedPolicies(policies) {\n  const seenTypes = /* @__PURE__ */ new Set();\n  policies.forEach((policy) => {\n    if (seenTypes.has(policy.type)) {\n      throw new FuelError4(\n        ErrorCode4.DUPLICATED_POLICY,\n        `Duplicate policy type found: ${8 /* MaxFee */}`\n      );\n    }\n    seenTypes.add(policy.type);\n  });\n}\nvar PoliciesCoder = class extends Coder4 {\n  constructor() {\n    super(\"Policies\", \"array Policy\", 0);\n  }\n  encode(policies) {\n    validateDuplicatedPolicies(policies);\n    const sortedPolicies = sortPolicies(policies);\n    const parts = [];\n    sortedPolicies.forEach(({ data, type }) => {\n      switch (type) {\n        case 8 /* MaxFee */:\n        case 1 /* Tip */:\n        case 2 /* WitnessLimit */:\n          parts.push(new BigNumberCoder3(\"u64\").encode(data));\n          break;\n        case 4 /* Maturity */:\n          parts.push(new NumberCoder4(\"u32\", { padToWordSize: true }).encode(data));\n          break;\n        default: {\n          throw new FuelError4(ErrorCode4.INVALID_POLICY_TYPE, `Invalid policy type: ${type}`);\n        }\n      }\n    });\n    return concat4(parts);\n  }\n  decode(data, offset, policyTypes) {\n    let o = offset;\n    const policies = [];\n    if (policyTypes & 1 /* Tip */) {\n      const [tip, nextOffset] = new BigNumberCoder3(\"u64\").decode(data, o);\n      o = nextOffset;\n      policies.push({ type: 1 /* Tip */, data: tip });\n    }\n    if (policyTypes & 2 /* WitnessLimit */) {\n      const [witnessLimit, nextOffset] = new BigNumberCoder3(\"u64\").decode(data, o);\n      o = nextOffset;\n      policies.push({ type: 2 /* WitnessLimit */, data: witnessLimit });\n    }\n    if (policyTypes & 4 /* Maturity */) {\n      const [maturity, nextOffset] = new NumberCoder4(\"u32\", { padToWordSize: true }).decode(\n        data,\n        o\n      );\n      o = nextOffset;\n      policies.push({ type: 4 /* Maturity */, data: maturity });\n    }\n    if (policyTypes & 8 /* MaxFee */) {\n      const [maxFee, nextOffset] = new BigNumberCoder3(\"u64\").decode(data, o);\n      o = nextOffset;\n      policies.push({ type: 8 /* MaxFee */, data: maxFee });\n    }\n    return [policies, o];\n  }\n};\n\n// src/receipt.ts\nimport { BigNumberCoder as BigNumberCoder4 } from \"@fuel-ts/abi-coder\";\nimport { sha256 as sha2562 } from \"@fuel-ts/hasher\";\nimport { arrayify as arrayify3, concat as concat5 } from \"@fuel-ts/utils\";\nvar ReceiptType = /* @__PURE__ */ ((ReceiptType2) => {\n  ReceiptType2[ReceiptType2[\"Call\"] = 0] = \"Call\";\n  ReceiptType2[ReceiptType2[\"Return\"] = 1] = \"Return\";\n  ReceiptType2[ReceiptType2[\"ReturnData\"] = 2] = \"ReturnData\";\n  ReceiptType2[ReceiptType2[\"Panic\"] = 3] = \"Panic\";\n  ReceiptType2[ReceiptType2[\"Revert\"] = 4] = \"Revert\";\n  ReceiptType2[ReceiptType2[\"Log\"] = 5] = \"Log\";\n  ReceiptType2[ReceiptType2[\"LogData\"] = 6] = \"LogData\";\n  ReceiptType2[ReceiptType2[\"Transfer\"] = 7] = \"Transfer\";\n  ReceiptType2[ReceiptType2[\"TransferOut\"] = 8] = \"TransferOut\";\n  ReceiptType2[ReceiptType2[\"ScriptResult\"] = 9] = \"ScriptResult\";\n  ReceiptType2[ReceiptType2[\"MessageOut\"] = 10] = \"MessageOut\";\n  ReceiptType2[ReceiptType2[\"Mint\"] = 11] = \"Mint\";\n  ReceiptType2[ReceiptType2[\"Burn\"] = 12] = \"Burn\";\n  return ReceiptType2;\n})(ReceiptType || {});\nvar getMintedAssetId = (contractId, subId) => {\n  const contractIdBytes = arrayify3(contractId);\n  const subIdBytes = arrayify3(subId);\n  return sha2562(concat5([contractIdBytes, subIdBytes]));\n};\nvar createAssetId = (contractId, subId) => ({\n  bits: getMintedAssetId(contractId, subId)\n});\nvar getMessageId = (value) => {\n  const parts = [];\n  parts.push(new ByteArrayCoder(32).encode(value.sender));\n  parts.push(new ByteArrayCoder(32).encode(value.recipient));\n  parts.push(new ByteArrayCoder(32).encode(value.nonce));\n  parts.push(new BigNumberCoder4(\"u64\").encode(value.amount));\n  parts.push(arrayify3(value.data || \"0x\"));\n  return sha2562(concat5(parts));\n};\n\n// src/coders/storage-slot.ts\nimport { B256Coder as B256Coder3, StructCoder as StructCoder2 } from \"@fuel-ts/abi-coder\";\nvar StorageSlotCoder = class extends StructCoder2 {\n  constructor() {\n    super(\"StorageSlot\", {\n      key: new B256Coder3(),\n      value: new B256Coder3()\n    });\n  }\n};\n\n// src/coders/transaction.ts\nimport { Coder as Coder7, ArrayCoder, B256Coder as B256Coder5, NumberCoder as NumberCoder7, BigNumberCoder as BigNumberCoder5 } from \"@fuel-ts/abi-coder\";\nimport { ErrorCode as ErrorCode6, FuelError as FuelError6 } from \"@fuel-ts/errors\";\nimport { concat as concat8 } from \"@fuel-ts/utils\";\n\n// src/coders/upgrade-purpose.ts\nimport { B256Coder as B256Coder4, Coder as Coder5, NumberCoder as NumberCoder5 } from \"@fuel-ts/abi-coder\";\nimport { ErrorCode as ErrorCode5, FuelError as FuelError5 } from \"@fuel-ts/errors\";\nimport { concat as concat6 } from \"@fuel-ts/utils\";\nvar UpgradePurposeTypeEnum = /* @__PURE__ */ ((UpgradePurposeTypeEnum2) => {\n  UpgradePurposeTypeEnum2[UpgradePurposeTypeEnum2[\"ConsensusParameters\"] = 0] = \"ConsensusParameters\";\n  UpgradePurposeTypeEnum2[UpgradePurposeTypeEnum2[\"StateTransition\"] = 1] = \"StateTransition\";\n  return UpgradePurposeTypeEnum2;\n})(UpgradePurposeTypeEnum || {});\nvar UpgradePurposeCoder = class extends Coder5 {\n  constructor() {\n    super(\"UpgradePurpose\", \"UpgradePurpose\", 0);\n  }\n  encode(upgradePurposeType) {\n    const parts = [];\n    const { type } = upgradePurposeType;\n    parts.push(new NumberCoder5(\"u8\", { padToWordSize: true }).encode(type));\n    switch (type) {\n      case 0 /* ConsensusParameters */: {\n        const data = upgradePurposeType.data;\n        parts.push(new NumberCoder5(\"u16\", { padToWordSize: true }).encode(data.witnessIndex));\n        parts.push(new B256Coder4().encode(data.checksum));\n        break;\n      }\n      case 1 /* StateTransition */: {\n        const data = upgradePurposeType.data;\n        parts.push(new B256Coder4().encode(data.bytecodeRoot));\n        break;\n      }\n      default: {\n        throw new FuelError5(\n          ErrorCode5.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n    return concat6(parts);\n  }\n  decode(data, offset) {\n    let o = offset;\n    let decoded;\n    [decoded, o] = new NumberCoder5(\"u8\", { padToWordSize: true }).decode(data, o);\n    const type = decoded;\n    switch (type) {\n      case 0 /* ConsensusParameters */: {\n        [decoded, o] = new NumberCoder5(\"u16\", { padToWordSize: true }).decode(data, o);\n        const witnessIndex = decoded;\n        [decoded, o] = new B256Coder4().decode(data, o);\n        const checksum = decoded;\n        return [{ type, data: { witnessIndex, checksum } }, o];\n      }\n      case 1 /* StateTransition */: {\n        [decoded, o] = new B256Coder4().decode(data, o);\n        const bytecodeRoot = decoded;\n        return [{ type, data: { bytecodeRoot } }, o];\n      }\n      default: {\n        throw new FuelError5(\n          ErrorCode5.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n  }\n};\n\n// src/coders/witness.ts\nimport { Coder as Coder6, NumberCoder as NumberCoder6 } from \"@fuel-ts/abi-coder\";\nimport { concat as concat7 } from \"@fuel-ts/utils\";\nvar WitnessCoder = class extends Coder6 {\n  constructor() {\n    super(\n      \"Witness\",\n      // Types of dynamic length are not supported in the ABI\n      \"unknown\",\n      0\n    );\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new NumberCoder6(\"u32\", { padToWordSize: true }).encode(value.dataLength));\n    parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));\n    return concat7(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new NumberCoder6(\"u32\", { padToWordSize: true }).decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const witnessData = decoded;\n    return [\n      {\n        dataLength,\n        data: witnessData\n      },\n      o\n    ];\n  }\n};\n\n// src/coders/transaction.ts\nvar TransactionType = /* @__PURE__ */ ((TransactionType2) => {\n  TransactionType2[TransactionType2[\"Script\"] = 0] = \"Script\";\n  TransactionType2[TransactionType2[\"Create\"] = 1] = \"Create\";\n  TransactionType2[TransactionType2[\"Mint\"] = 2] = \"Mint\";\n  TransactionType2[TransactionType2[\"Upgrade\"] = 3] = \"Upgrade\";\n  TransactionType2[TransactionType2[\"Upload\"] = 4] = \"Upload\";\n  TransactionType2[TransactionType2[\"Blob\"] = 5] = \"Blob\";\n  return TransactionType2;\n})(TransactionType || {});\nvar TransactionScriptCoder = class extends Coder7 {\n  constructor() {\n    super(\"TransactionScript\", \"struct TransactionScript\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new BigNumberCoder5(\"u64\").encode(value.scriptGasLimit));\n    parts.push(new B256Coder5().encode(value.receiptsRoot));\n    parts.push(new BigNumberCoder5(\"u64\").encode(value.scriptLength));\n    parts.push(new BigNumberCoder5(\"u64\").encode(value.scriptDataLength));\n    parts.push(new NumberCoder7(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new ByteArrayCoder(value.scriptLength.toNumber()).encode(value.script));\n    parts.push(new ByteArrayCoder(value.scriptDataLength.toNumber()).encode(value.scriptData));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return concat8(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new BigNumberCoder5(\"u64\").decode(data, o);\n    const scriptGasLimit = decoded;\n    [decoded, o] = new B256Coder5().decode(data, o);\n    const receiptsRoot = decoded;\n    [decoded, o] = new BigNumberCoder5(\"u64\").decode(data, o);\n    const scriptLength = decoded;\n    [decoded, o] = new BigNumberCoder5(\"u64\").decode(data, o);\n    const scriptDataLength = decoded;\n    [decoded, o] = new NumberCoder7(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptLength.toNumber()).decode(data, o);\n    const script = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptDataLength.toNumber()).decode(data, o);\n    const scriptData = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 0 /* Script */,\n        scriptGasLimit,\n        scriptLength,\n        scriptDataLength,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        receiptsRoot,\n        script,\n        scriptData,\n        policies,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionCreateCoder = class extends Coder7 {\n  constructor() {\n    super(\"TransactionCreate\", \"struct TransactionCreate\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.bytecodeWitnessIndex));\n    parts.push(new B256Coder5().encode(value.salt));\n    parts.push(new BigNumberCoder5(\"u64\").encode(value.storageSlotsCount));\n    parts.push(new NumberCoder7(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(\n      new ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount.toNumber()).encode(\n        value.storageSlots\n      )\n    );\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return concat8(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const bytecodeWitnessIndex = decoded;\n    [decoded, o] = new B256Coder5().decode(data, o);\n    const salt = decoded;\n    [decoded, o] = new BigNumberCoder5(\"u64\").decode(data, o);\n    const storageSlotsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ArrayCoder(new StorageSlotCoder(), storageSlotsCount.toNumber()).decode(\n      data,\n      o\n    );\n    const storageSlots = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 1 /* Create */,\n        bytecodeWitnessIndex,\n        policyTypes,\n        storageSlotsCount,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        salt,\n        policies,\n        storageSlots,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionMintCoder = class extends Coder7 {\n  constructor() {\n    super(\"TransactionMint\", \"struct TransactionMint\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new InputContractCoder().encode(value.inputContract));\n    parts.push(new OutputContractCoder().encode(value.outputContract));\n    parts.push(new BigNumberCoder5(\"u64\").encode(value.mintAmount));\n    parts.push(new B256Coder5().encode(value.mintAssetId));\n    parts.push(new BigNumberCoder5(\"u64\").encode(value.gasPrice));\n    return concat8(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new InputContractCoder().decode(data, o);\n    const inputContract = decoded;\n    [decoded, o] = new OutputContractCoder().decode(data, o);\n    const outputContract = decoded;\n    [decoded, o] = new BigNumberCoder5(\"u64\").decode(data, o);\n    const mintAmount = decoded;\n    [decoded, o] = new B256Coder5().decode(data, o);\n    const mintAssetId = decoded;\n    [decoded, o] = new BigNumberCoder5(\"u64\").decode(data, o);\n    const gasPrice = decoded;\n    return [\n      {\n        type: 2 /* Mint */,\n        txPointer,\n        inputContract,\n        outputContract,\n        mintAmount,\n        mintAssetId,\n        gasPrice\n      },\n      o\n    ];\n  }\n};\nvar TransactionUpgradeCoder = class extends Coder7 {\n  constructor() {\n    super(\"TransactionUpgrade\", \"struct TransactionUpgrade\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new UpgradePurposeCoder().encode(value.upgradePurpose));\n    parts.push(new NumberCoder7(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return concat8(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new UpgradePurposeCoder().decode(data, o);\n    const upgradePurpose = decoded;\n    [decoded, o] = new NumberCoder7(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 3 /* Upgrade */,\n        upgradePurpose,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        policies,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionUploadCoder = class extends Coder7 {\n  constructor() {\n    super(\"TransactionUpload\", \"struct TransactionUpload\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new B256Coder5().encode(value.root));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.subsectionIndex));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.subsectionsNumber));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.proofSetCount));\n    parts.push(new NumberCoder7(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new ArrayCoder(new B256Coder5(), value.proofSetCount).encode(value.proofSet));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return concat8(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder5().decode(data, o);\n    const root = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessIndex = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const subsectionIndex = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const subsectionsNumber = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const proofSetCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ArrayCoder(new B256Coder5(), proofSetCount).decode(data, o);\n    const proofSet = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 4 /* Upload */,\n        root,\n        witnessIndex,\n        subsectionIndex,\n        subsectionsNumber,\n        proofSetCount,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        proofSet,\n        policies,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionBlobCoder = class extends Coder7 {\n  constructor() {\n    super(\"TransactionBlob\", \"struct TransactionBlob\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new B256Coder5().encode(value.blobId));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new NumberCoder7(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder7(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return concat8(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new B256Coder5().decode(data, o);\n    const blobId = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessIndex = decoded;\n    [decoded, o] = new NumberCoder7(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder7(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 5 /* Blob */,\n        blobId,\n        witnessIndex,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        policies,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionCoder = class extends Coder7 {\n  constructor() {\n    super(\"Transaction\", \"struct Transaction\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new NumberCoder7(\"u8\", { padToWordSize: true }).encode(value.type));\n    const { type } = value;\n    switch (value.type) {\n      case 0 /* Script */: {\n        parts.push(\n          new TransactionScriptCoder().encode(value)\n        );\n        break;\n      }\n      case 1 /* Create */: {\n        parts.push(\n          new TransactionCreateCoder().encode(value)\n        );\n        break;\n      }\n      case 2 /* Mint */: {\n        parts.push(new TransactionMintCoder().encode(value));\n        break;\n      }\n      case 3 /* Upgrade */: {\n        parts.push(\n          new TransactionUpgradeCoder().encode(value)\n        );\n        break;\n      }\n      case 4 /* Upload */: {\n        parts.push(\n          new TransactionUploadCoder().encode(value)\n        );\n        break;\n      }\n      case 5 /* Blob */: {\n        parts.push(new TransactionBlobCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError6(\n          ErrorCode6.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n    return concat8(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new NumberCoder7(\"u8\", { padToWordSize: true }).decode(data, o);\n    const type = decoded;\n    switch (type) {\n      case 0 /* Script */: {\n        [decoded, o] = new TransactionScriptCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 1 /* Create */: {\n        [decoded, o] = new TransactionCreateCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 2 /* Mint */: {\n        [decoded, o] = new TransactionMintCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 3 /* Upgrade */: {\n        [decoded, o] = new TransactionUpgradeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 4 /* Upload */: {\n        [decoded, o] = new TransactionUploadCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 5 /* Blob */: {\n        [decoded, o] = new TransactionBlobCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError6(\n          ErrorCode6.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n  }\n};\n\n// src/coders/utxo-id.ts\nimport { B256Coder as B256Coder6, NumberCoder as NumberCoder8, StructCoder as StructCoder3 } from \"@fuel-ts/abi-coder\";\nvar UtxoIdCoder = class extends StructCoder3 {\n  constructor() {\n    super(\"UtxoId\", {\n      transactionId: new B256Coder6(),\n      outputIndex: new NumberCoder8(\"u16\", { padToWordSize: true })\n    });\n  }\n};\nexport {\n  ByteArrayCoder,\n  InputCoder,\n  InputCoinCoder,\n  InputContractCoder,\n  InputMessageCoder,\n  InputType,\n  OutputChangeCoder,\n  OutputCoder,\n  OutputCoinCoder,\n  OutputContractCoder,\n  OutputContractCreatedCoder,\n  OutputType,\n  OutputVariableCoder,\n  PoliciesCoder,\n  PolicyType,\n  ReceiptType,\n  StorageSlotCoder,\n  TransactionBlobCoder,\n  TransactionCoder,\n  TransactionCreateCoder,\n  TransactionMintCoder,\n  TransactionScriptCoder,\n  TransactionType,\n  TransactionUpgradeCoder,\n  TransactionUploadCoder,\n  TxPointerCoder,\n  UpgradePurposeCoder,\n  UpgradePurposeTypeEnum,\n  UtxoIdCoder,\n  WitnessCoder,\n  createAssetId,\n  getMessageId,\n  getMintedAssetId,\n  sortPolicies\n};\n//# sourceMappingURL=index.mjs.map","export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig * -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(async () => {}); //=> \"AsyncFunction\"\n *      R.type(undefined); //=> \"Undefined\"\n *      R.type(BigInt(123)); //=> \"BigInt\"\n */\nvar type = /*#__PURE__*/_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\nexport default type;","export default function _cloneRegExp(pattern) {\n  return new RegExp(pattern.source, pattern.flags ? pattern.flags : (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : '') + (pattern.dotAll ? 's' : ''));\n}","import _cloneRegExp from \"./_cloneRegExp.js\";\nimport type from \"../type.js\";\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nexport default function _clone(value, deep, map) {\n  map || (map = new _ObjectMap());\n\n  // this avoids the slower switch with a quick if decision removing some milliseconds in each run.\n  if (_isPrimitive(value)) {\n    return value;\n  }\n  var copy = function copy(copiedValue) {\n    // Check for circular and same references on the object graph and return its corresponding clone.\n    var cachedCopy = map.get(value);\n    if (cachedCopy) {\n      return cachedCopy;\n    }\n    map.set(value, copiedValue);\n    for (var key in value) {\n      if (Object.prototype.hasOwnProperty.call(value, key)) {\n        copiedValue[key] = deep ? _clone(value[key], true, map) : value[key];\n      }\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':\n      return copy(Object.create(Object.getPrototypeOf(value)));\n    case 'Array':\n      return copy(Array(value.length));\n    case 'Date':\n      return new Date(value.valueOf());\n    case 'RegExp':\n      return _cloneRegExp(value);\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'BigInt64Array':\n    case 'BigUint64Array':\n      return value.slice();\n    default:\n      return value;\n  }\n}\nfunction _isPrimitive(param) {\n  var type = typeof param;\n  return param == null || type != 'object' && type != 'function';\n}\nvar _ObjectMap = /*#__PURE__*/function () {\n  function _ObjectMap() {\n    this.map = {};\n    this.length = 0;\n  }\n  _ObjectMap.prototype.set = function (key, value) {\n    var hashedKey = this.hash(key);\n    var bucket = this.map[hashedKey];\n    if (!bucket) {\n      this.map[hashedKey] = bucket = [];\n    }\n    bucket.push([key, value]);\n    this.length += 1;\n  };\n  _ObjectMap.prototype.hash = function (key) {\n    var hashedKey = [];\n    for (var value in key) {\n      hashedKey.push(Object.prototype.toString.call(key[value]));\n    }\n    return hashedKey.join();\n  };\n  _ObjectMap.prototype.get = function (key) {\n    /**\n     * depending on the number of objects to be cloned is faster to just iterate over the items in the map just because the hash function is so costly,\n     * on my tests this number is 180, anything above that using the hash function is faster.\n     */\n    if (this.length <= 180) {\n      for (var p in this.map) {\n        var bucket = this.map[p];\n        for (var i = 0; i < bucket.length; i += 1) {\n          var element = bucket[i];\n          if (element[0] === key) {\n            return element[1];\n          }\n        }\n      }\n      return;\n    }\n    var hashedKey = this.hash(key);\n    var bucket = this.map[hashedKey];\n    if (!bucket) {\n      return;\n    }\n    for (var i = 0; i < bucket.length; i += 1) {\n      var element = bucket[i];\n      if (element[0] === key) {\n        return element[1];\n      }\n    }\n  };\n  return _ObjectMap;\n}();","import _clone from \"./internal/_clone.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Creates a deep copy of the source that can be used in place of the source\n * object without retaining any references to it.\n * The source object may contain (nested) `Array`s and `Object`s,\n * `Number`s, `String`s, `Boolean`s and `Date`s.\n * `Function`s are assigned by reference rather than copied.\n *\n * Dispatches to a `clone` method if present.\n *\n * Note that if the source object has multiple nodes that share a reference,\n * the returned object will have the same structure, but the references will\n * be pointed to the location within the cloned value.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      const objects = [{}, {}, {}];\n *      const objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nvar clone = /*#__PURE__*/_curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, true);\n});\nexport default clone;","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(`${title} must be valid boolean, got \"${value}\".`);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error(`expected valid ${title}: ${min} <= n < ${max}, got ${typeof n} ${n}`);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","export const defaultJsonSerializer = JSON;\n//# sourceMappingURL=defaultJsonSerializer.js.map","export const uppercase = (str) => str.toUpperCase();\n/**\n * Convert Headers instance into regular object\n */\nexport const HeadersInstanceToPlainObject = (headers) => {\n    const o = {};\n    headers.forEach((v, k) => {\n        o[k] = v;\n    });\n    return o;\n};\n//# sourceMappingURL=helpers.js.map","export const parseRequestArgs = (documentOrOptions, variables, requestHeaders) => {\n    return documentOrOptions.document\n        ? documentOrOptions\n        : {\n            document: documentOrOptions,\n            variables: variables,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexport const parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => {\n    return queryOrOptions.query\n        ? queryOrOptions\n        : {\n            query: queryOrOptions,\n            variables: variables,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexport const parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {\n    return documentsOrOptions.documents\n        ? documentsOrOptions\n        : {\n            documents: documentsOrOptions,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexport const parseRequestExtendedArgs = (urlOrOptions, document, ...variablesAndRequestHeaders) => {\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.document\n        ? urlOrOptions\n        : {\n            url: urlOrOptions,\n            document: document,\n            variables,\n            requestHeaders,\n            signal: undefined,\n        };\n};\nexport const parseRawRequestExtendedArgs = (urlOrOptions, query, ...variablesAndRequestHeaders) => {\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.query\n        ? urlOrOptions\n        : {\n            url: urlOrOptions,\n            query: query,\n            variables,\n            requestHeaders,\n            signal: undefined,\n        };\n};\n//# sourceMappingURL=parseArgs.js.map","export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n","/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n","/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n","/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n","import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","import { inspect } from './inspect.mjs';\n/* c8 ignore next 3 */\n\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n","import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n","import { parse, print } from 'graphql';\n/**\n * helpers\n */\nconst extractOperationName = (document) => {\n    let operationName = undefined;\n    const operationDefinitions = document.definitions.filter((definition) => definition.kind === `OperationDefinition`);\n    if (operationDefinitions.length === 1) {\n        operationName = operationDefinitions[0]?.name?.value;\n    }\n    return operationName;\n};\nexport const resolveRequestDocument = (document) => {\n    if (typeof document === `string`) {\n        let operationName = undefined;\n        try {\n            const parsedDocument = parse(document);\n            operationName = extractOperationName(parsedDocument);\n        }\n        catch (err) {\n            // Failed parsing the document, the operationName will be undefined\n        }\n        return { query: document, operationName };\n    }\n    const operationName = extractOperationName(document);\n    return { query: print(document), operationName };\n};\n//# sourceMappingURL=resolveRequestDocument.js.map","export class ClientError extends Error {\n    constructor(response, request) {\n        const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n            response,\n            request,\n        })}`;\n        super(message);\n        Object.setPrototypeOf(this, ClientError.prototype);\n        this.response = response;\n        this.request = request;\n        // this is needed as Safari doesn't support .captureStackTrace\n        if (typeof Error.captureStackTrace === `function`) {\n            Error.captureStackTrace(this, ClientError);\n        }\n    }\n    static extractMessage(response) {\n        return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`;\n    }\n}\n//# sourceMappingURL=types.js.map","// Save global object in a variable\nvar __global__ =\n(typeof globalThis !== 'undefined' && globalThis) ||\n(typeof self !== 'undefined' && self) ||\n(typeof global !== 'undefined' && global);\n// Create an object that extends from __global__ without the fetch function\nvar __globalThis__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = __global__.DOMException\n}\nF.prototype = __global__; // Needed for feature detection on whatwg-fetch's code\nreturn new F();\n})();\n// Wraps whatwg-fetch with a function scope to hijack the global object\n// \"globalThis\" that's going to be patched\n(function(globalThis) {\n\nvar irrelevant = (function (exports) {\n\n  var global =\n    (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof self !== 'undefined' && self) ||\n    (typeof global !== 'undefined' && global);\n\n  var support = {\n    searchParams: 'URLSearchParams' in global,\n    iterable: 'Symbol' in global && 'iterator' in Symbol,\n    blob:\n      'FileReader' in global &&\n      'Blob' in global &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in global,\n    arrayBuffer: 'ArrayBuffer' in global\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n      throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      /*\n        fetch-mock wraps the Response object in an ES6 Proxy to\n        provide useful test harness features such as flush. However, on\n        ES5 browsers without fetch or Proxy support pollyfills must be used;\n        the proxy-pollyfill is unable to proxy an attribute unless it exists\n        on the object before the Proxy is created. This change ensures\n        Response.bodyUsed exists on the instance, while maintaining the\n        semantic of setting Request.bodyUsed in the constructor before\n        _initBody is called.\n      */\n      this.bodyUsed = this.bodyUsed;\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          var isConsumed = consumed(this);\n          if (isConsumed) {\n            return isConsumed\n          }\n          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n            return Promise.resolve(\n              this._bodyArrayBuffer.buffer.slice(\n                this._bodyArrayBuffer.byteOffset,\n                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n              )\n            )\n          } else {\n            return Promise.resolve(this._bodyArrayBuffer)\n          }\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n    }\n\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n\n    if (this.method === 'GET' || this.method === 'HEAD') {\n      if (options.cache === 'no-store' || options.cache === 'no-cache') {\n        // Search for a '_' parameter in the query string\n        var reParamSearch = /([?&])_=[^&]*/;\n        if (reParamSearch.test(this.url)) {\n          // If it already exists then set the value with the current time\n          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());\n        } else {\n          // Otherwise add a new '_' parameter to the end with the current time\n          var reQueryString = /\\?/;\n          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();\n        }\n      }\n    }\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n    // https://github.com/github/fetch/issues/748\n    // https://github.com/zloirock/core-js/issues/751\n    preProcessedHeaders\n      .split('\\r')\n      .map(function(header) {\n        return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n      })\n      .forEach(function(line) {\n        var parts = line.split(':');\n        var key = parts.shift().trim();\n        if (key) {\n          var value = parts.join(':').trim();\n          headers.append(key, value);\n        }\n      });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!(this instanceof Response)) {\n      throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n    }\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = global.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        setTimeout(function() {\n          resolve(new Response(body, options));\n        }, 0);\n      };\n\n      xhr.onerror = function() {\n        setTimeout(function() {\n          reject(new TypeError('Network request failed'));\n        }, 0);\n      };\n\n      xhr.ontimeout = function() {\n        setTimeout(function() {\n          reject(new TypeError('Network request failed'));\n        }, 0);\n      };\n\n      xhr.onabort = function() {\n        setTimeout(function() {\n          reject(new exports.DOMException('Aborted', 'AbortError'));\n        }, 0);\n      };\n\n      function fixUrl(url) {\n        try {\n          return url === '' && global.location.href ? global.location.href : url\n        } catch (e) {\n          return url\n        }\n      }\n\n      xhr.open(request.method, fixUrl(request.url), true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr) {\n        if (support.blob) {\n          xhr.responseType = 'blob';\n        } else if (\n          support.arrayBuffer &&\n          request.headers.get('Content-Type') &&\n          request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n        ) {\n          xhr.responseType = 'arraybuffer';\n        }\n      }\n\n      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n        Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));\n        });\n      } else {\n        request.headers.forEach(function(value, name) {\n          xhr.setRequestHeader(name, value);\n        });\n      }\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!global.fetch) {\n    global.fetch = fetch;\n    global.Headers = Headers;\n    global.Request = Request;\n    global.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n})({});\n})(__globalThis__);\n// This is a ponyfill, so...\n__globalThis__.fetch.ponyfill = true;\ndelete __globalThis__.fetch.polyfill;\n// Choose between native implementation (__global__) or custom implementation (__globalThis__)\nvar ctx = __global__.fetch ? __global__ : __globalThis__;\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","import { defaultJsonSerializer } from './defaultJsonSerializer.js';\nimport { HeadersInstanceToPlainObject, uppercase } from './helpers.js';\nimport { parseBatchRequestArgs, parseRawRequestArgs, parseRawRequestExtendedArgs, parseRequestArgs, parseRequestExtendedArgs, } from './parseArgs.js';\nimport { resolveRequestDocument } from './resolveRequestDocument.js';\nimport { ClientError, } from './types.js';\nimport crossFetch, * as CrossFetch from 'cross-fetch';\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers) => {\n    let oHeaders = {};\n    if (headers) {\n        if ((typeof Headers !== `undefined` && headers instanceof Headers) ||\n            (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)) {\n            oHeaders = HeadersInstanceToPlainObject(headers);\n        }\n        else if (Array.isArray(headers)) {\n            headers.forEach(([name, value]) => {\n                if (name && value !== undefined) {\n                    oHeaders[name] = value;\n                }\n            });\n        }\n        else {\n            oHeaders = headers;\n        }\n    }\n    return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nconst cleanQuery = (str) => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim();\n/**\n * Create query string for GraphQL request\n */\nconst buildRequestConfig = (params) => {\n    if (!Array.isArray(params.query)) {\n        const params_ = params;\n        const search = [`query=${encodeURIComponent(cleanQuery(params_.query))}`];\n        if (params.variables) {\n            search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`);\n        }\n        if (params_.operationName) {\n            search.push(`operationName=${encodeURIComponent(params_.operationName)}`);\n        }\n        return search.join(`&`);\n    }\n    if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n        throw new Error(`Cannot create query with given variable type, array expected`);\n    }\n    // Batch support\n    const params_ = params;\n    const payload = params.query.reduce((acc, currentQuery, index) => {\n        acc.push({\n            query: cleanQuery(currentQuery),\n            variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined,\n        });\n        return acc;\n    }, []);\n    return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;\n};\nconst createHttpMethodFetcher = (method) => async (params) => {\n    const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params;\n    const headers = { ...params.headers };\n    let queryParams = ``;\n    let body = undefined;\n    if (method === `POST`) {\n        body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer);\n        if (typeof body === `string`) {\n            // @ts-expect-error todo\n            headers[`Content-Type`] = `application/json`;\n        }\n    }\n    else {\n        // @ts-expect-error todo needs ADT for TS to understand the different states\n        queryParams = buildRequestConfig({\n            query,\n            variables,\n            operationName,\n            jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer,\n        });\n    }\n    const init = {\n        method,\n        headers,\n        body,\n        ...fetchOptions,\n    };\n    let urlResolved = url;\n    let initResolved = init;\n    if (middleware) {\n        const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }));\n        const { url: urlNew, ...initNew } = result;\n        urlResolved = urlNew;\n        initResolved = initNew;\n    }\n    if (queryParams) {\n        urlResolved = `${urlResolved}?${queryParams}`;\n    }\n    return await fetch(urlResolved, initResolved);\n};\n/**\n * GraphQL Client.\n */\nclass GraphQLClient {\n    constructor(url, requestConfig = {}) {\n        this.url = url;\n        this.requestConfig = requestConfig;\n        /**\n         * Send a GraphQL query to the server.\n         */\n        this.rawRequest = async (...args) => {\n            const [queryOrOptions, variables, requestHeaders] = args;\n            const rawRequestOptions = parseRawRequestArgs(queryOrOptions, variables, requestHeaders);\n            const { headers, fetch = crossFetch, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n            const { url } = this;\n            if (rawRequestOptions.signal !== undefined) {\n                fetchOptions.signal = rawRequestOptions.signal;\n            }\n            const { operationName } = resolveRequestDocument(rawRequestOptions.query);\n            return makeRequest({\n                url,\n                query: rawRequestOptions.query,\n                variables: rawRequestOptions.variables,\n                headers: {\n                    ...resolveHeaders(callOrIdentity(headers)),\n                    ...resolveHeaders(rawRequestOptions.requestHeaders),\n                },\n                operationName,\n                fetch,\n                method,\n                fetchOptions,\n                middleware: requestMiddleware,\n            })\n                .then((response) => {\n                if (responseMiddleware) {\n                    responseMiddleware(response);\n                }\n                return response;\n            })\n                .catch((error) => {\n                if (responseMiddleware) {\n                    responseMiddleware(error);\n                }\n                throw error;\n            });\n        };\n    }\n    async request(documentOrOptions, ...variablesAndRequestHeaders) {\n        const [variables, requestHeaders] = variablesAndRequestHeaders;\n        const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders);\n        const { headers, fetch = crossFetch, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n        const { url } = this;\n        if (requestOptions.signal !== undefined) {\n            fetchOptions.signal = requestOptions.signal;\n        }\n        const { query, operationName } = resolveRequestDocument(requestOptions.document);\n        return makeRequest({\n            url,\n            query,\n            variables: requestOptions.variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(requestOptions.requestHeaders),\n            },\n            operationName,\n            fetch,\n            method,\n            fetchOptions,\n            middleware: requestMiddleware,\n        })\n            .then((response) => {\n            if (responseMiddleware) {\n                responseMiddleware(response);\n            }\n            return response.data;\n        })\n            .catch((error) => {\n            if (responseMiddleware) {\n                responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    // prettier-ignore\n    batchRequests(documentsOrOptions, requestHeaders) {\n        const batchRequestOptions = parseBatchRequestArgs(documentsOrOptions, requestHeaders);\n        const { headers, ...fetchOptions } = this.requestConfig;\n        if (batchRequestOptions.signal !== undefined) {\n            fetchOptions.signal = batchRequestOptions.signal;\n        }\n        const queries = batchRequestOptions.documents.map(({ document }) => resolveRequestDocument(document).query);\n        const variables = batchRequestOptions.documents.map(({ variables }) => variables);\n        return makeRequest({\n            url: this.url,\n            query: queries,\n            // @ts-expect-error TODO reconcile batch variables into system.\n            variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(batchRequestOptions.requestHeaders),\n            },\n            operationName: undefined,\n            fetch: this.requestConfig.fetch ?? crossFetch,\n            method: this.requestConfig.method || `POST`,\n            fetchOptions,\n            middleware: this.requestConfig.requestMiddleware,\n        })\n            .then((response) => {\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(response);\n            }\n            return response.data;\n        })\n            .catch((error) => {\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    setHeaders(headers) {\n        this.requestConfig.headers = headers;\n        return this;\n    }\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */\n    setHeader(key, value) {\n        const { headers } = this.requestConfig;\n        if (headers) {\n            // todo what if headers is in nested array form... ?\n            //@ts-expect-error todo\n            headers[key] = value;\n        }\n        else {\n            this.requestConfig.headers = { [key]: value };\n        }\n        return this;\n    }\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */\n    setEndpoint(value) {\n        this.url = value;\n        return this;\n    }\n}\nconst makeRequest = async (params) => {\n    const { query, variables, fetchOptions } = params;\n    const fetcher = createHttpMethodFetcher(uppercase(params.method ?? `post`));\n    const isBatchingQuery = Array.isArray(params.query);\n    const response = await fetcher(params);\n    const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer);\n    const successfullyReceivedData = Array.isArray(result)\n        ? !result.some(({ data }) => !data)\n        : Boolean(result.data);\n    const successfullyPassedErrorPolicy = Array.isArray(result) ||\n        !result.errors ||\n        (Array.isArray(result.errors) && !result.errors.length) ||\n        fetchOptions.errorPolicy === `all` ||\n        fetchOptions.errorPolicy === `ignore`;\n    if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n        // @ts-expect-error TODO fixme\n        const { errors: _, ...rest } = Array.isArray(result) ? result : result;\n        const data = fetchOptions.errorPolicy === `ignore` ? rest : result;\n        const dataEnvelope = isBatchingQuery ? { data } : data;\n        // @ts-expect-error TODO\n        return {\n            ...dataEnvelope,\n            headers: response.headers,\n            status: response.status,\n        };\n    }\n    else {\n        const errorResult = typeof result === `string`\n            ? {\n                error: result,\n            }\n            : result;\n        throw new ClientError(\n        // @ts-expect-error TODO\n        { ...errorResult, status: response.status, headers: response.headers }, { query, variables });\n    }\n};\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nconst rawRequest = async (...args) => {\n    const [urlOrOptions, query, ...variablesAndRequestHeaders] = args;\n    const requestOptions = parseRawRequestExtendedArgs(urlOrOptions, query, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.rawRequest({\n        ...requestOptions,\n    });\n};\n// prettier-ignore\n// eslint-disable-next-line\nasync function request(urlOrOptions, document, ...variablesAndRequestHeaders) {\n    const requestOptions = parseRequestExtendedArgs(urlOrOptions, document, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.request({\n        ...requestOptions,\n    });\n}\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nconst batchRequests = async (...args) => {\n    const params = parseBatchRequestsArgsExtended(args);\n    const client = new GraphQLClient(params.url);\n    return client.batchRequests(params);\n};\nconst parseBatchRequestsArgsExtended = (args) => {\n    if (args.length === 1) {\n        return args[0];\n    }\n    else {\n        return {\n            url: args[0],\n            documents: args[1],\n            requestHeaders: args[2],\n            signal: undefined,\n        };\n    }\n};\nconst createRequestBody = (query, variables, operationName, jsonSerializer) => {\n    const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer;\n    if (!Array.isArray(query)) {\n        return jsonSerializer_.stringify({ query, variables, operationName });\n    }\n    if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n        throw new Error(`Cannot create request body with given variable type, array expected`);\n    }\n    // Batch support\n    const payload = query.reduce((acc, currentQuery, index) => {\n        acc.push({ query: currentQuery, variables: variables ? variables[index] : undefined });\n        return acc;\n    }, []);\n    return jsonSerializer_.stringify(payload);\n};\nconst getResult = async (response, jsonSerializer) => {\n    let contentType;\n    response.headers.forEach((value, key) => {\n        if (key.toLowerCase() === `content-type`) {\n            contentType = value;\n        }\n    });\n    if (contentType &&\n        (contentType.toLowerCase().startsWith(`application/json`) ||\n            contentType.toLowerCase().startsWith(`application/graphql+json`) ||\n            contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {\n        return jsonSerializer.parse(await response.text());\n    }\n    else {\n        return response.text();\n    }\n};\nconst callOrIdentity = (value) => {\n    return typeof value === `function` ? value() : value;\n};\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport const gql = (chunks, ...variables) => {\n    return chunks.reduce((acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ``}`, ``);\n};\nexport { GraphQLWebSocketClient } from './graphql-ws.js';\nexport { resolveRequestDocument } from './resolveRequestDocument.js';\nexport { batchRequests, ClientError, GraphQLClient, rawRequest, request, };\nexport default request;\n//# sourceMappingURL=index.js.map","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","// src/configs.ts\nvar ZeroBytes32 = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nvar EmptyRoot = \"0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\nexport {\n  EmptyRoot,\n  ZeroBytes32\n};\n//# sourceMappingURL=configs.mjs.map","// src/configs.ts\nvar CONTRACT_MAX_SIZE = 16 * 1024;\nvar MAX_WITNESSES = 16;\nvar MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;\nvar MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;\nvar MAX_STATIC_CONTRACTS = 255;\nvar MAX_PREDICATE_LENGTH = 1024 * 1024;\nvar MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;\nvar FAILED_REQUIRE_SIGNAL = \"0xffffffffffff0000\";\nvar FAILED_TRANSFER_TO_ADDRESS_SIGNAL = \"0xffffffffffff0001\";\nvar FAILED_ASSERT_EQ_SIGNAL = \"0xffffffffffff0003\";\nvar FAILED_ASSERT_SIGNAL = \"0xffffffffffff0004\";\nvar FAILED_ASSERT_NE_SIGNAL = \"0xffffffffffff0005\";\nvar FAILED_UNKNOWN_SIGNAL = \"0x0\";\nvar PANIC_REASONS = [\n  \"UnknownPanicReason\",\n  \"Revert\",\n  \"OutOfGas\",\n  \"TransactionValidity\",\n  \"MemoryOverflow\",\n  \"ArithmeticOverflow\",\n  \"ContractNotFound\",\n  \"MemoryOwnership\",\n  \"NotEnoughBalance\",\n  \"ExpectedInternalContext\",\n  \"AssetIdNotFound\",\n  \"InputNotFound\",\n  \"OutputNotFound\",\n  \"WitnessNotFound\",\n  \"TransactionMaturity\",\n  \"InvalidMetadataIdentifier\",\n  \"MalformedCallStructure\",\n  \"ReservedRegisterNotWritable\",\n  \"InvalidFlags\",\n  \"InvalidImmediateValue\",\n  \"ExpectedCoinInput\",\n  \"EcalError\",\n  \"MemoryWriteOverlap\",\n  \"ContractNotInInputs\",\n  \"InternalBalanceOverflow\",\n  \"ContractMaxSize\",\n  \"ExpectedUnallocatedStack\",\n  \"MaxStaticContractsReached\",\n  \"TransferAmountCannotBeZero\",\n  \"ExpectedOutputVariable\",\n  \"ExpectedParentInternalContext\",\n  \"PredicateReturnedNonOne\",\n  \"ContractIdAlreadyDeployed\",\n  \"ContractMismatch\",\n  \"MessageDataTooLong\",\n  \"ArithmeticError\",\n  \"ContractInstructionNotAllowed\",\n  \"TransferZeroCoins\",\n  \"InvalidInstruction\",\n  \"MemoryNotExecutable\",\n  \"PolicyIsNotSet\",\n  \"PolicyNotFound\",\n  \"TooManyReceipts\",\n  \"BalanceOverflow\",\n  \"InvalidBlockHeight\",\n  \"TooManySlots\",\n  \"ExpectedNestedCaller\",\n  \"MemoryGrowthOverlap\",\n  \"UninitalizedMemoryAccess\",\n  \"OverridingConsensusParameters\",\n  \"UnknownStateTransactionBytecodeRoot\",\n  \"OverridingStateTransactionBytecode\",\n  \"BytecodeAlreadyUploaded\",\n  \"ThePartIsNotSequentiallyConnected\",\n  \"BlobIdAlreadyUploaded\",\n  \"BlobNotFound\",\n  \"GasCostNotDefined\"\n];\nvar PANIC_DOC_URL = \"https://docs.rs/fuel-asm/latest/fuel_asm/enum.PanicReason.html\";\nexport {\n  CONTRACT_MAX_SIZE,\n  FAILED_ASSERT_EQ_SIGNAL,\n  FAILED_ASSERT_NE_SIGNAL,\n  FAILED_ASSERT_SIGNAL,\n  FAILED_REQUIRE_SIGNAL,\n  FAILED_TRANSFER_TO_ADDRESS_SIGNAL,\n  FAILED_UNKNOWN_SIGNAL,\n  MAX_PREDICATE_DATA_LENGTH,\n  MAX_PREDICATE_LENGTH,\n  MAX_SCRIPT_DATA_LENGTH,\n  MAX_SCRIPT_LENGTH,\n  MAX_STATIC_CONTRACTS,\n  MAX_WITNESSES,\n  PANIC_DOC_URL,\n  PANIC_REASONS\n};\n//# sourceMappingURL=configs.mjs.map","let wasm$1;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm$1.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* Construct a `GM` instruction from its arguments.\n* @param {number} ra\n* @param {GMArgs} args\n* @returns {Instruction}\n*/\nfunction gm_args(ra, args) {\n    const ret = wasm$1.gm_args(ra, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `GM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {GTFArgs} args\n* @returns {Instruction}\n*/\nfunction gtf_args(ra, rb, args) {\n    const ret = wasm$1.gtf_args(ra, rb, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDCM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {CompareArgs} args\n* @returns {Instruction}\n*/\nfunction wdcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQCM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {CompareArgs} args\n* @returns {Instruction}\n*/\nfunction wqcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDOP` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MathArgs} args\n* @returns {Instruction}\n*/\nfunction wdop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQOP` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MathArgs} args\n* @returns {Instruction}\n*/\nfunction wqop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDML` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MulArgs} args\n* @returns {Instruction}\n*/\nfunction wdml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQML` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MulArgs} args\n* @returns {Instruction}\n*/\nfunction wqml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDDV` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {DivArgs} args\n* @returns {Instruction}\n*/\nfunction wddv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wddv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQDV` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {DivArgs} args\n* @returns {Instruction}\n*/\nfunction wqdv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqdv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Adds two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction add(dst, lhs, rhs) {\n    const ret = wasm$1.add(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ANDs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction and(dst, lhs, rhs) {\n    const ret = wasm$1.and(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divides two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction div(dst, lhs, rhs) {\n    const ret = wasm$1.div(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for equality.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction eq(dst, lhs, rhs) {\n    const ret = wasm$1.eq(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Raises one register to the power of another.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction exp(dst, lhs, rhs) {\n    const ret = wasm$1.exp(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for greater-than.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction gt(dst, lhs, rhs) {\n    const ret = wasm$1.gt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for less-than.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction lt(dst, lhs, rhs) {\n    const ret = wasm$1.lt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The integer logarithm of a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mlog(dst, lhs, rhs) {\n    const ret = wasm$1.mlog(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The integer root of a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mroo(dst, lhs, rhs) {\n    const ret = wasm$1.mroo(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Modulo remainder of two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mod_(dst, lhs, rhs) {\n    const ret = wasm$1.mod_(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy from one register to another.\n* @param {number} dst\n* @param {number} src\n* @returns {Instruction}\n*/\nfunction move_(dst, src) {\n    const ret = wasm$1.move_(dst, src);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiplies two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mul(dst, lhs, rhs) {\n    const ret = wasm$1.mul(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise NOT a register.\n* @param {number} dst\n* @param {number} arg\n* @returns {Instruction}\n*/\nfunction not(dst, arg) {\n    const ret = wasm$1.not(dst, arg);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ORs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction or(dst, lhs, rhs) {\n    const ret = wasm$1.or(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Left shifts a register by a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction sll(dst, lhs, rhs) {\n    const ret = wasm$1.sll(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Right shifts a register by a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction srl(dst, lhs, rhs) {\n    const ret = wasm$1.srl(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Subtracts two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction sub(dst, lhs, rhs) {\n    const ret = wasm$1.sub(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise XORs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction xor(dst, lhs, rhs) {\n    const ret = wasm$1.xor(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide with arbitrary precision intermediate step.\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction mldv(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.mldv(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Return from context.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction ret(value) {\n    const ret = wasm$1.ret(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Return from context with data.\n* @param {number} addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction retd(addr, len) {\n    const ret = wasm$1.retd(addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Allocate a number of bytes from the heap.\n* @param {number} bytes\n* @returns {Instruction}\n*/\nfunction aloc(bytes) {\n    const ret = wasm$1.aloc(bytes);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear a variable number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcl(dst_addr, len) {\n    const ret = wasm$1.mcl(dst_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy a variable number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcp(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcp(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare bytes in memory.\n* @param {number} result\n* @param {number} lhs_addr\n* @param {number} rhs_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction meq(result, lhs_addr, rhs_addr, len) {\n    const ret = wasm$1.meq(result, lhs_addr, rhs_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get block header hash for height.\n* @param {number} dst\n* @param {number} heigth\n* @returns {Instruction}\n*/\nfunction bhsh(dst, heigth) {\n    const ret = wasm$1.bhsh(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get current block height.\n* @param {number} dst\n* @returns {Instruction}\n*/\nfunction bhei(dst) {\n    const ret = wasm$1.bhei(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n* @param {number} amount\n* @param {number} sub_id_addr\n* @returns {Instruction}\n*/\nfunction burn(amount, sub_id_addr) {\n    const ret = wasm$1.burn(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Call a contract.\n* @param {number} target_struct\n* @param {number} fwd_coins\n* @param {number} asset_id_addr\n* @param {number} fwd_gas\n* @returns {Instruction}\n*/\nfunction call(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n    const ret = wasm$1.call(target_struct, fwd_coins, asset_id_addr, fwd_gas);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy contract code for a contract.\n* @param {number} dst_addr\n* @param {number} contract_id_addr\n* @param {number} offset\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction ccp(dst_addr, contract_id_addr, offset, len) {\n    const ret = wasm$1.ccp(dst_addr, contract_id_addr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get code root of a contract.\n* @param {number} dst_addr\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction croo(dst_addr, contract_id_addr) {\n    const ret = wasm$1.croo(dst_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get code size of a contract.\n* @param {number} dst\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction csiz(dst, contract_id_addr) {\n    const ret = wasm$1.csiz(dst, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get current block proposer's address.\n* @param {number} dst\n* @returns {Instruction}\n*/\nfunction cb(dst) {\n    const ret = wasm$1.cb(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load code as executable either from contract, blob, or memory.\n* @param {number} src_addr\n* @param {number} offset\n* @param {number} len\n* @param {number} mode\n* @returns {Instruction}\n*/\nfunction ldc(src_addr, offset, len, mode) {\n    const ret = wasm$1.ldc(src_addr, offset, len, mode);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Log an event.\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n* @returns {Instruction}\n*/\nfunction log(a, b, c, d) {\n    const ret = wasm$1.log(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Log data.\n* @param {number} a\n* @param {number} b\n* @param {number} addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction logd(a, b, addr, len) {\n    const ret = wasm$1.logd(a, b, addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n* @param {number} amount\n* @param {number} sub_id_addr\n* @returns {Instruction}\n*/\nfunction mint(amount, sub_id_addr) {\n    const ret = wasm$1.mint(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Halt execution, reverting state changes and returning a value.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction rvrt(value) {\n    const ret = wasm$1.rvrt(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear a series of slots from contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction scwq(key_addr, status, lenq) {\n    const ret = wasm$1.scwq(key_addr, status, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a word from contract storage.\n* @param {number} dst\n* @param {number} status\n* @param {number} key_addr\n* @returns {Instruction}\n*/\nfunction srw(dst, status, key_addr) {\n    const ret = wasm$1.srw(dst, status, key_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a series of 32 byte slots from contract storage.\n* @param {number} dst_addr\n* @param {number} status\n* @param {number} key_addr\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction srwq(dst_addr, status, key_addr, lenq) {\n    const ret = wasm$1.srwq(dst_addr, status, key_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Store a word in contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction sww(key_addr, status, value) {\n    const ret = wasm$1.sww(key_addr, status, value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Store a series of 32 byte slots in contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} src_addr\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction swwq(key_addr, status, src_addr, lenq) {\n    const ret = wasm$1.swwq(key_addr, status, src_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Transfer coins to a contract unconditionally.\n* @param {number} contract_id_addr\n* @param {number} amount\n* @param {number} asset_id_addr\n* @returns {Instruction}\n*/\nfunction tr(contract_id_addr, amount, asset_id_addr) {\n    const ret = wasm$1.tr(contract_id_addr, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Transfer coins to a variable output.\n* @param {number} contract_id_addr\n* @param {number} output_index\n* @param {number} amount\n* @param {number} asset_id_addr\n* @returns {Instruction}\n*/\nfunction tro(contract_id_addr, output_index, amount, asset_id_addr) {\n    const ret = wasm$1.tro(contract_id_addr, output_index, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n* @param {number} dst_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction eck1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.eck1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n* @param {number} dst_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction ecr1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.ecr1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Verify ED25519 public key and signature match a message.\n* @param {number} pub_key_addr\n* @param {number} sig_addr\n* @param {number} msg_addr\n* @param {number} msg_len\n* @returns {Instruction}\n*/\nfunction ed19(pub_key_addr, sig_addr, msg_addr, msg_len) {\n    const ret = wasm$1.ed19(pub_key_addr, sig_addr, msg_addr, msg_len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The keccak-256 hash of a slice.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction k256(dst_addr, src_addr, len) {\n    const ret = wasm$1.k256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The SHA-2-256 hash of a slice.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction s256(dst_addr, src_addr, len) {\n    const ret = wasm$1.s256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get timestamp of block at given height.\n* @param {number} dst\n* @param {number} heigth\n* @returns {Instruction}\n*/\nfunction time(dst, heigth) {\n    const ret = wasm$1.time(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Performs no operation.\n* @returns {Instruction}\n*/\nfunction noop() {\n    const ret = wasm$1.noop();\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Set flag register to a register.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction flag(value) {\n    const ret = wasm$1.flag(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get the balance of contract of an asset ID.\n* @param {number} dst\n* @param {number} asset_id_addr\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction bal(dst, asset_id_addr, contract_id_addr) {\n    const ret = wasm$1.bal(dst, asset_id_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic jump.\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jmp(abs_target) {\n    const ret = wasm$1.jmp(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional dynamic jump.\n* @param {number} abs_target\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction jne(abs_target, lhs, rhs) {\n    const ret = wasm$1.jne(abs_target, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Send a message to recipient address with call abi, coins, and output.\n* @param {number} recipient_addr\n* @param {number} data_addr\n* @param {number} data_len\n* @param {number} coins\n* @returns {Instruction}\n*/\nfunction smo(recipient_addr, data_addr, data_len, coins) {\n    const ret = wasm$1.smo(recipient_addr, data_addr, data_len, coins);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Adds a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction addi(dst, lhs, rhs) {\n    const ret = wasm$1.addi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ANDs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction andi(dst, lhs, rhs) {\n    const ret = wasm$1.andi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divides a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction divi(dst, lhs, rhs) {\n    const ret = wasm$1.divi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Raises one register to the power of an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction expi(dst, lhs, rhs) {\n    const ret = wasm$1.expi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Modulo remainder of a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction modi(dst, lhs, rhs) {\n    const ret = wasm$1.modi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiplies a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction muli(dst, lhs, rhs) {\n    const ret = wasm$1.muli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ORs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction ori(dst, lhs, rhs) {\n    const ret = wasm$1.ori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Left shifts a register by an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction slli(dst, lhs, rhs) {\n    const ret = wasm$1.slli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Right shifts a register by an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction srli(dst, lhs, rhs) {\n    const ret = wasm$1.srli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Subtracts a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction subi(dst, lhs, rhs) {\n    const ret = wasm$1.subi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise XORs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction xori(dst, lhs, rhs) {\n    const ret = wasm$1.xori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional jump.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jnei(cond_lhs, cond_rhs, abs_target) {\n    const ret = wasm$1.jnei(cond_lhs, cond_rhs, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*A byte is loaded from the specified address offset by an immediate value.\n* @param {number} dst\n* @param {number} addr\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction lb(dst, addr, offset) {\n    const ret = wasm$1.lb(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*A word is loaded from the specified address offset by an immediate value.\n* @param {number} dst\n* @param {number} addr\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction lw(dst, addr, offset) {\n    const ret = wasm$1.lw(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Write the least significant byte of a register to memory.\n* @param {number} addr\n* @param {number} value\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction sb(addr, value, offset) {\n    const ret = wasm$1.sb(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Write a register to memory.\n* @param {number} addr\n* @param {number} value\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction sw(addr, value, offset) {\n    const ret = wasm$1.sw(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy an immediate number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcpi(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcpi(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get transaction fields.\n* @param {number} dst\n* @param {number} arg\n* @param {number} selector\n* @returns {Instruction}\n*/\nfunction gtf(dst, arg, selector) {\n    const ret = wasm$1.gtf(dst, arg, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear an immediate number of bytes in memory.\n* @param {number} addr\n* @param {number} count\n* @returns {Instruction}\n*/\nfunction mcli(addr, count) {\n    const ret = wasm$1.mcli(addr, count);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get metadata from memory.\n* @param {number} dst\n* @param {number} selector\n* @returns {Instruction}\n*/\nfunction gm(dst, selector) {\n    const ret = wasm$1.gm(dst, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy immediate value into a register\n* @param {number} dst\n* @param {number} val\n* @returns {Instruction}\n*/\nfunction movi(dst, val) {\n    const ret = wasm$1.movi(dst, val);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional jump against zero.\n* @param {number} cond_nz\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jnzi(cond_nz, abs_target) {\n    const ret = wasm$1.jnzi(cond_nz, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Unconditional dynamic relative jump forwards, with a constant offset.\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jmpf(dynamic, fixed) {\n    const ret = wasm$1.jmpf(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Unconditional dynamic relative jump backwards, with a constant offset.\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jmpb(dynamic, fixed) {\n    const ret = wasm$1.jmpb(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump forwards, conditional against zero, with a constant offset.\n* @param {number} cond_nz\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnzf(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzf(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump backwards, conditional against zero, with a constant offset.\n* @param {number} cond_nz\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnzb(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzb(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnef(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jnef(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jneb(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jneb(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Jump.\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction ji(abs_target) {\n    const ret = wasm$1.ji(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Extend the current call frame's stack by an immediate value.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfei(amount) {\n    const ret = wasm$1.cfei(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Shrink the current call frame's stack by an immediate value.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfsi(amount) {\n    const ret = wasm$1.cfsi(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Extend the current call frame's stack\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfe(amount) {\n    const ret = wasm$1.cfe(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Shrink the current call frame's stack\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfs(amount) {\n    const ret = wasm$1.cfs(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Push a bitmask-selected set of registers in range 16..40 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction pshl(bitmask) {\n    const ret = wasm$1.pshl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Push a bitmask-selected set of registers in range 40..64 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction pshh(bitmask) {\n    const ret = wasm$1.pshh(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Pop a bitmask-selected set of registers in range 16..40 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction popl(bitmask) {\n    const ret = wasm$1.popl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Pop a bitmask-selected set of registers in range 40..64 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction poph(bitmask) {\n    const ret = wasm$1.poph(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare 128bit integers\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare 256bit integers\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Simple 128bit operations\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Simple 256bit operations\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiply 128bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiply 256bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divide 128bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wddv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wddv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divide 256bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqdv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqdv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide 128bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction wdmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wdmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide 256bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction wqmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wqmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*AddMod 128bit\n* @param {number} dst\n* @param {number} add_lhs\n* @param {number} add_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wdam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wdam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*AddMod 256bit\n* @param {number} dst\n* @param {number} add_lhs\n* @param {number} add_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wqam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wqam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*MulMod 128bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wdmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wdmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*MulMod 256bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wqmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wqmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Call external function\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n* @returns {Instruction}\n*/\nfunction ecal(a, b, c, d) {\n    const ret = wasm$1.ecal(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get blob size\n* @param {number} dst\n* @param {number} blob_id_ptr\n* @returns {Instruction}\n*/\nfunction bsiz(dst, blob_id_ptr) {\n    const ret = wasm$1.bsiz(dst, blob_id_ptr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load blob as data\n* @param {number} dst_ptr\n* @param {number} blob_id_ptr\n* @param {number} offset\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction bldd(dst_ptr, blob_id_ptr, offset, len) {\n    const ret = wasm$1.bldd(dst_ptr, blob_id_ptr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm$1.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm$1.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*r\" Argument list for GTF (get tx fields) instruction\n*r\" The VM is the only who should match this struct, and it *MUST* always perform\n*r\" exhaustive match so all offered variants are covered.\n*/\nconst GTFArgs = Object.freeze({\n/**\n*r\" Set `$rA` to `tx.type`\n*/\nType:1,\"1\":\"Type\",\n/**\n*r\" Set `$rA` to `tx.scriptGasLimit`\n*/\nScriptGasLimit:2,\"2\":\"ScriptGasLimit\",\n/**\n*r\" Set `$rA` to `tx.scriptLength`\n*/\nScriptLength:3,\"3\":\"ScriptLength\",\n/**\n*r\" Set `$rA` to `tx.scriptDataLength`\n*/\nScriptDataLength:4,\"4\":\"ScriptDataLength\",\n/**\n*r\" Set `$rA` to `tx.inputsCount`\n*/\nScriptInputsCount:5,\"5\":\"ScriptInputsCount\",\n/**\n*r\" Set `$rA` to `tx.outputsCount`\n*/\nScriptOutputsCount:6,\"6\":\"ScriptOutputsCount\",\n/**\n*r\" Set `$rA` to `tx.witnessesCount`\n*/\nScriptWitnessesCount:7,\"7\":\"ScriptWitnessesCount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.script`\n*/\nScript:9,\"9\":\"Script\",\n/**\n*r\" Set `$rA` to `Memory address of tx.scriptData`\n*/\nScriptData:10,\"10\":\"ScriptData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n*/\nScriptInputAtIndex:11,\"11\":\"ScriptInputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n*/\nScriptOutputAtIndex:12,\"12\":\"ScriptOutputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n*/\nScriptWitnessAtIndex:13,\"13\":\"ScriptWitnessAtIndex\",\n/**\n*r\" Set `$rA` to size of the transaction in memory, in bytes\n*/\nTxLength:14,\"14\":\"TxLength\",\n/**\n*r\" Set `$rA` to `tx.bytecodeWitnessIndex`\n*/\nCreateBytecodeWitnessIndex:257,\"257\":\"CreateBytecodeWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.storageSlotsCount`\n*/\nCreateStorageSlotsCount:258,\"258\":\"CreateStorageSlotsCount\",\n/**\n*r\" Set `$rA` to `tx.inputsCount`\n*/\nCreateInputsCount:259,\"259\":\"CreateInputsCount\",\n/**\n*r\" Set `$rA` to `tx.outputsCount`\n*/\nCreateOutputsCount:260,\"260\":\"CreateOutputsCount\",\n/**\n*r\" Set `$rA` to `tx.witnessesCount`\n*/\nCreateWitnessesCount:261,\"261\":\"CreateWitnessesCount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.salt`\n*/\nCreateSalt:262,\"262\":\"CreateSalt\",\n/**\n*r\" Set `$rA` to `Memory address of tx.storageSlots[$rB]`\n*/\nCreateStorageSlotAtIndex:263,\"263\":\"CreateStorageSlotAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n*/\nCreateInputAtIndex:264,\"264\":\"CreateInputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n*/\nCreateOutputAtIndex:265,\"265\":\"CreateOutputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n*/\nCreateWitnessAtIndex:266,\"266\":\"CreateWitnessAtIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].type`\n*/\nInputType:512,\"512\":\"InputType\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n*/\nInputCoinTxId:513,\"513\":\"InputCoinTxId\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n*/\nInputCoinOutputIndex:514,\"514\":\"InputCoinOutputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].owner`\n*/\nInputCoinOwner:515,\"515\":\"InputCoinOwner\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].amount`\n*/\nInputCoinAmount:516,\"516\":\"InputCoinAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].asset_id`\n*/\nInputCoinAssetId:517,\"517\":\"InputCoinAssetId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`\n*/\nInputCoinTxPointer:518,\"518\":\"InputCoinTxPointer\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n*/\nInputCoinWitnessIndex:519,\"519\":\"InputCoinWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n*/\nInputCoinPredicateLength:521,\"521\":\"InputCoinPredicateLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n*/\nInputCoinPredicateDataLength:522,\"522\":\"InputCoinPredicateDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n*/\nInputCoinPredicate:523,\"523\":\"InputCoinPredicate\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n*/\nInputCoinPredicateData:524,\"524\":\"InputCoinPredicateData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n*/\nInputCoinPredicateGasUsed:525,\"525\":\"InputCoinPredicateGasUsed\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n*/\nInputContractTxId:544,\"544\":\"InputContractTxId\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n*/\nInputContractOutputIndex:545,\"545\":\"InputContractOutputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].contractID`\n*/\nInputContractId:549,\"549\":\"InputContractId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].sender`\n*/\nInputMessageSender:576,\"576\":\"InputMessageSender\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].recipient`\n*/\nInputMessageRecipient:577,\"577\":\"InputMessageRecipient\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].amount`\n*/\nInputMessageAmount:578,\"578\":\"InputMessageAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].nonce`\n*/\nInputMessageNonce:579,\"579\":\"InputMessageNonce\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n*/\nInputMessageWitnessIndex:580,\"580\":\"InputMessageWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].dataLength`\n*/\nInputMessageDataLength:581,\"581\":\"InputMessageDataLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n*/\nInputMessagePredicateLength:582,\"582\":\"InputMessagePredicateLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n*/\nInputMessagePredicateDataLength:583,\"583\":\"InputMessagePredicateDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].data`\n*/\nInputMessageData:584,\"584\":\"InputMessageData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n*/\nInputMessagePredicate:585,\"585\":\"InputMessagePredicate\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n*/\nInputMessagePredicateData:586,\"586\":\"InputMessagePredicateData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n*/\nInputMessagePredicateGasUsed:587,\"587\":\"InputMessagePredicateGasUsed\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].type`\n*/\nOutputType:768,\"768\":\"OutputType\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].to`\n*/\nOutputCoinTo:769,\"769\":\"OutputCoinTo\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].amount`\n*/\nOutputCoinAmount:770,\"770\":\"OutputCoinAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].asset_id`\n*/\nOutputCoinAssetId:771,\"771\":\"OutputCoinAssetId\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].inputIndex`\n*/\nOutputContractInputIndex:772,\"772\":\"OutputContractInputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].contractID`\n*/\nOutputContractCreatedContractId:775,\"775\":\"OutputContractCreatedContractId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`\n*/\nOutputContractCreatedStateRoot:776,\"776\":\"OutputContractCreatedStateRoot\",\n/**\n*r\" Set `$rA` to `tx.witnesses[$rB].dataLength`\n*/\nWitnessDataLength:1024,\"1024\":\"WitnessDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB].data`\n*/\nWitnessData:1025,\"1025\":\"WitnessData\",\n/**\n*r\" Set `$rA` to `tx.policyTypes`\n*/\nPolicyTypes:1280,\"1280\":\"PolicyTypes\",\n/**\n*r\" Set `$rA` to `tx.policies[0x00].gasPrice`\n*/\nPolicyTip:1281,\"1281\":\"PolicyTip\",\n/**\n*r\" Set `$rA` to `tx.policies[count_ones(0b11 & tx.policyTypes) - 1].witnessLimit`\n*/\nPolicyWitnessLimit:1282,\"1282\":\"PolicyWitnessLimit\",\n/**\n*r\" Set `$rA` to `tx.policies[count_ones(0b111 & tx.policyTypes) - 1].maturity`\n*/\nPolicyMaturity:1283,\"1283\":\"PolicyMaturity\",\n/**\n*r\" Set `$rA` to `tx.policies[count_ones(0b1111 & tx.policyTypes) - 1].maxFee`\n*/\nPolicyMaxFee:1284,\"1284\":\"PolicyMaxFee\", });\n/**\n* Comparison mode used by WDCM and WQCM instructions.\n*/\nconst CompareMode = Object.freeze({\n/**\n* Equality (`==`)\n*/\nEQ:0,\"0\":\"EQ\",\n/**\n* Inequality (`!=`)\n*/\nNE:1,\"1\":\"NE\",\n/**\n* Less than (`<`)\n*/\nLT:2,\"2\":\"LT\",\n/**\n* Greater than (`>`)\n*/\nGT:3,\"3\":\"GT\",\n/**\n* Less than or equals (`>=`)\n*/\nLTE:4,\"4\":\"LTE\",\n/**\n* Greater than or equals (`>=`)\n*/\nGTE:5,\"5\":\"GTE\",\n/**\n* Number of leading zeroes in lhs (`lzcnt`) (discards rhs)\n*/\nLZC:6,\"6\":\"LZC\", });\n/**\n*r\" Panic reason representation for the interpreter.\n*/\nconst PanicReason = Object.freeze({\n/**\n*r\" The byte can't be mapped to any known `PanicReason`.\n*/\nUnknownPanicReason:0,\"0\":\"UnknownPanicReason\",\n/**\n*r\" Found `RVRT` instruction.\n*/\nRevert:1,\"1\":\"Revert\",\n/**\n*r\" Execution ran out of gas.\n*/\nOutOfGas:2,\"2\":\"OutOfGas\",\n/**\n*r\" The transaction validity is violated.\n*/\nTransactionValidity:3,\"3\":\"TransactionValidity\",\n/**\n*r\" Attempt to write outside interpreter memory boundaries.\n*/\nMemoryOverflow:4,\"4\":\"MemoryOverflow\",\n/**\n*r\" Overflow while executing arithmetic operation.\n*r\" These errors are ignored using the WRAPPING flag.\n*/\nArithmeticOverflow:5,\"5\":\"ArithmeticOverflow\",\n/**\n*r\" Designed contract was not found in the storage.\n*/\nContractNotFound:6,\"6\":\"ContractNotFound\",\n/**\n*r\" Memory ownership rules are violated.\n*/\nMemoryOwnership:7,\"7\":\"MemoryOwnership\",\n/**\n*r\" The asset ID balance isn't enough for the instruction.\n*/\nNotEnoughBalance:8,\"8\":\"NotEnoughBalance\",\n/**\n*r\" The interpreter is expected to be in internal context.\n*/\nExpectedInternalContext:9,\"9\":\"ExpectedInternalContext\",\n/**\n*r\" The queried asset ID was not found in the state.\n*/\nAssetIdNotFound:10,\"10\":\"AssetIdNotFound\",\n/**\n*r\" The provided input is not found in the transaction.\n*/\nInputNotFound:11,\"11\":\"InputNotFound\",\n/**\n*r\" The provided output is not found in the transaction.\n*/\nOutputNotFound:12,\"12\":\"OutputNotFound\",\n/**\n*r\" The provided witness is not found in the transaction.\n*/\nWitnessNotFound:13,\"13\":\"WitnessNotFound\",\n/**\n*r\" The transaction maturity is not valid for this request.\n*/\nTransactionMaturity:14,\"14\":\"TransactionMaturity\",\n/**\n*r\" The metadata identifier is invalid.\n*/\nInvalidMetadataIdentifier:15,\"15\":\"InvalidMetadataIdentifier\",\n/**\n*r\" The call structure is not valid.\n*/\nMalformedCallStructure:16,\"16\":\"MalformedCallStructure\",\n/**\n*r\" The provided register does not allow write operations.\n*/\nReservedRegisterNotWritable:17,\"17\":\"ReservedRegisterNotWritable\",\n/**\n*r\" The execution resulted in an erroneous state of the interpreter.\n*/\nInvalidFlags:18,\"18\":\"InvalidFlags\",\n/**\n*r\" The provided immediate value is not valid for this instruction.\n*/\nInvalidImmediateValue:19,\"19\":\"InvalidImmediateValue\",\n/**\n*r\" The provided transaction input is not of type `Coin`.\n*/\nExpectedCoinInput:20,\"20\":\"ExpectedCoinInput\",\n/**\n*r\" `ECAL` instruction failed.\n*/\nEcalError:21,\"21\":\"EcalError\",\n/**\n*r\" Two segments of the interpreter memory should not intersect for write operations.\n*/\nMemoryWriteOverlap:22,\"22\":\"MemoryWriteOverlap\",\n/**\n*r\" The requested contract is not listed in the transaction inputs.\n*/\nContractNotInInputs:23,\"23\":\"ContractNotInInputs\",\n/**\n*r\" The internal asset ID balance overflowed with the provided instruction.\n*/\nInternalBalanceOverflow:24,\"24\":\"InternalBalanceOverflow\",\n/**\n*r\" The maximum allowed contract size is violated.\n*/\nContractMaxSize:25,\"25\":\"ContractMaxSize\",\n/**\n*r\" This instruction expects the stack area to be unallocated for this call.\n*/\nExpectedUnallocatedStack:26,\"26\":\"ExpectedUnallocatedStack\",\n/**\n*r\" The maximum allowed number of static contracts was reached for this transaction.\n*/\nMaxStaticContractsReached:27,\"27\":\"MaxStaticContractsReached\",\n/**\n*r\" The requested transfer amount cannot be zero.\n*/\nTransferAmountCannotBeZero:28,\"28\":\"TransferAmountCannotBeZero\",\n/**\n*r\" The provided transaction output should be of type `Variable`.\n*/\nExpectedOutputVariable:29,\"29\":\"ExpectedOutputVariable\",\n/**\n*r\" The expected context of the stack parent is internal.\n*/\nExpectedParentInternalContext:30,\"30\":\"ExpectedParentInternalContext\",\n/**\n*r\" The predicate returned non `1`. The `1` means successful verification\n*r\" of the predicate, all other values means unsuccessful.\n*/\nPredicateReturnedNonOne:31,\"31\":\"PredicateReturnedNonOne\",\n/**\n*r\" The contract ID is already deployed and can't be overwritten.\n*/\nContractIdAlreadyDeployed:32,\"32\":\"ContractIdAlreadyDeployed\",\n/**\n*r\" The loaded contract mismatch expectations.\n*/\nContractMismatch:33,\"33\":\"ContractMismatch\",\n/**\n*r\" Attempting to send message data longer than `MAX_MESSAGE_DATA_LENGTH`\n*/\nMessageDataTooLong:34,\"34\":\"MessageDataTooLong\",\n/**\n*r\" Mathematically invalid arguments where given to an arithmetic instruction.\n*r\" For instance, division by zero produces this.\n*r\" These errors are ignored using the UNSAFEMATH flag.\n*/\nArithmeticError:35,\"35\":\"ArithmeticError\",\n/**\n*r\" The contract instruction is not allowed in predicates.\n*/\nContractInstructionNotAllowed:36,\"36\":\"ContractInstructionNotAllowed\",\n/**\n*r\" Transfer of zero coins is not allowed.\n*/\nTransferZeroCoins:37,\"37\":\"TransferZeroCoins\",\n/**\n*r\" Attempted to execute an invalid instruction\n*/\nInvalidInstruction:38,\"38\":\"InvalidInstruction\",\n/**\n*r\" Memory outside $is..$ssp range is not executable\n*/\nMemoryNotExecutable:39,\"39\":\"MemoryNotExecutable\",\n/**\n*r\" The policy is not set.\n*/\nPolicyIsNotSet:40,\"40\":\"PolicyIsNotSet\",\n/**\n*r\" The policy is not found across policies.\n*/\nPolicyNotFound:41,\"41\":\"PolicyNotFound\",\n/**\n*r\" Receipt context is full\n*/\nTooManyReceipts:42,\"42\":\"TooManyReceipts\",\n/**\n*r\" Balance of a contract overflowed\n*/\nBalanceOverflow:43,\"43\":\"BalanceOverflow\",\n/**\n*r\" Block height value is invalid, typically because it is too large\n*/\nInvalidBlockHeight:44,\"44\":\"InvalidBlockHeight\",\n/**\n*r\" Attempt to use sequential memory instructions with too large slot count,\n*r\" typically because it cannot fit into usize\n*/\nTooManySlots:45,\"45\":\"TooManySlots\",\n/**\n*r\" Caller of this internal context is also expected to be internal,\n*r\" i.e. $fp->$fp must be non-zero.\n*/\nExpectedNestedCaller:46,\"46\":\"ExpectedNestedCaller\",\n/**\n*r\" During memory growth, the stack overlapped with the heap\n*/\nMemoryGrowthOverlap:47,\"47\":\"MemoryGrowthOverlap\",\n/**\n*r\" Attempting to read or write uninitialized memory.\n*r\" Also occurs when boundary crosses from stack to heap.\n*/\nUninitalizedMemoryAccess:48,\"48\":\"UninitalizedMemoryAccess\",\n/**\n*r\" Overriding consensus parameters is not allowed.\n*/\nOverridingConsensusParameters:49,\"49\":\"OverridingConsensusParameters\",\n/**\n*r\" The storage doesn't know about the hash of the state transition bytecode.\n*/\nUnknownStateTransactionBytecodeRoot:50,\"50\":\"UnknownStateTransactionBytecodeRoot\",\n/**\n*r\" Overriding the state transition bytecode is not allowed.\n*/\nOverridingStateTransactionBytecode:51,\"51\":\"OverridingStateTransactionBytecode\",\n/**\n*r\" The bytecode is already uploaded and cannot be uploaded again.\n*/\nBytecodeAlreadyUploaded:52,\"52\":\"BytecodeAlreadyUploaded\",\n/**\n*r\" The part of the bytecode is not sequentially connected to the previous parts.\n*/\nThePartIsNotSequentiallyConnected:53,\"53\":\"ThePartIsNotSequentiallyConnected\",\n/**\n*r\" The requested blob is not found.\n*/\nBlobNotFound:54,\"54\":\"BlobNotFound\",\n/**\n*r\" The blob was already\n*/\nBlobIdAlreadyUploaded:55,\"55\":\"BlobIdAlreadyUploaded\",\n/**\n*r\" Active gas costs do not define the cost for this instruction.\n*/\nGasCostNotDefined:56,\"56\":\"GasCostNotDefined\", });\n/**\n* The operation performed by WDOP and WQOP instructions, determined as\n*/\nconst MathOp = Object.freeze({\n/**\n* Add\n*/\nADD:0,\"0\":\"ADD\",\n/**\n* Subtract\n*/\nSUB:1,\"1\":\"SUB\",\n/**\n* Invert bits (discards rhs)\n*/\nNOT:2,\"2\":\"NOT\",\n/**\n* Bitwise or\n*/\nOR:3,\"3\":\"OR\",\n/**\n* Bitwise exclusive or\n*/\nXOR:4,\"4\":\"XOR\",\n/**\n* Bitwise and\n*/\nAND:5,\"5\":\"AND\",\n/**\n* Shift left\n*/\nSHL:6,\"6\":\"SHL\",\n/**\n* Shift right\n*/\nSHR:7,\"7\":\"SHR\", });\n/**\n*r\" Argument list for GM (get metadata) instruction\n*r\" The VM is the only who should match this struct, and it *MUST* always perform\n*r\" exhaustive match so all offered variants are covered.\n*/\nconst GMArgs = Object.freeze({\n/**\n*r\" Get if caller is external.\n*/\nIsCallerExternal:1,\"1\":\"IsCallerExternal\",\n/**\n*r\" Get caller's contract ID.\n*/\nGetCaller:2,\"2\":\"GetCaller\",\n/**\n*r\" Get index of current predicate.\n*/\nGetVerifyingPredicate:3,\"3\":\"GetVerifyingPredicate\",\n/**\n*r\" Get the Chain ID this VM is operating within\n*/\nGetChainId:4,\"4\":\"GetChainId\",\n/**\n*r\" Get memory address where the transaction is located\n*/\nTxStart:5,\"5\":\"TxStart\",\n/**\n*r\" Get memory address of base asset ID\n*/\nBaseAssetId:6,\"6\":\"BaseAssetId\", });\n\nconst ADDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_add_free(ptr >>> 0, 1));\n/**\n*Adds two registers.\n*/\nclass ADD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ADDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_add_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ADDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ADDIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_addi_free(ptr >>> 0, 1));\n/**\n*Adds a register and an immediate value.\n*/\nclass ADDI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ADDIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_addi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ADDIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst ALOCFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_aloc_free(ptr >>> 0, 1));\n/**\n*Allocate a number of bytes from the heap.\n*/\nclass ALOC {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ALOCFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_aloc_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} bytes\n    */\n    constructor(bytes) {\n        _assertClass(bytes, RegId);\n        var ptr0 = bytes.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        ALOCFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ANDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_and_free(ptr >>> 0, 1));\n/**\n*Bitwise ANDs two registers.\n*/\nclass AND {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ANDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_and_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ANDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ANDIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_andi_free(ptr >>> 0, 1));\n/**\n*Bitwise ANDs a register and an immediate value.\n*/\nclass ANDI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ANDIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_andi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ANDIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst BALFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bal_free(ptr >>> 0, 1));\n/**\n*Get the balance of contract of an asset ID.\n*/\nclass BAL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BALFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bal_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} asset_id_addr\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst, asset_id_addr, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr1 = asset_id_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr2 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        BALFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BHEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bhei_free(ptr >>> 0, 1));\n/**\n*Get current block height.\n*/\nclass BHEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BHEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhei_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        BHEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BHSHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bhsh_free(ptr >>> 0, 1));\n/**\n*Get block header hash for height.\n*/\nclass BHSH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BHSHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhsh_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} heigth\n    */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BHSHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BLDDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bldd_free(ptr >>> 0, 1));\n/**\n*Load blob as data\n*/\nclass BLDD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BLDDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bldd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_ptr\n    * @param {RegId} blob_id_ptr\n    * @param {RegId} offset\n    * @param {RegId} len\n    */\n    constructor(dst_ptr, blob_id_ptr, offset, len) {\n        _assertClass(dst_ptr, RegId);\n        var ptr0 = dst_ptr.__destroy_into_raw();\n        _assertClass(blob_id_ptr, RegId);\n        var ptr1 = blob_id_ptr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        BLDDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BSIZFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bsiz_free(ptr >>> 0, 1));\n/**\n*Get blob size\n*/\nclass BSIZ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BSIZFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bsiz_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} blob_id_ptr\n    */\n    constructor(dst, blob_id_ptr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(blob_id_ptr, RegId);\n        var ptr1 = blob_id_ptr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BSIZFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BURNFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_burn_free(ptr >>> 0, 1));\n/**\n*Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n*/\nclass BURN {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BURNFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_burn_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    * @param {RegId} sub_id_addr\n    */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BURNFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CALLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_call_free(ptr >>> 0, 1));\n/**\n*Call a contract.\n*/\nclass CALL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CALLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_call_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} target_struct\n    * @param {RegId} fwd_coins\n    * @param {RegId} asset_id_addr\n    * @param {RegId} fwd_gas\n    */\n    constructor(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n        _assertClass(target_struct, RegId);\n        var ptr0 = target_struct.__destroy_into_raw();\n        _assertClass(fwd_coins, RegId);\n        var ptr1 = fwd_coins.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        _assertClass(fwd_gas, RegId);\n        var ptr3 = fwd_gas.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        CALLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cb_free(ptr >>> 0, 1));\n/**\n*Get current block proposer's address.\n*/\nclass CB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CCPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ccp_free(ptr >>> 0, 1));\n/**\n*Copy contract code for a contract.\n*/\nclass CCP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CCPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ccp_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} contract_id_addr\n    * @param {RegId} offset\n    * @param {RegId} len\n    */\n    constructor(dst_addr, contract_id_addr, offset, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        CCPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfe_free(ptr >>> 0, 1));\n/**\n*Extend the current call frame's stack\n*/\nclass CFE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfe_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfei_free(ptr >>> 0, 1));\n/**\n*Extend the current call frame's stack by an immediate value.\n*/\nclass CFEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfei_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst CFSFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfs_free(ptr >>> 0, 1));\n/**\n*Shrink the current call frame's stack\n*/\nclass CFS {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFSFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfs_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFSFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFSIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfsi_free(ptr >>> 0, 1));\n/**\n*Shrink the current call frame's stack by an immediate value.\n*/\nclass CFSI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFSIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfsi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFSIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst CROOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_croo_free(ptr >>> 0, 1));\n/**\n*Get code root of a contract.\n*/\nclass CROO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CROOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_croo_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst_addr, contract_id_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        CROOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CSIZFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_csiz_free(ptr >>> 0, 1));\n/**\n*Get code size of a contract.\n*/\nclass CSIZ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CSIZFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_csiz_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        CSIZFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CompareArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_compareargs_free(ptr >>> 0, 1));\n/**\n* Arguments for WDCM and WQCM instructions.\n*/\nclass CompareArgs {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CompareArgs.prototype);\n        obj.__wbg_ptr = ptr;\n        CompareArgsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CompareArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_compareargs_free(ptr, 0);\n    }\n    /**\n    * Comparison mode\n    * @returns {CompareMode}\n    */\n    get mode() {\n        const ret = wasm$1.__wbg_get_compareargs_mode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Comparison mode\n    * @param {CompareMode} arg0\n    */\n    set mode(arg0) {\n        wasm$1.__wbg_set_compareargs_mode(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Convert to immediate value.\n    * @returns {Imm06}\n    */\n    to_imm() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.compareargs_to_imm(ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct from `Imm06`. Returns `None` if the value has reserved flags set.\n    * @param {Imm06} bits\n    * @returns {CompareArgs | undefined}\n    */\n    static from_imm(bits) {\n        _assertClass(bits, Imm06);\n        var ptr0 = bits.__destroy_into_raw();\n        const ret = wasm$1.compareargs_from_imm(ptr0);\n        return ret === 0 ? undefined : CompareArgs.__wrap(ret);\n    }\n}\n\nconst DIVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_div_free(ptr >>> 0, 1));\n/**\n*Divides two registers.\n*/\nclass DIV {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DIVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_div_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        DIVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst DIVIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_divi_free(ptr >>> 0, 1));\n/**\n*Divides a register and an immediate value.\n*/\nclass DIVI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DIVIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        DIVIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst DivArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_divargs_free(ptr >>> 0, 1));\n/**\n* Additional arguments for WMDV and WDDV instructions.\n*/\nclass DivArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DivArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divargs_free(ptr, 0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst ECALFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecal_free(ptr >>> 0, 1));\n/**\n*Call external function\n*/\nclass ECAL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECALFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecal_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} c\n    * @param {RegId} d\n    */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ECALFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECK1Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_eck1_free(ptr >>> 0, 1));\n/**\n*The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n*/\nclass ECK1 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECK1Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eck1_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ECK1Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECR1Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecr1_free(ptr >>> 0, 1));\n/**\n*The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n*/\nclass ECR1 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECR1Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecr1_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ECR1Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ED19Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ed19_free(ptr >>> 0, 1));\n/**\n*Verify ED25519 public key and signature match a message.\n*/\nclass ED19 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ED19Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ed19_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} pub_key_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_addr\n    * @param {RegId} msg_len\n    */\n    constructor(pub_key_addr, sig_addr, msg_addr, msg_len) {\n        _assertClass(pub_key_addr, RegId);\n        var ptr0 = pub_key_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_addr, RegId);\n        var ptr2 = msg_addr.__destroy_into_raw();\n        _assertClass(msg_len, RegId);\n        var ptr3 = msg_len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ED19Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_eq_free(ptr >>> 0, 1));\n/**\n*Compares two registers for equality.\n*/\nclass EQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EXPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_exp_free(ptr >>> 0, 1));\n/**\n*Raises one register to the power of another.\n*/\nclass EXP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EXPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_exp_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EXPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EXPIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_expi_free(ptr >>> 0, 1));\n/**\n*Raises one register to the power of an immediate value.\n*/\nclass EXPI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EXPIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_expi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EXPIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst FLAGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_flag_free(ptr >>> 0, 1));\n/**\n*Set flag register to a register.\n*/\nclass FLAG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FLAGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_flag_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        FLAGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst GMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gm_free(ptr >>> 0, 1));\n/**\n*Get metadata from memory.\n*/\nclass GM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GM.prototype);\n        obj.__wbg_ptr = ptr;\n        GMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gm_free(ptr, 0);\n    }\n    /**\n    * Construct a `GM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {GMArgs} args\n    * @returns {GM}\n    */\n    static from_args(ra, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        const ret = wasm$1.gm_from_args(ptr0, args);\n        return GM.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {Imm18} selector\n    */\n    constructor(dst, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(selector, Imm18);\n        var ptr1 = selector.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        GMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst GTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gt_free(ptr >>> 0, 1));\n/**\n*Compares two registers for greater-than.\n*/\nclass GT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gt_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        GTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst GTFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gtf_free(ptr >>> 0, 1));\n/**\n*Get transaction fields.\n*/\nclass GTF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GTF.prototype);\n        obj.__wbg_ptr = ptr;\n        GTFFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GTFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gtf_free(ptr, 0);\n    }\n    /**\n    * Construct a `GTF` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {GTFArgs} args\n    * @returns {GTF}\n    */\n    static from_args(ra, rb, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        const ret = wasm$1.gtf_from_args(ptr0, ptr1, args);\n        return GTF.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} arg\n    * @param {Imm12} selector\n    */\n    constructor(dst, arg, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        _assertClass(selector, Imm12);\n        var ptr2 = selector.__destroy_into_raw();\n        const ret = wasm$1.gtf_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        GTFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst Imm06Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm06_free(ptr >>> 0, 1));\n/**\n* Represents a 6-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm06 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm06.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm06Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm06Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm06_free(ptr, 0);\n    }\n}\n\nconst Imm12Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm12_free(ptr >>> 0, 1));\n/**\n* Represents a 12-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm12 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm12.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm12Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm12Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm12_free(ptr, 0);\n    }\n}\n\nconst Imm18Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm18_free(ptr >>> 0, 1));\n/**\n* Represents a 18-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm18 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm18.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm18Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm18Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm18_free(ptr, 0);\n    }\n}\n\nconst Imm24Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm24_free(ptr >>> 0, 1));\n/**\n* Represents a 24-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm24 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm24.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm24Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm24Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm24_free(ptr, 0);\n    }\n}\n\nconst InstructionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_instruction_free(ptr >>> 0, 1));\n/**\n* Representation of a single instruction for the interpreter.\n*\n* The opcode is represented in the tag (variant), or may be retrieved in the\n* form of an `Opcode` byte using the `opcode` method.\n*\n* The register and immediate data associated with the instruction is represented\n* within an inner unit type wrapper around the 3 remaining bytes.\n*/\nclass Instruction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Instruction.prototype);\n        obj.__wbg_ptr = ptr;\n        InstructionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InstructionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_instruction_free(ptr, 0);\n    }\n    /**\n    * Convenience method for converting to bytes\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16);\n            wasm$1.instruction_to_bytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm$1.__wbindgen_export_0(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm$1.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Size of an instruction in bytes\n    * @returns {number}\n    */\n    static size() {\n        const ret = wasm$1.instruction_size();\n        return ret >>> 0;\n    }\n}\n\nconst JIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ji_free(ptr >>> 0, 1));\n/**\n*Jump.\n*/\nclass JI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ji_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} abs_target\n    */\n    constructor(abs_target) {\n        _assertClass(abs_target, Imm24);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        JIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst JMPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmp_free(ptr >>> 0, 1));\n/**\n*Dynamic jump.\n*/\nclass JMP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmp_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} abs_target\n    */\n    constructor(abs_target) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        JMPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst JMPBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmpb_free(ptr >>> 0, 1));\n/**\n*Unconditional dynamic relative jump backwards, with a constant offset.\n*/\nclass JMPB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dynamic\n    * @param {Imm18} fixed\n    */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JMPBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst JMPFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmpf_free(ptr >>> 0, 1));\n/**\n*Unconditional dynamic relative jump forwards, with a constant offset.\n*/\nclass JMPF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpf_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dynamic\n    * @param {Imm18} fixed\n    */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JMPFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst JNEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jne_free(ptr >>> 0, 1));\n/**\n*Conditional dynamic jump.\n*/\nclass JNE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jne_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} abs_target\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(abs_target, lhs, rhs) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst JNEBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jneb_free(ptr >>> 0, 1));\n/**\n*Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n*/\nclass JNEB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jneb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {RegId} dynamic\n    * @param {Imm06} fixed\n    */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        JNEBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst JNEFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnef_free(ptr >>> 0, 1));\n/**\n*Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n*/\nclass JNEF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnef_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {RegId} dynamic\n    * @param {Imm06} fixed\n    */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        JNEFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst JNEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnei_free(ptr >>> 0, 1));\n/**\n*Conditional jump.\n*/\nclass JNEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnei_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {Imm12} abs_target\n    */\n    constructor(cond_lhs, cond_rhs, abs_target) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(abs_target, Imm12);\n        var ptr2 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzb_free(ptr >>> 0, 1));\n/**\n*Dynamic relative jump backwards, conditional against zero, with a constant offset.\n*/\nclass JNZB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {RegId} dynamic\n    * @param {Imm12} fixed\n    */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNZBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzf_free(ptr >>> 0, 1));\n/**\n*Dynamic relative jump forwards, conditional against zero, with a constant offset.\n*/\nclass JNZF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzf_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {RegId} dynamic\n    * @param {Imm12} fixed\n    */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNZFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzi_free(ptr >>> 0, 1));\n/**\n*Conditional jump against zero.\n*/\nclass JNZI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {Imm18} abs_target\n    */\n    constructor(cond_nz, abs_target) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(abs_target, Imm18);\n        var ptr1 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JNZIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst K256Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_k256_free(ptr >>> 0, 1));\n/**\n*The keccak-256 hash of a slice.\n*/\nclass K256 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        K256Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_k256_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        K256Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lb_free(ptr >>> 0, 1));\n/**\n*A byte is loaded from the specified address offset by an immediate value.\n*/\nclass LB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} addr\n    * @param {Imm12} offset\n    */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst LDCFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ldc_free(ptr >>> 0, 1));\n/**\n*Load code as executable either from contract, blob, or memory.\n*/\nclass LDC {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LDCFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ldc_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} src_addr\n    * @param {RegId} offset\n    * @param {RegId} len\n    * @param {Imm06} mode\n    */\n    constructor(src_addr, offset, len, mode) {\n        _assertClass(src_addr, RegId);\n        var ptr0 = src_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr1 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        _assertClass(mode, Imm06);\n        var ptr3 = mode.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LDCFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst LOGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_log_free(ptr >>> 0, 1));\n/**\n*Log an event.\n*/\nclass LOG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LOGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_log_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} c\n    * @param {RegId} d\n    */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LOGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LOGDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_logd_free(ptr >>> 0, 1));\n/**\n*Log data.\n*/\nclass LOGD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LOGDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_logd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} addr\n    * @param {RegId} len\n    */\n    constructor(a, b, addr, len) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr2 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LOGDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lt_free(ptr >>> 0, 1));\n/**\n*Compares two registers for less-than.\n*/\nclass LT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lt_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lw_free(ptr >>> 0, 1));\n/**\n*A word is loaded from the specified address offset by an immediate value.\n*/\nclass LW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lw_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} addr\n    * @param {Imm12} offset\n    */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MCLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcl_free(ptr >>> 0, 1));\n/**\n*Clear a variable number of bytes in memory.\n*/\nclass MCL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcl_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MCLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MCLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcli_free(ptr >>> 0, 1));\n/**\n*Clear an immediate number of bytes in memory.\n*/\nclass MCLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcli_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {Imm18} count\n    */\n    constructor(addr, count) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(count, Imm18);\n        var ptr1 = count.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MCLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst MCPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcp_free(ptr >>> 0, 1));\n/**\n*Copy a variable number of bytes in memory.\n*/\nclass MCP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcp_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MCPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MCPIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcpi_free(ptr >>> 0, 1));\n/**\n*Copy an immediate number of bytes in memory.\n*/\nclass MCPI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCPIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcpi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {Imm12} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, Imm12);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MCPIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MEQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_meq_free(ptr >>> 0, 1));\n/**\n*Compare bytes in memory.\n*/\nclass MEQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MEQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_meq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} result\n    * @param {RegId} lhs_addr\n    * @param {RegId} rhs_addr\n    * @param {RegId} len\n    */\n    constructor(result, lhs_addr, rhs_addr, len) {\n        _assertClass(result, RegId);\n        var ptr0 = result.__destroy_into_raw();\n        _assertClass(lhs_addr, RegId);\n        var ptr1 = lhs_addr.__destroy_into_raw();\n        _assertClass(rhs_addr, RegId);\n        var ptr2 = rhs_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        MEQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MINTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mint_free(ptr >>> 0, 1));\n/**\n*Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n*/\nclass MINT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MINTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mint_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    * @param {RegId} sub_id_addr\n    */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MINTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MLDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mldv_free(ptr >>> 0, 1));\n/**\n*Fused multiply-divide with arbitrary precision intermediate step.\n*/\nclass MLDV {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MLDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mldv_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        MLDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MLOGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mlog_free(ptr >>> 0, 1));\n/**\n*The integer logarithm of a register.\n*/\nclass MLOG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MLOGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mlog_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MLOGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MODFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mod_free(ptr >>> 0, 1));\n/**\n*Modulo remainder of two registers.\n*/\nclass MOD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MODFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mod_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MODFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MODIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_modi_free(ptr >>> 0, 1));\n/**\n*Modulo remainder of a register and an immediate value.\n*/\nclass MODI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MODIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_modi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MODIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MOVEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_move_free(ptr >>> 0, 1));\n/**\n*Copy from one register to another.\n*/\nclass MOVE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MOVEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_move_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} src\n    */\n    constructor(dst, src) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(src, RegId);\n        var ptr1 = src.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MOVEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MOVIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_movi_free(ptr >>> 0, 1));\n/**\n*Copy immediate value into a register\n*/\nclass MOVI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MOVIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_movi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {Imm18} val\n    */\n    constructor(dst, val) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(val, Imm18);\n        var ptr1 = val.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MOVIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst MROOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mroo_free(ptr >>> 0, 1));\n/**\n*The integer root of a register.\n*/\nclass MROO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MROOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mroo_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MROOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MULFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mul_free(ptr >>> 0, 1));\n/**\n*Multiplies two registers.\n*/\nclass MUL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MULFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mul_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MULFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MULIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_muli_free(ptr >>> 0, 1));\n/**\n*Multiplies a register and an immediate value.\n*/\nclass MULI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MULIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_muli_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MULIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MathArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mathargs_free(ptr >>> 0, 1));\n/**\n* Additional arguments for WDOP and WQOP instructions.\n*/\nclass MathArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MathArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mathargs_free(ptr, 0);\n    }\n    /**\n    * The operation to perform\n    * @returns {MathOp}\n    */\n    get op() {\n        const ret = wasm$1.__wbg_get_mathargs_op(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The operation to perform\n    * @param {MathOp} arg0\n    */\n    set op(arg0) {\n        wasm$1.__wbg_set_mathargs_op(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst MulArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mulargs_free(ptr >>> 0, 1));\n/**\n* Additional arguments for WDML and WQML instructions.\n*/\nclass MulArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MulArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mulargs_free(ptr, 0);\n    }\n    /**\n    * Load LHSS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_lhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load LHSS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_lhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_mulargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_mulargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst NOOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_noop_free(ptr >>> 0, 1));\n/**\n*Performs no operation.\n*/\nclass NOOP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NOOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_noop_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction.\n    */\n    constructor() {\n        const ret = wasm$1.noop_new_typescript();\n        this.__wbg_ptr = ret >>> 0;\n        NOOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst NOTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_not_free(ptr >>> 0, 1));\n/**\n*Bitwise NOT a register.\n*/\nclass NOT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NOTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_not_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} arg\n    */\n    constructor(dst, arg) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        NOTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ORFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_or_free(ptr >>> 0, 1));\n/**\n*Bitwise ORs two registers.\n*/\nclass OR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ORFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_or_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ORFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ORIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ori_free(ptr >>> 0, 1));\n/**\n*Bitwise ORs a register and an immediate value.\n*/\nclass ORI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ORIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ori_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ORIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst POPHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_poph_free(ptr >>> 0, 1));\n/**\n*Pop a bitmask-selected set of registers in range 40..64 to the stack.\n*/\nclass POPH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        POPHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_poph_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        POPHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst POPLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_popl_free(ptr >>> 0, 1));\n/**\n*Pop a bitmask-selected set of registers in range 16..40 to the stack.\n*/\nclass POPL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        POPLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_popl_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        POPLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PSHHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_pshh_free(ptr >>> 0, 1));\n/**\n*Push a bitmask-selected set of registers in range 40..64 to the stack.\n*/\nclass PSHH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PSHHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshh_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        PSHHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PSHLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_pshl_free(ptr >>> 0, 1));\n/**\n*Push a bitmask-selected set of registers in range 16..40 to the stack.\n*/\nclass PSHL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PSHLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshl_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        PSHLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PanicInstructionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_panicinstruction_free(ptr >>> 0, 1));\n/**\n* Describe a panic reason with the instruction that generated it\n*/\nclass PanicInstruction {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PanicInstructionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_panicinstruction_free(ptr, 0);\n    }\n    /**\n    * Represents an error described by a reason and an instruction.\n    * @param {PanicReason} reason\n    * @param {number} instruction\n    */\n    constructor(reason, instruction) {\n        const ret = wasm$1.panicinstruction_error_typescript(reason, instruction);\n        this.__wbg_ptr = ret >>> 0;\n        PanicInstructionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Underlying panic reason\n    * @returns {PanicReason}\n    */\n    reason() {\n        const ret = wasm$1.panicinstruction_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Underlying instruction\n    * @returns {number}\n    */\n    instruction() {\n        const ret = wasm$1.panicinstruction_instruction(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst RETFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ret_free(ptr >>> 0, 1));\n/**\n*Return from context.\n*/\nclass RET {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RETFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ret_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        RETFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RETDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_retd_free(ptr >>> 0, 1));\n/**\n*Return from context with data.\n*/\nclass RETD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RETDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_retd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} len\n    */\n    constructor(addr, len) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        RETDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RVRTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_rvrt_free(ptr >>> 0, 1));\n/**\n*Halt execution, reverting state changes and returning a value.\n*/\nclass RVRT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RVRTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_rvrt_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        RVRTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RegIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_regid_free(ptr >>> 0, 1));\n/**\n* Represents a 6-bit register ID, guaranteed to be masked by construction.\n*/\nclass RegId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegId.prototype);\n        obj.__wbg_ptr = ptr;\n        RegIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_regid_free(ptr, 0);\n    }\n    /**\n    * Construct a register ID from the given value.\n    *\n    * Returns `None` if the value is outside the 6-bit value range.\n    * @param {number} u\n    * @returns {RegId | undefined}\n    */\n    static new_checked(u) {\n        const ret = wasm$1.regid_new_checked(u);\n        return ret === 0 ? undefined : RegId.__wrap(ret);\n    }\n    /**\n    * Received balance for this context.\n    * @returns {RegId}\n    */\n    static bal() {\n        const ret = wasm$1.regid_bal();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Remaining gas in the context.\n    * @returns {RegId}\n    */\n    static cgas() {\n        const ret = wasm$1.regid_cgas();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Error codes for particular operations.\n    * @returns {RegId}\n    */\n    static err() {\n        const ret = wasm$1.regid_err();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Flags register.\n    * @returns {RegId}\n    */\n    static flag() {\n        const ret = wasm$1.regid_flag();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Frame pointer. Memory address of beginning of current call frame.\n    * @returns {RegId}\n    */\n    static fp() {\n        const ret = wasm$1.regid_fp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Remaining gas globally.\n    * @returns {RegId}\n    */\n    static ggas() {\n        const ret = wasm$1.regid_ggas();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Heap pointer. Memory address below the current bottom of the heap (points to free\n    * memory).\n    * @returns {RegId}\n    */\n    static hp() {\n        const ret = wasm$1.regid_hp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Instructions start. Pointer to the start of the currently-executing code.\n    * @returns {RegId}\n    */\n    static is() {\n        const ret = wasm$1.regid_is();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains overflow/underflow of addition, subtraction, and multiplication.\n    * @returns {RegId}\n    */\n    static of() {\n        const ret = wasm$1.regid_of();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains one (1), for convenience.\n    * @returns {RegId}\n    */\n    static one() {\n        const ret = wasm$1.regid_one();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * The program counter. Memory address of the current instruction.\n    * @returns {RegId}\n    */\n    static pc() {\n        const ret = wasm$1.regid_pc();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Return value or pointer.\n    * @returns {RegId}\n    */\n    static ret() {\n        const ret = wasm$1.regid_ret();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Return value length in bytes.\n    * @returns {RegId}\n    */\n    static retl() {\n        const ret = wasm$1.regid_retl();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Stack pointer. Memory address on top of current writable stack area (points to\n    * free memory).\n    * @returns {RegId}\n    */\n    static sp() {\n        const ret = wasm$1.regid_sp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Stack start pointer. Memory address of bottom of current writable stack area.\n    * @returns {RegId}\n    */\n    static spp() {\n        const ret = wasm$1.regid_spp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Smallest writable register.\n    * @returns {RegId}\n    */\n    static writable() {\n        const ret = wasm$1.regid_writable();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains zero (0), for convenience.\n    * @returns {RegId}\n    */\n    static zero() {\n        const ret = wasm$1.regid_zero();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Construct a register ID from the given value.\n    *\n    * The given value will be masked to 6 bits.\n    * @param {number} u\n    */\n    constructor(u) {\n        const ret = wasm$1.regid_new_typescript(u);\n        this.__wbg_ptr = ret >>> 0;\n        RegIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * A const alternative to the `Into<u8>` implementation.\n    * @returns {number}\n    */\n    to_u8() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.regid_to_u8(ptr);\n        return ret;\n    }\n}\n\nconst S256Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_s256_free(ptr >>> 0, 1));\n/**\n*The SHA-2-256 hash of a slice.\n*/\nclass S256 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        S256Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_s256_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        S256Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sb_free(ptr >>> 0, 1));\n/**\n*Write the least significant byte of a register to memory.\n*/\nclass SB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} value\n    * @param {Imm12} offset\n    */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SCWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_scwq_free(ptr >>> 0, 1));\n/**\n*Clear a series of slots from contract storage.\n*/\nclass SCWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SCWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_scwq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} lenq\n    */\n    constructor(key_addr, status, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr2 = lenq.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SCWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SLLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sll_free(ptr >>> 0, 1));\n/**\n*Left shifts a register by a register.\n*/\nclass SLL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SLLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sll_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SLLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SLLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_slli_free(ptr >>> 0, 1));\n/**\n*Left shifts a register by an immediate value.\n*/\nclass SLLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SLLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_slli_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SLLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SMOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_smo_free(ptr >>> 0, 1));\n/**\n*Send a message to recipient address with call abi, coins, and output.\n*/\nclass SMO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SMOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_smo_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} recipient_addr\n    * @param {RegId} data_addr\n    * @param {RegId} data_len\n    * @param {RegId} coins\n    */\n    constructor(recipient_addr, data_addr, data_len, coins) {\n        _assertClass(recipient_addr, RegId);\n        var ptr0 = recipient_addr.__destroy_into_raw();\n        _assertClass(data_addr, RegId);\n        var ptr1 = data_addr.__destroy_into_raw();\n        _assertClass(data_len, RegId);\n        var ptr2 = data_len.__destroy_into_raw();\n        _assertClass(coins, RegId);\n        var ptr3 = coins.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SMOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srl_free(ptr >>> 0, 1));\n/**\n*Right shifts a register by a register.\n*/\nclass SRL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srl_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srli_free(ptr >>> 0, 1));\n/**\n*Right shifts a register by an immediate value.\n*/\nclass SRLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srli_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SRWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srw_free(ptr >>> 0, 1));\n/**\n*Load a word from contract storage.\n*/\nclass SRW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srw_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} status\n    * @param {RegId} key_addr\n    */\n    constructor(dst, status, key_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srwq_free(ptr >>> 0, 1));\n/**\n*Load a series of 32 byte slots from contract storage.\n*/\nclass SRWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srwq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} status\n    * @param {RegId} key_addr\n    * @param {RegId} lenq\n    */\n    constructor(dst_addr, status, key_addr, lenq) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SRWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SUBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sub_free(ptr >>> 0, 1));\n/**\n*Subtracts two registers.\n*/\nclass SUB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SUBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sub_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SUBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SUBIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_subi_free(ptr >>> 0, 1));\n/**\n*Subtracts a register and an immediate value.\n*/\nclass SUBI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SUBIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_subi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SUBIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sw_free(ptr >>> 0, 1));\n/**\n*Write a register to memory.\n*/\nclass SW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sw_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} value\n    * @param {Imm12} offset\n    */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SWWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sww_free(ptr >>> 0, 1));\n/**\n*Store a word in contract storage.\n*/\nclass SWW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sww_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} value\n    */\n    constructor(key_addr, status, value) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr2 = value.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SWWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SWWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_swwq_free(ptr >>> 0, 1));\n/**\n*Store a series of 32 byte slots in contract storage.\n*/\nclass SWWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_swwq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} src_addr\n    * @param {RegId} lenq\n    */\n    constructor(key_addr, status, src_addr, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr2 = src_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SWWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TIMEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_time_free(ptr >>> 0, 1));\n/**\n*Get timestamp of block at given height.\n*/\nclass TIME {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TIMEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_time_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} heigth\n    */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        TIMEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TRFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_tr_free(ptr >>> 0, 1));\n/**\n*Transfer coins to a contract unconditionally.\n*/\nclass TR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TRFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tr_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} amount\n    * @param {RegId} asset_id_addr\n    */\n    constructor(contract_id_addr, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr1 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        TRFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TROFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_tro_free(ptr >>> 0, 1));\n/**\n*Transfer coins to a variable output.\n*/\nclass TRO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TROFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tro_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} output_index\n    * @param {RegId} amount\n    * @param {RegId} asset_id_addr\n    */\n    constructor(contract_id_addr, output_index, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(output_index, RegId);\n        var ptr1 = output_index.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr2 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr3 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        TROFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDAMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdam_free(ptr >>> 0, 1));\n/**\n*AddMod 128bit\n*/\nclass WDAM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDAMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdam_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} add_lhs\n    * @param {RegId} add_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDAMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDCMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdcm_free(ptr >>> 0, 1));\n/**\n*Compare 128bit integers\n*/\nclass WDCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDCM.prototype);\n        obj.__wbg_ptr = ptr;\n        WDCMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDCMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdcm_free(ptr, 0);\n    }\n    /**\n    * Construct a `WDCM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {CompareArgs} args\n    * @returns {WDCM}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDCM.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDCMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wddv_free(ptr >>> 0, 1));\n/**\n*Divide 128bit\n*/\nclass WDDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDDV.prototype);\n        obj.__wbg_ptr = ptr;\n        WDDVFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wddv_free(ptr, 0);\n    }\n    /**\n    * Construct a `WDDV` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {DivArgs} args\n    * @returns {WDDV}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDDV.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDMDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdmd_free(ptr >>> 0, 1));\n/**\n*Fused multiply-divide 128bit\n*/\nclass WDMD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDMLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdml_free(ptr >>> 0, 1));\n/**\n*Multiply 128bit\n*/\nclass WDML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDML.prototype);\n        obj.__wbg_ptr = ptr;\n        WDMLFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdml_free(ptr, 0);\n    }\n    /**\n    * Construct a `WDML` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MulArgs} args\n    * @returns {WDML}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDML.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDMMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdmm_free(ptr >>> 0, 1));\n/**\n*MulMod 128bit\n*/\nclass WDMM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmm_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdop_free(ptr >>> 0, 1));\n/**\n*Simple 128bit operations\n*/\nclass WDOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDOP.prototype);\n        obj.__wbg_ptr = ptr;\n        WDOPFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdop_free(ptr, 0);\n    }\n    /**\n    * Construct a `WDOP` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MathArgs} args\n    * @returns {WDOP}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDOP.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQAMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqam_free(ptr >>> 0, 1));\n/**\n*AddMod 256bit\n*/\nclass WQAM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQAMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqam_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} add_lhs\n    * @param {RegId} add_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQAMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQCMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqcm_free(ptr >>> 0, 1));\n/**\n*Compare 256bit integers\n*/\nclass WQCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQCM.prototype);\n        obj.__wbg_ptr = ptr;\n        WQCMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQCMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqcm_free(ptr, 0);\n    }\n    /**\n    * Construct a `WQCM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {CompareArgs} args\n    * @returns {WQCM}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQCM.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQCMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqdv_free(ptr >>> 0, 1));\n/**\n*Divide 256bit\n*/\nclass WQDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQDV.prototype);\n        obj.__wbg_ptr = ptr;\n        WQDVFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqdv_free(ptr, 0);\n    }\n    /**\n    * Construct a `WQDV` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {DivArgs} args\n    * @returns {WQDV}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQDV.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQMDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqmd_free(ptr >>> 0, 1));\n/**\n*Fused multiply-divide 256bit\n*/\nclass WQMD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQMLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqml_free(ptr >>> 0, 1));\n/**\n*Multiply 256bit\n*/\nclass WQML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQML.prototype);\n        obj.__wbg_ptr = ptr;\n        WQMLFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqml_free(ptr, 0);\n    }\n    /**\n    * Construct a `WQML` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MulArgs} args\n    * @returns {WQML}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQML.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQMMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqmm_free(ptr >>> 0, 1));\n/**\n*MulMod 256bit\n*/\nclass WQMM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmm_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqop_free(ptr >>> 0, 1));\n/**\n*Simple 256bit operations\n*/\nclass WQOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQOP.prototype);\n        obj.__wbg_ptr = ptr;\n        WQOPFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqop_free(ptr, 0);\n    }\n    /**\n    * Construct a `WQOP` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MathArgs} args\n    * @returns {WQOP}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQOP.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst XORFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_xor_free(ptr >>> 0, 1));\n/**\n*Bitwise XORs two registers.\n*/\nclass XOR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        XORFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xor_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        XORFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst XORIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_xori_free(ptr >>> 0, 1));\n/**\n*Bitwise XORs a register and an immediate value.\n*/\nclass XORI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        XORIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xori_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        XORIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm$1 = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n\n    return wasm$1;\n}\n\nfunction initSync(module) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n\n    if (typeof module !== 'undefined' && Object.getPrototypeOf(module) === Object.prototype)\n    ({module} = module);\n    else\n    console.warn('using deprecated parameters for `initSync()`; pass a single object instead');\n\n    const imports = __wbg_get_imports();\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n\n    if (typeof module_or_path !== 'undefined' && Object.getPrototypeOf(module_or_path) === Object.prototype)\n    ({module_or_path} = module_or_path);\n    else\n    console.warn('using deprecated parameters for the initialization function; pass a single object instead');\n    const imports = __wbg_get_imports();\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nfunction _loadWasmModule (sync, filepath, src, imports) {\n  function _instantiateOrCompile(source, imports, stream) {\n    var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;\n    var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;\n\n    if (imports) {\n      return instantiateFunc(source, imports)\n    } else {\n      return compileFunc(source)\n    }\n  }\n\n  \nvar buf = null;\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\nif (isNode) {\n  \nbuf = Buffer.from(src, 'base64');\n\n} else {\n  \nvar raw = globalThis.atob(src);\nvar rawLength = raw.length;\nbuf = new Uint8Array(new ArrayBuffer(rawLength));\nfor(var i = 0; i < rawLength; i++) {\n   buf[i] = raw.charCodeAt(i);\n}\n\n}\n\n\n  if(sync) {\n    var mod = new WebAssembly.Module(buf);\n    return imports ? new WebAssembly.Instance(mod, imports) : mod\n  } else {\n    return _instantiateOrCompile(buf, imports, false)\n  }\n}\n\nfunction wasm(imports){return _loadWasmModule(1, null, 'AGFzbQEAAAABOgpgA39/fwF/YAF/AX9gBH9/f38Bf2ACf38AYAJ/fwF/YAABf2AFf39/f38Bf2ABfwBgA39/fwBgAAACGAEDd2JnEF9fd2JpbmRnZW5fdGhyb3cAAwP/Af0BAQEDAwMDAwMBAQMDAQEBAwMBAQEEAQMDAwEBAwEBAQQCAQMCAgICAgIDAwMEBAQEBAQEBAEBAQMDAAICBAQEBAQEBAQEBAABAQgDAwQBAQEBAQEBAgcDAQAAAQEDBwcBAwEDAgIBAQEAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAQEBAQUBAQEBBAAEAQYCAgMDAAIABwEIBAEEAQkDAQEHAQUFBQUFBQUFBQUFBQUFBQUFBQUDBgYCAgQCBgYAAAgABAUDAQARBgkBfwFBgIDAAAsHjUzPBQZtZW1vcnkCABZfX3diZ19jb21wYXJlYXJnc19mcmVlABAaX193YmdfZ2V0X2NvbXBhcmVhcmdzX21vZGUASBpfX3diZ19zZXRfY29tcGFyZWFyZ3NfbW9kZQA4Il9fd2JnX2dldF9jb21wYXJlYXJnc19pbmRpcmVjdF9yaHMASSJfX3diZ19zZXRfY29tcGFyZWFyZ3NfaW5kaXJlY3RfcmhzAEsSY29tcGFyZWFyZ3NfdG9faW1tAFgUY29tcGFyZWFyZ3NfZnJvbV9pbW0AHxVfX3diZ19nZXRfbWF0aGFyZ3Nfb3AASBVfX3diZ19zZXRfbWF0aGFyZ3Nfb3AAORJfX3diZ19tdWxhcmdzX2ZyZWUAER5fX3diZ19nZXRfbXVsYXJnc19pbmRpcmVjdF9yaHMASB5fX3diZ19zZXRfbXVsYXJnc19pbmRpcmVjdF9yaHMATBJfX3diZ19kaXZhcmdzX2ZyZWUAIx5fX3diZ19nZXRfZGl2YXJnc19pbmRpcmVjdF9yaHMAuQEeX193Ymdfc2V0X2RpdmFyZ3NfaW5kaXJlY3RfcmhzAGMbX193YmdfcGFuaWNpbnN0cnVjdGlvbl9mcmVlABchcGFuaWNpbnN0cnVjdGlvbl9lcnJvcl90eXBlc2NyaXB0AE0XcGFuaWNpbnN0cnVjdGlvbl9yZWFzb24AWxxwYW5pY2luc3RydWN0aW9uX2luc3RydWN0aW9uAFwMZ21fZnJvbV9hcmdzANUBDWd0Zl9mcm9tX2FyZ3MAzQEHZ21fYXJncwCIAQhndGZfYXJncwBpDndkY21fZnJvbV9hcmdzADsOd2RvcF9mcm9tX2FyZ3MAOw53ZG1sX2Zyb21fYXJncwA8DndkZHZfZnJvbV9hcmdzAMkBCXdkY21fYXJncwAkCXdxY21fYXJncwAlCXdkb3BfYXJncwAmCXdxb3BfYXJncwAnCXdkbWxfYXJncwAoCXdxbWxfYXJncwApCXdkZHZfYXJncwBkCXdxZHZfYXJncwBlEF9fd2JnX2ltbTA2X2ZyZWUAKhBfX3diZ19pbW0xMl9mcmVlACsQX193YmdfaW1tMThfZnJlZQAsDl9fd2JnX2FkZF9mcmVlABgPX193Ymdfbm9vcF9mcmVlAAcSYWRkX25ld190eXBlc2NyaXB0AFkGYWRkX3JhADUGYWRkX3JiABIGYWRkX3JjABoDYWRkAMUBA2FuZACKAQNkaXYAiwECZXEAjAEDZXhwAI0BAmd0AI4BAmx0AI8BBG1sb2cAkAEEbXJvbwCRAQRtb2RfAJIBBW1vdmVfAD0DbXVsAJMBA25vdAA+Am9yAJQBA3NsbACVAQNzcmwAlgEDc3ViAJcBA3hvcgCYAQRtbGR2AGoDcmV0ALoBBHJldGQAPxNhbG9jX25ld190eXBlc2NyaXB0AGAHYWxvY19yYQAiBGFsb2MAuwEDbWNsAEADbWNwAJkBA21lcQBrE2Joc2hfbmV3X3R5cGVzY3JpcHQAIARiaHNoAC0EYmhlaQC8AQRidXJuAEEEY2FsbABsA2NjcABtBGNyb28AQgRjc2l6AEMCY2IAvQEDbGRjAG4DbG9nAG8EbG9nZABwBG1pbnQARARydnJ0AL4BBHNjd3EAmgEDc3J3AJsBBHNyd3EAcQNzd3cAnAEEc3d3cQByAnRyAJ0BA3RybwBzBGVjazEAngEEZWNyMQCfAQRlZDE5AHQEazI1NgCgAQRzMjU2AKEBBHRpbWUARRNub29wX25ld190eXBlc2NyaXB0AL8BBG5vb3AA3QEEZmxhZwDAAQNiYWwAogEDam1wAMEBA2puZQCjAQNzbW8AdRNhZGRpX25ld190eXBlc2NyaXB0AFoKYWRkaV9pbW0xMgAJBGFkZGkApAEEYW5kaQClAQRkaXZpAKYBBGV4cGkApwEEbW9kaQCoAQRtdWxpAKkBA29yaQCqAQRzbGxpAKsBBHNybGkArAEEc3ViaQCtAQR4b3JpAK4BBGpuZWkArwECbGIAsAECbHcAsQECc2IAsgECc3cAswEEbWNwaQC0ARJndGZfbmV3X3R5cGVzY3JpcHQAzwEDZ3RmALUBBG1jbGkALhFnbV9uZXdfdHlwZXNjcmlwdABGCGdtX2ltbTE4AA0CZ20ALwRtb3ZpADAEam56aQAxBGptcGYAMhNqbXBiX25ld190eXBlc2NyaXB0ABUEam1wYgAzBGpuemYAtgEEam56YgC3AQRqbmVmAHYKam5lYl9pbW0wNgA2BGpuZWIAdwJqaQBOE2NmZWlfbmV3X3R5cGVzY3JpcHQANwpjZmVpX2ltbTI0AAoEY2ZlaQBPBGNmc2kAUANjZmUAwgEDY2ZzAMMBBHBzaGwAUQRwc2hoAFIEcG9wbABTBHBvcGgAVBN3ZGNtX25ld190eXBlc2NyaXB0AMoBBHdkY20AeAR3cWNtAHkEd2RvcAB6BHdxb3AAewR3ZG1sAHwEd3FtbAB9BHdkZHYAfgR3cWR2AH8Ed2RtZACAAQR3cW1kAIEBBHdkYW0AggEEd3FhbQCDAQR3ZG1tAIQBBHdxbW0AhQEEZWNhbACGAQRic2l6ADQTYmxkZF9uZXdfdHlwZXNjcmlwdABVB2JsZGRfcmQANgRibGRkAIcBFl9fd2JnX2luc3RydWN0aW9uX2ZyZWUADBRpbnN0cnVjdGlvbl90b19ieXRlcwAGEGluc3RydWN0aW9uX3NpemUA7wERcmVnaWRfbmV3X2NoZWNrZWQAuAEJcmVnaWRfYmFsAN4BCnJlZ2lkX2NnYXMA3wEJcmVnaWRfZXJyAOABCnJlZ2lkX2ZsYWcA4QEIcmVnaWRfZnAA4gEKcmVnaWRfZ2dhcwDjAQhyZWdpZF9ocADkAQhyZWdpZF9pcwDlAQhyZWdpZF9vZgDmAQlyZWdpZF9vbmUA5wEIcmVnaWRfcGMA6AEJcmVnaWRfcmV0AOkBCnJlZ2lkX3JldGwA6gEIcmVnaWRfc3AA6wEJcmVnaWRfc3BwAOwBDnJlZ2lkX3dyaXRhYmxlAO0BCnJlZ2lkX3plcm8A7gEUcmVnaWRfbmV3X3R5cGVzY3JpcHQA2QELcmVnaWRfdG9fdTgA2gESYW5kX25ld190eXBlc2NyaXB0AFkSZGl2X25ld190eXBlc2NyaXB0AFkRZXFfbmV3X3R5cGVzY3JpcHQAWRJleHBfbmV3X3R5cGVzY3JpcHQAWRFndF9uZXdfdHlwZXNjcmlwdABZEWx0X25ld190eXBlc2NyaXB0AFkTbWxvZ19uZXdfdHlwZXNjcmlwdABZE21yb29fbmV3X3R5cGVzY3JpcHQAWRJtb2RfbmV3X3R5cGVzY3JpcHQAWRJtdWxfbmV3X3R5cGVzY3JpcHQAWRFvcl9uZXdfdHlwZXNjcmlwdABZEnNsbF9uZXdfdHlwZXNjcmlwdABZEnNybF9uZXdfdHlwZXNjcmlwdABZEnN1Yl9uZXdfdHlwZXNjcmlwdABZEnhvcl9uZXdfdHlwZXNjcmlwdABZEm1jcF9uZXdfdHlwZXNjcmlwdABZE3Njd3FfbmV3X3R5cGVzY3JpcHQAWRJzcndfbmV3X3R5cGVzY3JpcHQAWRJzd3dfbmV3X3R5cGVzY3JpcHQAWRF0cl9uZXdfdHlwZXNjcmlwdABZE2VjazFfbmV3X3R5cGVzY3JpcHQAWRNlY3IxX25ld190eXBlc2NyaXB0AFkTazI1Nl9uZXdfdHlwZXNjcmlwdABZE3MyNTZfbmV3X3R5cGVzY3JpcHQAWRJiYWxfbmV3X3R5cGVzY3JpcHQAWRJqbmVfbmV3X3R5cGVzY3JpcHQAWRNhbmRpX25ld190eXBlc2NyaXB0AFoTZGl2aV9uZXdfdHlwZXNjcmlwdABaE2V4cGlfbmV3X3R5cGVzY3JpcHQAWhNtb2RpX25ld190eXBlc2NyaXB0AFoTbXVsaV9uZXdfdHlwZXNjcmlwdABaEm9yaV9uZXdfdHlwZXNjcmlwdABaE3NsbGlfbmV3X3R5cGVzY3JpcHQAWhNzcmxpX25ld190eXBlc2NyaXB0AFoTc3ViaV9uZXdfdHlwZXNjcmlwdABaE3hvcmlfbmV3X3R5cGVzY3JpcHQAWhNqbmVpX25ld190eXBlc2NyaXB0AFoRbGJfbmV3X3R5cGVzY3JpcHQAWhFsd19uZXdfdHlwZXNjcmlwdABaEXNiX25ld190eXBlc2NyaXB0AFoRc3dfbmV3X3R5cGVzY3JpcHQAWhNtY3BpX25ld190eXBlc2NyaXB0AFoTam56Zl9uZXdfdHlwZXNjcmlwdABaE2puemJfbmV3X3R5cGVzY3JpcHQAWhFqaV9uZXdfdHlwZXNjcmlwdAA3E2Nmc2lfbmV3X3R5cGVzY3JpcHQANxNwc2hsX25ld190eXBlc2NyaXB0ADcTcHNoaF9uZXdfdHlwZXNjcmlwdAA3E3BvcGxfbmV3X3R5cGVzY3JpcHQANxNwb3BoX25ld190eXBlc2NyaXB0ADcTbW92aV9uZXdfdHlwZXNjcmlwdAAVE21jbGlfbmV3X3R5cGVzY3JpcHQAFRNqbnppX25ld190eXBlc2NyaXB0ABUTam1wZl9uZXdfdHlwZXNjcmlwdAAVEm5vdF9uZXdfdHlwZXNjcmlwdAAgE3JldGRfbmV3X3R5cGVzY3JpcHQAIBNtb3ZlX25ld190eXBlc2NyaXB0ACASbWNsX25ld190eXBlc2NyaXB0ACATYnVybl9uZXdfdHlwZXNjcmlwdAAgE2Nyb29fbmV3X3R5cGVzY3JpcHQAIBNjc2l6X25ld190eXBlc2NyaXB0ACATbWludF9uZXdfdHlwZXNjcmlwdAAgE3RpbWVfbmV3X3R5cGVzY3JpcHQAIBNic2l6X25ld190eXBlc2NyaXB0ACAGcmV0X3JhACIHYmhlaV9yYQAiBWNiX3JhACIHcnZydF9yYQAiB2ZsYWdfcmEAIgZqbXBfcmEAIghqaV9pbW0yNAAKCmNmc2lfaW1tMjQACgZjZmVfcmEAIgZjZnNfcmEAIgpwc2hsX2ltbTI0AAoKcHNoaF9pbW0yNAAKCnBvcGxfaW1tMjQACgpwb3BoX2ltbTI0AAoTbWxkdl9uZXdfdHlwZXNjcmlwdABVEm1lcV9uZXdfdHlwZXNjcmlwdABVEmNjcF9uZXdfdHlwZXNjcmlwdABVEmxvZ19uZXdfdHlwZXNjcmlwdABVE2xvZ2RfbmV3X3R5cGVzY3JpcHQAVRNzcndxX25ld190eXBlc2NyaXB0AFUTc3d3cV9uZXdfdHlwZXNjcmlwdABVEnRyb19uZXdfdHlwZXNjcmlwdABVE2VkMTlfbmV3X3R5cGVzY3JpcHQAVRJzbW9fbmV3X3R5cGVzY3JpcHQAVRJsZGNfbmV3X3R5cGVzY3JpcHQAVRNqbmVmX25ld190eXBlc2NyaXB0AFUTd2RtZF9uZXdfdHlwZXNjcmlwdABVE3dxbWRfbmV3X3R5cGVzY3JpcHQAVRN3ZGFtX25ld190eXBlc2NyaXB0AFUTd3FhbV9uZXdfdHlwZXNjcmlwdABVE3dkbW1fbmV3X3R5cGVzY3JpcHQAVRN3cW1tX25ld190eXBlc2NyaXB0AFUTZWNhbF9uZXdfdHlwZXNjcmlwdABVE2NhbGxfbmV3X3R5cGVzY3JpcHQAVRNfX3diZ19tYXRoYXJnc19mcmVlABAfX193Ymdfc2V0X21hdGhhcmdzX2luZGlyZWN0X3JocwBLHl9fd2JnX3NldF9tdWxhcmdzX2luZGlyZWN0X2xocwBLH19fd2JnX2dldF9tYXRoYXJnc19pbmRpcmVjdF9yaHMASR5fX3diZ19nZXRfbXVsYXJnc19pbmRpcmVjdF9saHMASRJyZXRfbmV3X3R5cGVzY3JpcHQAYBNiaGVpX25ld190eXBlc2NyaXB0AGARY2JfbmV3X3R5cGVzY3JpcHQAYBNydnJ0X25ld190eXBlc2NyaXB0AGATZmxhZ19uZXdfdHlwZXNjcmlwdABgEmptcF9uZXdfdHlwZXNjcmlwdABgEmNmZV9uZXdfdHlwZXNjcmlwdABgEmNmc19uZXdfdHlwZXNjcmlwdABgD19fd2JnX3dkb3BfZnJlZQAYDl9fd2JnX21vZF9mcmVlABgPX193Ymdfd3Fkdl9mcmVlABgNX193Ymdfc2JfZnJlZQAYDl9fd2JnX3Ntb19mcmVlABgPX193YmdfcHNobF9mcmVlABgOX193YmdfbG9nX2ZyZWUAGA9fX3diZ193cWFtX2ZyZWUAGA9fX3diZ193cW1sX2ZyZWUAGA5fX3diZ19ub3RfZnJlZQAYD19fd2JnX2puemlfZnJlZQAYD19fd2JnX2puZWlfZnJlZQAYD19fd2JnX3N1YmlfZnJlZQAYD19fd2JnX2ZsYWdfZnJlZQAYD19fd2JnX2NzaXpfZnJlZQAYD19fd2JnX3Nyd3FfZnJlZQAYD19fd2JnX3NsbGlfZnJlZQAYD19fd2JnX2ptcGJfZnJlZQAYD19fd2JnX3dkbWxfZnJlZQAYD19fd2JnX3MyNTZfZnJlZQAYDl9fd2JnX3hvcl9mcmVlABgOX193YmdfY2ZlX2ZyZWUAGA1fX3diZ19ndF9mcmVlABgPX193YmdfcHNoaF9mcmVlABgPX193YmdfbWNsaV9mcmVlABgNX193YmdfbHRfZnJlZQAYD19fd2JnX2puZWZfZnJlZQAYDV9fd2JnX3N3X2ZyZWUAGA9fX3diZ19zcmxpX2ZyZWUAGA9fX3diZ19idXJuX2ZyZWUAGA9fX3diZ19ic2l6X2ZyZWUAGA9fX3diZ19ydnJ0X2ZyZWUAGA9fX3diZ194b3JpX2ZyZWUAGA9fX3diZ19tdWxpX2ZyZWUAGA1fX3diZ19sYl9mcmVlABgNX193YmdfZ21fZnJlZQAYD19fd2JnX2Joc2hfZnJlZQAYDV9fd2JnX2VxX2ZyZWUAGA5fX3diZ19zbGxfZnJlZQAYDl9fd2JnX29yaV9mcmVlABgPX193YmdfZWQxOV9mcmVlABgPX193YmdfY2ZlaV9mcmVlABgPX193YmdfY2ZzaV9mcmVlABgPX193Ymdfam56Yl9mcmVlABgPX193YmdfYWxvY19mcmVlABgOX193Ymdfc3JsX2ZyZWUAGA9fX3diZ19tcm9vX2ZyZWUAGA5fX3diZ19jZnNfZnJlZQAYDl9fd2JnX2ptcF9mcmVlABgPX193YmdfYmhlaV9mcmVlABgPX193YmdfbG9nZF9mcmVlABgPX193Ymdfam5lYl9mcmVlABgPX193Ymdfd3FtbV9mcmVlABgPX193YmdfcG9waF9mcmVlABgPX193Ymdfd2RjbV9mcmVlABgPX193YmdfZXhwaV9mcmVlABgPX193YmdfYWRkaV9mcmVlABgPX193YmdfYmxkZF9mcmVlABgOX193YmdfbGRjX2ZyZWUAGA5fX3diZ19kaXZfZnJlZQAYD19fd2JnX3dkZHZfZnJlZQAYD19fd2JnX21sZHZfZnJlZQAYDl9fd2JnX21jbF9mcmVlABgOX193YmdfbXVsX2ZyZWUAGA9fX3diZ193ZGFtX2ZyZWUAGA9fX3diZ19jYWxsX2ZyZWUAGA1fX3diZ19sd19mcmVlABgPX193YmdfZWNhbF9mcmVlABgPX193YmdfbWxvZ19mcmVlABgPX193YmdfcmV0ZF9mcmVlABgPX193YmdfdGltZV9mcmVlABgOX193YmdfZ3RmX2ZyZWUAGA5fX3diZ19qbmVfZnJlZQAYDV9fd2JnX29yX2ZyZWUAGA9fX3diZ19kaXZpX2ZyZWUAGA9fX3diZ19qbnpmX2ZyZWUAGA5fX3diZ190cm9fZnJlZQAYDl9fd2JnX21jcF9mcmVlABgPX193YmdfbWludF9mcmVlABgOX193Ymdfc3ViX2ZyZWUAGA1fX3diZ19jYl9mcmVlABgPX193Ymdfd3FvcF9mcmVlABgOX193Ymdfc3J3X2ZyZWUAGA9fX3diZ19lY3IxX2ZyZWUAGA9fX3diZ19qbXBmX2ZyZWUAGA9fX3diZ19rMjU2X2ZyZWUAGA5fX3diZ19yZXRfZnJlZQAYD19fd2JnX3Njd3FfZnJlZQAYDl9fd2JnX21lcV9mcmVlABgPX193Ymdfc3d3cV9mcmVlABgOX193YmdfYmFsX2ZyZWUAGA9fX3diZ19tb3ZpX2ZyZWUAGA9fX3diZ193ZG1kX2ZyZWUAGA9fX3diZ19wb3BsX2ZyZWUAGA9fX3diZ193ZG1tX2ZyZWUAGA5fX3diZ19leHBfZnJlZQAYDV9fd2JnX2ppX2ZyZWUAGA9fX3diZ193cWNtX2ZyZWUAGA9fX3diZ19tY3BpX2ZyZWUAGA9fX3diZ19tb2RpX2ZyZWUAGA1fX3diZ190cl9mcmVlABgPX193YmdfYW5kaV9mcmVlABgOX193YmdfY2NwX2ZyZWUAGA5fX3diZ19zd3dfZnJlZQAYD19fd2JnX2Nyb29fZnJlZQAYD19fd2JnX3dxbWRfZnJlZQAYD19fd2JnX21vdmVfZnJlZQAYD19fd2JnX2VjazFfZnJlZQAYDl9fd2JnX2FuZF9mcmVlABgTd3Fkdl9uZXdfdHlwZXNjcmlwdADKARN3cW1sX25ld190eXBlc2NyaXB0AMoBE3dkbWxfbmV3X3R5cGVzY3JpcHQAygETd3FvcF9uZXdfdHlwZXNjcmlwdADKARN3ZG9wX25ld190eXBlc2NyaXB0AMoBE3dxY21fbmV3X3R5cGVzY3JpcHQAygETd2Rkdl9uZXdfdHlwZXNjcmlwdADKAQ53cWNtX2Zyb21fYXJncwA7CndxZHZfaW1tMDYANgp3cW1sX2ltbTA2ADYKd2RtbF9pbW0wNgA2Cndxb3BfaW1tMDYANgp3ZG9wX2ltbTA2ADYKd3FjbV9pbW0wNgA2CndkZHZfaW1tMDYANgp3ZGNtX2ltbTA2ADYKam5lZl9pbW0wNgA2CWxkY19pbW0wNgA2DndxbWxfZnJvbV9hcmdzADwOd3FvcF9mcm9tX2FyZ3MAOwVnbV9yYQA1BWd0X3JjABoFZ3RfcmIAEgVndF9yYQA1BWxiX3JiABIFbGJfcmEANQVsdF9yYwAaBWx0X3JiABIFbHRfcmEANQhsd19pbW0xMgAJBWx3X3JiABIFbHdfcmEANQVvcl9yYwAaBW9yX3JiABIFb3JfcmEANQhzYl9pbW0xMgAJBXNiX3JiABIFc2JfcmEANQhzd19pbW0xMgAJBXN3X3JiABIFc3dfcmEANQV0cl9yYwAaBXRyX3JiABIFdHJfcmEANQVlcV9yYwAaBWVxX3JiABIFZXFfcmEANQZhbmRfcmMAGgZhbmRfcmIAEgZhbmRfcmEANQZiYWxfcmMAGgZiYWxfcmIAEgZiYWxfcmEANQZjY3BfcmMAGgZjY3BfcmIAEgZjY3BfcmEANQZkaXZfcmMAGgZkaXZfcmIAEgZkaXZfcmEANQZleHBfcmMAGgZleHBfcmIAEgZleHBfcmEANQhsYl9pbW0xMgAJBmd0Zl9yYgASBmd0Zl9yYQA1BmpuZV9yYwAaBmpuZV9yYgASBmpuZV9yYQA1BmxkY19yYwAaBmxkY19yYgASBmxkY19yYQA1BmxvZ19yZAA2BmxvZ19yYwAaBmxvZ19yYgASBmxvZ19yYQA1Bm1jbF9yYgASBm1jbF9yYQA1Bm1jcF9yYwAaBm1jcF9yYgASBm1jcF9yYQA1Bm1lcV9yZAA2Bm1lcV9yYwAaBm1lcV9yYgASBm1lcV9yYQA1Bm1vZF9yYwAaBm1vZF9yYgASBm1vZF9yYQA1Bm11bF9yYwAaBm11bF9yYgASBm11bF9yYQA1Bm5vdF9yYgASBm5vdF9yYQA1CW9yaV9pbW0xMgAJBm9yaV9yYgASBm9yaV9yYQA1BnNsbF9yYwAaBnNsbF9yYgASBnNsbF9yYQA1BnNtb19yZAA2BnNtb19yYwAaBnNtb19yYgASBnNtb19yYQA1BnNybF9yYwAaBnNybF9yYgASBnNybF9yYQA1BnNyd19yYwAaBnNyd19yYgASBnNyd19yYQA1BnN1Yl9yYwAaBnN1Yl9yYgASBnN1Yl9yYQA1BnN3d19yYwAaBnN3d19yYgASBnN3d19yYQA1BnRyb19yZAA2BnRyb19yYwAaBnRyb19yYgASBnRyb19yYQA1Bnhvcl9yYwAaBnhvcl9yYgASBnhvcl9yYQA1CWd0Zl9pbW0xMgAJB2FkZGlfcmIAEgdhZGRpX3JhADUKYW5kaV9pbW0xMgAJB2FuZGlfcmIAEgdhbmRpX3JhADUHYmhzaF9yYgASB2Joc2hfcmEANQZjY3BfcmQANgdibGRkX3JjABoHYmxkZF9yYgASB2JsZGRfcmEANQdic2l6X3JiABIHYnNpel9yYQA1B2J1cm5fcmIAEgdidXJuX3JhADUHY2FsbF9yZAA2B2NhbGxfcmMAGgdjYWxsX3JiABIHY2FsbF9yYQA1B2Nyb29fcmIAEgdjcm9vX3JhADUHY3Npel9yYgASB2NzaXpfcmEANQpkaXZpX2ltbTEyAAkHZGl2aV9yYgASB2RpdmlfcmEANQdlY2FsX3JkADYHZWNhbF9yYwAaB2VjYWxfcmIAEgdlY2FsX3JhADUHZWNrMV9yYwAaB2VjazFfcmIAEgdlY2sxX3JhADUHZWNyMV9yYwAaB2VjcjFfcmIAEgdlY3IxX3JhADUHZWQxOV9yZAA2B2VkMTlfcmMAGgdlZDE5X3JiABIHZWQxOV9yYQA1CmV4cGlfaW1tMTIACQdleHBpX3JiABIHZXhwaV9yYQA1CmptcGJfaW1tMTgADQdqbXBiX3JhADUKam1wZl9pbW0xOAANB2ptcGZfcmEANQdqbmViX3JjABoHam5lYl9yYgASB2puZWJfcmEANQdqbmVmX3JjABoHam5lZl9yYgASB2puZWZfcmEANQpqbmVpX2ltbTEyAAkHam5laV9yYgASB2puZWlfcmEANQpqbnpiX2ltbTEyAAkHam56Yl9yYgASB2puemJfcmEANQpqbnpmX2ltbTEyAAkHam56Zl9yYgASB2puemZfcmEANQpqbnppX2ltbTE4AA0Ham56aV9yYQA1B2syNTZfcmMAGgdrMjU2X3JiABIHazI1Nl9yYQA1B2xvZ2RfcmQANgdsb2dkX3JjABoHbG9nZF9yYgASB2xvZ2RfcmEANQptY2xpX2ltbTE4AA0HbWNsaV9yYQA1Cm1jcGlfaW1tMTIACQdtY3BpX3JiABIHbWNwaV9yYQA1B21pbnRfcmIAEgdtaW50X3JhADUHbWxkdl9yZAA2B21sZHZfcmMAGgdtbGR2X3JiABIHbWxkdl9yYQA1B21sb2dfcmMAGgdtbG9nX3JiABIHbWxvZ19yYQA1Cm1vZGlfaW1tMTIACQdtb2RpX3JiABIHbW9kaV9yYQA1B21vdmVfcmIAEgdtb3ZlX3JhADUKbW92aV9pbW0xOAANB21vdmlfcmEANQdtcm9vX3JjABoHbXJvb19yYgASB21yb29fcmEANQptdWxpX2ltbTEyAAkHbXVsaV9yYgASB211bGlfcmEANQdyZXRkX3JiABIHcmV0ZF9yYQA1B3MyNTZfcmMAGgdzMjU2X3JiABIHczI1Nl9yYQA1B3Njd3FfcmMAGgdzY3dxX3JiABIHc2N3cV9yYQA1CnNsbGlfaW1tMTIACQdzbGxpX3JiABIHc2xsaV9yYQA1CnNybGlfaW1tMTIACQdzcmxpX3JiABIHc3JsaV9yYQA1B3Nyd3FfcmQANgdzcndxX3JjABoHc3J3cV9yYgASB3Nyd3FfcmEANQpzdWJpX2ltbTEyAAkHc3ViaV9yYgASB3N1YmlfcmEANQdzd3dxX3JkADYHc3d3cV9yYwAaB3N3d3FfcmIAEgdzd3dxX3JhADUHdGltZV9yYgASB3RpbWVfcmEANQd3ZGFtX3JkADYHd2RhbV9yYwAaB3dkYW1fcmIAEgd3ZGFtX3JhADUHd2RjbV9yYwAaB3dkY21fcmIAEgd3ZGNtX3JhADUHd2Rkdl9yYwAaB3dkZHZfcmIAEgd3ZGR2X3JhADUHd2RtZF9yZAA2B3dkbWRfcmMAGgd3ZG1kX3JiABIHd2RtZF9yYQA1B3dkbWxfcmMAGgd3ZG1sX3JiABIHd2RtbF9yYQA1B3dkbW1fcmQANgd3ZG1tX3JjABoHd2RtbV9yYgASB3dkbW1fcmEANQd3ZG9wX3JjABoHd2RvcF9yYgASB3dkb3BfcmEANQd3cWFtX3JkADYHd3FhbV9yYwAaB3dxYW1fcmIAEgd3cWFtX3JhADUHd3FjbV9yYwAaB3dxY21fcmIAEgd3cWNtX3JhADUHd3Fkdl9yYwAaB3dxZHZfcmIAEgd3cWR2X3JhADUHd3FtZF9yZAA2B3dxbWRfcmMAGgd3cW1kX3JiABIHd3FtZF9yYQA1B3dxbWxfcmMAGgd3cW1sX3JiABIHd3FtbF9yYQA1B3dxbW1fcmQANgd3cW1tX3JjABoHd3FtbV9y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C0HggsAAQRkQ2AEACykBAX9BEEEEEMYBIgEgADoADCABQQA2AgggAUKBgICAEDcCACABQQhqCykBAX9BEEEEEMYBIgEgADYCDCABQQA2AgggAUKBgICAEDcCACABQQhqCyIAIAIQAiECIAAQxwEgARDHASACEEdBCHRBygByENEBEGgLDwAgACABIAIgA0ESEPEBCw8AIAAgASACIANBGBDxAQsPACAAIAEgAiADQRwQ8QELDwAgACABIAIgA0EdEPEBCw8AIAAgASACIANBIRDyAQsPACAAIAEgAiADQSIQ8QELDwAgACABIAIgA0EjEPEBCw8AIAAgASACIANBKBDxAQsPACAAIAEgAiADQSoQ8QELDwAgACABIAIgA0EsEPEBCw8AIAAgASACIANBLxDxAQsPACAAIAEgAiADQTgQ8QELEAAgACABIAIgA0HTABDyAQsQACAAIAEgAiADQdQAEPIBCxAAIAAgASACIANB3gAQ8gELEAAgACABIAIgA0HfABDyAQsQACAAIAEgAiADQeAAEPIBCxAAIAAgASACIANB4QAQ8gELEAAgACABIAIgA0HiABDyAQsQACAAIAEgAiADQeMAEPIBCxAAIAAgASACIANB5AAQ8gELEAAgACABIAIgA0HlABDyAQsQACAAIAEgAiADQeYAEPEBCxAAIAAgASACIANB5wAQ8QELEAAgACABIAIgA0HoABDxAQsQACAAIAEgAiADQekAEPEBCxAAIAAgASACIANB6gAQ8QELEAAgACABIAIgA0HrABDxAQsQACAAIAEgAiADQewAEPEBCxAAIAAgASACIANB7gAQ8QELHgAgARBmIQEgABDHASABEMQBQQh0QcwAchDRARBoCxkAIAAgASACQSBBACAEG0EQQQAgAxtyECELDQAgACABIAJBARDzAQsNACAAIAEgAkECEPMBCw0AIAAgASACQQMQ8wELDQAgACABIAJBBBDzAQsNACAAIAEgAkEFEPMBCw0AIAAgASACQQYQ8wELDQAgACABIAJBBxDzAQsNACAAIAEgAkEIEPMBCw0AIAAgASACQQkQ8wELDQAgACABIAJBCxDzAQsNACAAIAEgAkENEPMBCw0AIAAgASACQQ4Q8wELDQAgACABIAJBDxDzAQsNACAAIAEgAkEQEPMBCw0AIAAgASACQREQ8wELDQAg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bmdlIGZvciAxOC1iaXQgaW1tZWRpYXRlAEgAEAAHAAAA2AAQACMAAAAiABAAEwAAALoDAAAcAAAAYCBvdXQgb2YgcmFuZ2UgZm9yIDI0LWJpdCBpbW1lZGlhdGUASAAQAAcAAAAcARAAIwAAACIAEAATAAAAvwMAABwAAABpbnZhbGlkIGVudW0gdmFsdWUgcGFzc2VkYXR0ZW1wdGVkIHRvIHRha2Ugb3duZXJzaGlwIG9mIFJ1c3QgdmFsdWUgd2hpbGUgaXQgd2FzIGJvcnJvd2VkEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACQAAAAlAAAAJgAAACcAAAAoAAAAKQAAACoAAAArAAAALAAAAC0AAAAuAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAANQAAADYAAAA3AAAAOAAAADkAAAA6AAAAOwAAADwAAAA9AAAAPgAAAD8AAABAAAAAQQAAAEIAAABDAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAABbAAAAXAAAAF0AAABeAAAAXwAAAGAAAABhAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAJAAAACRAAAAkgAAAJMAAACUAAAAlQAAAJYAAACXAAAAmAAAAKAAAAChAAAAogAAAKMAAACkAAAApQAAAKYAAACnAAAAqAAAAKkAAACqAAAAqwAAAKwAAACtAAAAsAAAALoAAAC7AAAAAQAAAAAAAABjYWxsZWQgYE9wdGlvbjo6dW53cmFwKClgIG9uIGEgYE5vbmVgIHZhbHVlAAUAAAAAAAAAAQAAAAYAAAAwMDAxMDIwMzA0MDUwNjA3MDgwOTEwMTExMjEzMTQxNTE2MTcxODE5MjAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ0NTQ2NDc0ODQ5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc3ODc5ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OS9ydXN0L2RlcHMvZGxtYWxsb2MtMC4yLjYvc3JjL2RsbWFsbG9jLnJzYXNzZXJ0aW9uIGZhaWxlZDogcHNpemUgPj0gc2l6ZSArIG1pbl9vdmVyaGVhZACABBAAKQAAAKgEAAAJAAAAYXNzZXJ0aW9uIGZhaWxlZDogcHNpemUgPD0gc2l6ZSArIG1heF9vdmVyaGVhZAAAgAQQACkAAACuBAAADQAAAGxpYnJhcnkvc3RkL3NyYy9wYW5pY2tpbmcucnMoBRAAHAAAAIsCAAAeAAAAbnVsbCBwb2ludGVyIHBhc3NlZCB0byBydXN0cmVjdXJzaXZlIHVzZSBvZiBhbiBvYmplY3QgZGV0ZWN0ZWQgd2hpY2ggd291bGQgbGVhZCB0byB1bnNhZmUgYWxpYXNpbmcgaW4gcnVzdAA7CXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AgZ3YWxydXMGMC4yMS4zDHdhc20tYmluZGdlbgYwLjIuOTM=', imports)}\n\nasync function initWasm () {\n  return await __wbg_init(wasm());\n}\n\n/**\n * calling it right away for pre-caching\n * the wasm async initialization at startup\n */\ninitWasm();\n\nexport { ADD, ADDI, ALOC, AND, ANDI, BAL, BHEI, BHSH, BLDD, BSIZ, BURN, CALL, CB, CCP, CFE, CFEI, CFS, CFSI, CROO, CSIZ, CompareArgs, CompareMode, DIV, DIVI, DivArgs, ECAL, ECK1, ECR1, ED19, EQ, EXP, EXPI, FLAG, GM, GMArgs, GT, GTF, GTFArgs, Imm06, Imm12, Imm18, Imm24, Instruction, JI, JMP, JMPB, JMPF, JNE, JNEB, JNEF, JNEI, JNZB, JNZF, JNZI, K256, LB, LDC, LOG, LOGD, LT, LW, MCL, MCLI, MCP, MCPI, MEQ, MINT, MLDV, MLOG, MOD, MODI, MOVE, MOVI, MROO, MUL, MULI, MathArgs, MathOp, MulArgs, NOOP, NOT, OR, ORI, POPH, POPL, PSHH, PSHL, PanicInstruction, PanicReason, RET, RETD, RVRT, RegId, S256, SB, SCWQ, SLL, SLLI, SMO, SRL, SRLI, SRW, SRWQ, SUB, SUBI, SW, SWW, SWWQ, TIME, TR, TRO, WDAM, WDCM, WDDV, WDMD, WDML, WDMM, WDOP, WQAM, WQCM, WQDV, WQMD, WQML, WQMM, WQOP, XOR, XORI, add, addi, aloc, and, andi, bal, bhei, bhsh, bldd, bsiz, burn, call, cb, ccp, cfe, cfei, cfs, cfsi, croo, csiz, div, divi, ecal, eck1, ecr1, ed19, eq, exp, expi, flag, gm, gm_args, gt, gtf, gtf_args, initSync, initWasm, ji, jmp, jmpb, jmpf, jne, jneb, jnef, jnei, jnzb, jnzf, jnzi, k256, lb, ldc, log, logd, lt, lw, mcl, mcli, mcp, mcpi, meq, mint, mldv, mlog, mod_, modi, move_, movi, mroo, mul, muli, noop, not, or, ori, poph, popl, pshh, pshl, ret, retd, rvrt, s256, sb, scwq, sll, slli, smo, srl, srli, srw, srwq, sub, subi, sw, sww, swwq, time, tr, tro, wdam, wdcm, wdcm_args, wddv, wddv_args, wdmd, wdml, wdml_args, wdmm, wdop, wdop_args, wqam, wqcm, wqcm_args, wqdv, wqdv_args, wqmd, wqml, wqml_args, wqmm, wqop, wqop_args, xor, xori };\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\nexport function FpLegendre(order) {\n    // (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n    // (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x) => {\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * NOTE: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject, bitLen } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const validateW = (W) => {\n        if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n            throw new Error(`Wrong window size=${W}, should be [1..${bits}]`);\n    };\n    const opts = (W) => {\n        validateW(W);\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, n, transform) {\n            const W = pointWindowSizes.get(P) || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return this.wNAF(W, comp, n);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM).\n * MSM is basically (Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param field field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, field, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length)\n        throw new Error('arrays of points and scalars must have equal length');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error(`wrong scalar at index ${i}`);\n    });\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error(`wrong point at index ${i}`);\n    });\n    const wbits = bitLen(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(c.ZERO); // +1 for zero array\n    const lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;\n    let sum = c.ZERO;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(c.ZERO);\n        for (let j = 0; j < scalars.length; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = c.ZERO; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = c.ZERO; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport { validateBasic, wNAF, pippenger, } from './curve.js';\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, memoized, abool } from './utils.js';\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = ut.numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 128) : '';\n            return `${ut.numberToHexUnpadded(tag)}${lenLen}${len}${data}`;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = ut.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected assertion');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('Invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('Invalid signature integer: unnecessary leading zero');\n            return b2n(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const seq = `${tlv.encode(0x02, int.encode(sig.r))}${tlv.encode(0x02, int.encode(sig.s))}`;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = mod.Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, N); // disabled by default, enabled for BLS\n        ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            ut.aInRange('scalar', sc, _0n, CURVE.n);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (sc === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, sc);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!ut.inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n            ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        ut.aInRange(`num < 2^${CURVE.nBitLength}`, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        validateSigVerOpts(opts);\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { inRange, aInRange, bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE, } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// src/binary/binaryMerkleTree.ts\nimport { hash } from \"@fuel-ts/hasher\";\n\n// src/common/common.ts\nvar EMPTY = \"0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n\n// src/binary/types/node.ts\nvar Node = class {\n  left;\n  right;\n  parent;\n  hash;\n  data;\n  index;\n  constructor(left, right, parent, hash5, data, index = 0) {\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n    this.hash = hash5;\n    this.data = data;\n    this.index = index;\n  }\n};\nvar node_default = Node;\n\n// src/binary/binaryMerkleTree.ts\nfunction hashLeaf(data) {\n  return hash(\"0x00\".concat(data.slice(2)));\n}\nfunction hashNode(left, right) {\n  return hash(\"0x01\".concat(left.slice(2)).concat(right.slice(2)));\n}\nfunction constructTree(data) {\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    const leaf = new node_default(-1, -1, -1, hashed, data[i]);\n    leaf.index = i;\n    nodes.push(leaf);\n  }\n  const nodesList = [...nodes];\n  let pNodes = [...nodes];\n  let size = nodes.length + 1 >> 1;\n  let odd = nodes.length & 1;\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new node_default(pNodes[j].index, pNodes[j + 1].index, -1, hashed, \"\");\n      const nextIndex = nodesList.length;\n      nodes[i].index = nextIndex;\n      nodesList[pNodes[j].index].parent = nextIndex;\n      nodesList[pNodes[j + 1].index].parent = nextIndex;\n      nodesList.push(nodes[i]);\n    }\n    if (size === 1) {\n      break;\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    odd = size & 1;\n    size = size + 1 >> 1;\n    pNodes = [...nodes];\n  }\n  return nodesList;\n}\nfunction calcRoot(data) {\n  if (!data.length) {\n    return EMPTY;\n  }\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    nodes.push(new node_default(-1, -1, -1, hashed, data[i]));\n  }\n  let pNodes = nodes;\n  let size = nodes.length + 1 >> 1;\n  let odd = nodes.length & 1;\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new node_default(pNodes[j].index, pNodes[j + 1].index, -1, hashed, \"\");\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    if (size === 1) {\n      break;\n    }\n    odd = size & 1;\n    size = size + 1 >> 1;\n    pNodes = nodes;\n  }\n  return nodes[0].hash;\n}\nfunction getProof(nodes, id) {\n  const proof = [];\n  for (let prev = id, cur = nodes[id].parent; cur !== -1; prev = cur, cur = nodes[cur].parent) {\n    if (nodes[cur].left === prev) {\n      proof.push(nodes[nodes[cur].right].hash);\n    } else {\n      proof.push(nodes[nodes[cur].left].hash);\n    }\n  }\n  return proof;\n}\n\n// src/sparse/sparseMerkleTree.ts\nimport { hash as hash4 } from \"@fuel-ts/hasher\";\n\n// src/sparse/proofs.ts\nimport { hash as hash3 } from \"@fuel-ts/hasher\";\n\n// src/sparse/treeHasher.ts\nimport { hash as hash2 } from \"@fuel-ts/hasher\";\nvar leafPrefix = \"0x00\";\nvar nodePrefix = \"0x01\";\nfunction hashLeaf2(key, data) {\n  const value = \"0x00\".concat(key.slice(2)).concat(hash2(data).slice(2));\n  return [hash2(value), value];\n}\nfunction hashNode2(left, right) {\n  const value = \"0x01\".concat(left.slice(2)).concat(right.slice(2));\n  return [hash2(value), value];\n}\nfunction parseLeaf(data) {\n  const len = nodePrefix.length;\n  return [\"0x\".concat(data.slice(len, len + 64)), \"0x\".concat(data.slice(len + 64))];\n}\nfunction parseNode(data) {\n  const len = nodePrefix.length;\n  return [\"0x\".concat(data.slice(len, len + 64)), \"0x\".concat(data.slice(len + 64))];\n}\nfunction isLeaf(data) {\n  return data.slice(0, 4) === leafPrefix;\n}\n\n// src/sparse/types/sparseCompactMerkleProof.ts\nvar SparseCompactMerkleProof = class {\n  SideNodes;\n  NonMembershipLeafData;\n  BitMask;\n  NumSideNodes;\n  SiblingData;\n  constructor(SideNodes, NonMembershipLeafData, Bitmask, NumSideNodes, SiblingData) {\n    this.SideNodes = SideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.BitMask = Bitmask;\n    this.NumSideNodes = NumSideNodes;\n    this.SiblingData = SiblingData;\n  }\n};\nvar sparseCompactMerkleProof_default = SparseCompactMerkleProof;\n\n// src/sparse/types/sparseMerkleProof.ts\nvar SparseMerkleProof = class {\n  SideNodes;\n  NonMembershipLeafData;\n  SiblingData;\n  constructor(sideNodes, NonMembershipLeafData, SiblingData) {\n    this.SideNodes = sideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.SiblingData = SiblingData;\n  }\n};\nvar sparseMerkleProof_default = SparseMerkleProof;\n\n// src/sparse/utils.ts\nvar ZERO = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nvar MAX_HEIGHT = 256;\nfunction getBitAtFromMSB(data, position) {\n  const slicedData = data.slice(2);\n  const byte = \"0x\".concat(\n    slicedData.slice(Math.floor(position / 8) * 2, Math.floor(position / 8) * 2 + 2)\n  );\n  const bits = Number(byte) & 1 << 8 - 1 - position % 8;\n  if (bits > 0) {\n    return 1;\n  }\n  return 0;\n}\nfunction reverseSideNodes(sideNodes) {\n  let left = 0;\n  let right = sideNodes.length - 1;\n  const reversedSideNodes = sideNodes;\n  while (left < right) {\n    [reversedSideNodes[left], reversedSideNodes[right]] = [\n      reversedSideNodes[right],\n      reversedSideNodes[left]\n    ];\n    left += 1;\n    right -= 1;\n  }\n  return reversedSideNodes;\n}\nfunction countCommonPrefix(data1, data2) {\n  let count = 0;\n  for (let i = 0; i < MAX_HEIGHT; i += 1) {\n    if (getBitAtFromMSB(data1, i) === getBitAtFromMSB(data2, i)) {\n      count += 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n\n// src/sparse/proofs.ts\nfunction compactProof(proof) {\n  const bitMask = [];\n  const compactedSideNodes = [];\n  let node;\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    node = proof.SideNodes[i];\n    if (node === ZERO) {\n      bitMask.push(0);\n    } else {\n      compactedSideNodes.push(node);\n      bitMask.push(1);\n    }\n  }\n  const compactedProof = new sparseCompactMerkleProof_default(\n    compactedSideNodes,\n    proof.NonMembershipLeafData,\n    bitMask,\n    proof.SideNodes.length,\n    proof.SiblingData\n  );\n  return compactedProof;\n}\n\n// src/sparse/sparseMerkleTree.ts\nvar SparseMerkleTree = class {\n  ms;\n  root;\n  constructor() {\n    const ms = {};\n    this.ms = ms;\n    this.root = ZERO;\n    this.ms[this.root] = ZERO;\n  }\n  get(key) {\n    return this.ms[key];\n  }\n  set(key, value) {\n    this.ms[key] = value;\n  }\n  setRoot(root) {\n    this.root = root;\n  }\n  sideNodesForRoot(key, root) {\n    const sideNodes = [];\n    if (root === ZERO) {\n      return [sideNodes, ZERO, \"\", \"\"];\n    }\n    let currentData = this.get(root);\n    if (isLeaf(currentData)) {\n      return [sideNodes, root, currentData, \"\"];\n    }\n    let leftNode;\n    let rightNode;\n    let nodeHash = \"\";\n    let sideNode = \"\";\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      [leftNode, rightNode] = parseNode(currentData);\n      if (getBitAtFromMSB(key, i) === 1) {\n        sideNode = leftNode;\n        nodeHash = rightNode;\n      } else {\n        sideNode = rightNode;\n        nodeHash = leftNode;\n      }\n      sideNodes.push(sideNode);\n      if (nodeHash === ZERO) {\n        currentData = \"\";\n        break;\n      }\n      currentData = this.get(nodeHash);\n      if (isLeaf(currentData)) {\n        break;\n      }\n    }\n    const siblingData = this.get(sideNode);\n    return [reverseSideNodes(sideNodes), nodeHash, currentData, siblingData];\n  }\n  deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData) {\n    if (oldLeafHash === ZERO) {\n      return this.root;\n    }\n    const [actualPath] = parseLeaf(oldLeafData);\n    if (actualPath !== key) {\n      return this.root;\n    }\n    let currentHash = \"\";\n    let currentData = \"\";\n    let sideNode = \"\";\n    let sideNodeValue = \"\";\n    let nonPlaceholderReached = false;\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] === \"\") {\n        continue;\n      }\n      sideNode = sideNodes[i];\n      if (currentData === \"\") {\n        sideNodeValue = this.get(sideNode);\n        if (isLeaf(sideNodeValue)) {\n          currentHash = sideNode;\n          currentData = sideNode;\n          continue;\n        } else {\n          currentData = ZERO;\n          nonPlaceholderReached = true;\n        }\n      }\n      if (!nonPlaceholderReached && sideNode === ZERO) {\n        continue;\n      } else if (!nonPlaceholderReached) {\n        nonPlaceholderReached = true;\n      }\n      if (getBitAtFromMSB(key, sideNodes.length - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode2(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode2(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n    if (currentHash === \"\") {\n      currentHash = ZERO;\n    }\n    return currentHash;\n  }\n  updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData) {\n    let currentHash;\n    let currentData;\n    this.set(hash4(value), value);\n    [currentHash, currentData] = hashLeaf2(key, value);\n    this.set(currentHash, currentData);\n    currentData = currentHash;\n    let commonPrefixCount;\n    if (oldLeafHash === ZERO) {\n      commonPrefixCount = MAX_HEIGHT;\n    } else {\n      const [actualPath] = parseLeaf(oldLeafData);\n      commonPrefixCount = countCommonPrefix(key, actualPath);\n    }\n    if (commonPrefixCount !== MAX_HEIGHT) {\n      if (getBitAtFromMSB(key, commonPrefixCount) === 1) {\n        [currentHash, currentData] = hashNode2(oldLeafHash, currentData);\n      } else {\n        [currentHash, currentData] = hashNode2(currentData, oldLeafHash);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      let sideNode;\n      const offsetOfSideNodes = MAX_HEIGHT - sideNodes.length;\n      if (i - offsetOfSideNodes < 0 || sideNodes[i - offsetOfSideNodes] === \"\") {\n        if (commonPrefixCount !== MAX_HEIGHT && commonPrefixCount > MAX_HEIGHT - 1 - i) {\n          sideNode = ZERO;\n        } else {\n          continue;\n        }\n      } else {\n        sideNode = sideNodes[i - offsetOfSideNodes];\n      }\n      if (getBitAtFromMSB(key, MAX_HEIGHT - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode2(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode2(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n    return currentHash;\n  }\n  update(key, value) {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n  delete(key) {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n  prove(key) {\n    const [sideNodes, leafHash, leafData, siblingData] = this.sideNodesForRoot(key, this.root);\n    const nonEmptySideNodes = [];\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] !== \"\") {\n        nonEmptySideNodes.push(sideNodes[i]);\n      }\n    }\n    let nonMembershipLeafData = \"\";\n    if (leafHash !== ZERO) {\n      const [actualPath] = parseLeaf(leafData);\n      if (actualPath !== key) {\n        nonMembershipLeafData = leafData;\n      }\n    }\n    const proof = new sparseMerkleProof_default(nonEmptySideNodes, nonMembershipLeafData, siblingData);\n    return proof;\n  }\n  proveCompacted(key) {\n    const proof = this.prove(key);\n    const compactedProof = compactProof(proof);\n    return compactedProof;\n  }\n};\nexport {\n  SparseMerkleTree,\n  calcRoot,\n  constructTree,\n  getProof,\n  hashLeaf,\n  hashNode\n};\n//# sourceMappingURL=index.mjs.map","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/providers/chains.ts\nvar CHAIN_IDS = {\n  eth: {\n    mainnet: 1,\n    sepolia: 11155111,\n    foundry: 31337\n  },\n  fuel: {\n    devnet: 0,\n    testnet: 0,\n    mainnet: 9889\n  }\n};\n\n// src/assets/utils/network.ts\nvar getDefaultChainId = (networkType) => {\n  if (networkType === \"ethereum\") {\n    return CHAIN_IDS.eth.sepolia;\n  }\n  if (networkType === \"fuel\") {\n    return CHAIN_IDS.fuel.testnet;\n  }\n  return void 0;\n};\nvar getAssetNetwork = ({\n  asset,\n  chainId,\n  networkType\n}) => {\n  const network = asset.networks.find(\n    (item) => item.chainId === chainId && item.type === networkType\n  );\n  return network;\n};\nvar getAssetWithNetwork = ({\n  asset,\n  chainId,\n  networkType\n}) => {\n  const { networks: _, ...assetRest } = asset;\n  const chainIdToUse = chainId ?? getDefaultChainId(networkType);\n  if (chainIdToUse === void 0) {\n    return void 0;\n  }\n  const assetNetwork = getAssetNetwork({\n    asset,\n    chainId: chainIdToUse,\n    networkType\n  });\n  if (!assetNetwork) {\n    return void 0;\n  }\n  return {\n    ...assetRest,\n    ...assetNetwork\n  };\n};\nvar getAssetEth = (asset, chainId) => getAssetWithNetwork({\n  asset,\n  networkType: \"ethereum\",\n  chainId\n});\nvar getAssetFuel = (asset, chainId) => getAssetWithNetwork({\n  asset,\n  networkType: \"fuel\",\n  chainId\n});\n\n// src/assets/utils/url.ts\nvar DELIMITER_PATH = \"/\";\nvar trimRegex = /^\\/|\\/$/g;\nvar trimPath = (path = \"\") => path.replace(trimRegex, \"\");\nfunction urlJoin(baseUrl, ...paths) {\n  const hasBaseUrl = baseUrl !== null && baseUrl !== void 0;\n  const rootPath = baseUrl?.[0] === \"/\" && baseUrl.length > 1;\n  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);\n  if (rootPath && hasBaseUrl) {\n    allPaths.unshift(\"\");\n  }\n  return allPaths.join(DELIMITER_PATH);\n}\n\n// src/assets/utils/resolveIconPaths.ts\nfunction resolveIconPaths(assets2, basePath = \"./\") {\n  return assets2.map((asset) => ({\n    ...asset,\n    icon: urlJoin(basePath, asset.icon)\n  }));\n}\n\n// src/assets/utils/fuelAssetsBaseUrl.ts\nvar fuelAssetsBaseUrl = \"https://assets.fuel.network/providers/\";\n\n// src/assets/assets.ts\nvar rawAssets = [\n  {\n    name: \"Ethereum\",\n    symbol: \"ETH\",\n    icon: \"eth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.sepolia,\n        decimals: 18\n      },\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.foundry,\n        decimals: 18\n      },\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.devnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.testnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      }\n    ]\n  },\n  {\n    name: \"WETH\",\n    symbol: \"WETH\",\n    icon: \"weth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"weETH\",\n    symbol: \"weETH\",\n    icon: \"weETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rsETH\",\n    symbol: \"rsETH\",\n    icon: \"rsETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rETH\",\n    symbol: \"rETH\",\n    icon: \"reth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xae78736cd615f374d3085123a210448e74fc6393\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"wbETH\",\n    symbol: \"wbETH\",\n    icon: \"wbeth.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xa2E3356610840701BDf5611a53974510Ae27E2e1\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rstETH\",\n    symbol: \"rstETH\",\n    icon: \"rstETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7a4EffD87C2f3C55CA251080b1343b605f327E3a\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"amphrETH\",\n    symbol: \"amphrETH\",\n    icon: \"amphrETH.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x5fD13359Ba15A84B76f7F87568309040176167cd\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mBTC\",\n    symbol: \"Manta mBTC\",\n    icon: \"manta-mbtc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x4041381e947CFD3D483d67a25C6aa9Dc924250c5\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mETH\",\n    symbol: \"Manta mETH\",\n    icon: \"manta-meth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x8CdF550C04Bc9B9F10938368349C9c8051A772b6\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mUSD\",\n    symbol: \"Manta mUSD\",\n    icon: \"manta-musd.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x3f24E1d7a973867fC2A03fE199E5502514E0e11E\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"pumpBTC\",\n    symbol: \"pumpBTC\",\n    icon: \"pumpbtc.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xf469fbd2abcd6b9de8e169d128226c0fc90a012e\",\n        decimals: 8\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f\",\n        decimals: 8\n      }\n    ]\n  },\n  {\n    name: \"FBTC\",\n    symbol: \"FBTC\",\n    icon: \"fbtc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xc96de26018a54d51c097160568752c4e3bd6c364\",\n        decimals: 8\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a\",\n        decimals: 8\n      }\n    ]\n  },\n  {\n    name: \"SolvBTC\",\n    symbol: \"SolvBTC\",\n    icon: \"solvBTC.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7a56e1c57c7475ccf742a1832b028f0456652f97\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"SolvBTC.BBN\",\n    symbol: \"SolvBTC.BBN\",\n    icon: \"SolvBTC.BBN.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xd9d920aa40f578ab794426f5c90f6c731d159def\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Mantle mETH\",\n    symbol: \"Mantle mETH\",\n    icon: \"mantle-meth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"sDAI\",\n    symbol: \"sDAI\",\n    icon: \"sdai.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x83f20f44975d03b1b09e64809b757c47f942beea\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"USDT\",\n    symbol: \"USDT\",\n    icon: \"usdt.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n        decimals: 6\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e\",\n        decimals: 6\n      }\n    ]\n  },\n  {\n    name: \"USDC\",\n    symbol: \"USDC\",\n    icon: \"usdc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b\",\n        decimals: 6\n      }\n    ]\n  },\n  {\n    name: \"USDe\",\n    symbol: \"USDe\",\n    icon: \"USDe.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x4c9edd5852cd905f086c759e8383e09bff1e68b3\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"sUSDe\",\n    symbol: \"sUSDe\",\n    icon: \"sUSDe.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x9d39a5de30e57443bff2a8307a4256c8797a3497\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rsUSDe\",\n    symbol: \"rsUSDe\",\n    icon: \"rsUSDe.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"wstETH\",\n    symbol: \"wstETH\",\n    icon: \"wsteth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"ezETH\",\n    symbol: \"ezETH\",\n    icon: \"ezeth.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xbf5495Efe5DB9ce00f80364C8B423567e58d2110\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"pzETH\",\n    symbol: \"pzETH\",\n    icon: \"pzETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Re7LRT\",\n    symbol: \"Re7LRT\",\n    icon: \"Re7LRT.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"steakLRT\",\n    symbol: \"steakLRT\",\n    icon: \"steakLRT.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30\",\n        decimals: 9\n      }\n    ]\n  }\n];\nvar assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);\n\n// src/assets/asset-api.ts\nvar networks = {\n  mainnet: \"https://mainnet-explorer.fuel.network\",\n  testnet: \"https://explorer-indexer-testnet.fuel.network\"\n};\nvar request = async (url, slug) => {\n  const response = await fetch(`${url}${slug}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    }\n  });\n  try {\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\nvar buildQueryString = (parameters) => {\n  const query = new URLSearchParams();\n  Object.entries(parameters).forEach(([key, value]) => {\n    query.set(key, value.toString());\n  });\n  return query.size > 0 ? `?${query.toString()}` : \"\";\n};\nvar getAssetById = (opts) => {\n  const { network = \"mainnet\", assetId } = opts;\n  const url = networks[network];\n  return request(url, `/assets/${assetId}`);\n};\nvar getAssetsByOwner = async (opts) => {\n  const { network = \"mainnet\", owner, pagination = { last: 10 } } = opts;\n  const url = networks[network];\n  const { last } = pagination;\n  const queryString = buildQueryString({ last });\n  const response = await request(url, `/accounts/${owner}/assets${queryString}`);\n  if (!response) {\n    return { data: [], pageInfo: { count: 0 } };\n  }\n  return response;\n};\n\n// src/account.ts\nimport { UTXO_ID_LEN as UTXO_ID_LEN3 } from \"@fuel-ts/abi-coder\";\nimport { Address as Address4 } from \"@fuel-ts/address\";\nimport { randomBytes as randomBytes2 } from \"@fuel-ts/crypto\";\nimport { ErrorCode as ErrorCode18, FuelError as FuelError20 } from \"@fuel-ts/errors\";\nimport { bn as bn19 } from \"@fuel-ts/math\";\nimport { InputType as InputType8 } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify15, hexlify as hexlify16, isDefined as isDefined3 } from \"@fuel-ts/utils\";\nimport { clone as clone9 } from \"ramda\";\n\n// src/providers/coin-quantity.ts\nimport { bn } from \"@fuel-ts/math\";\nimport { hexlify } from \"@fuel-ts/utils\";\nvar coinQuantityfy = (coinQuantityLike) => {\n  let assetId;\n  let amount;\n  let max;\n  if (Array.isArray(coinQuantityLike)) {\n    amount = coinQuantityLike[0];\n    assetId = coinQuantityLike[1];\n    max = coinQuantityLike[2] ?? void 0;\n  } else {\n    amount = coinQuantityLike.amount;\n    assetId = coinQuantityLike.assetId;\n    max = coinQuantityLike.max ?? void 0;\n  }\n  const bnAmount = bn(amount);\n  return {\n    assetId: hexlify(assetId),\n    amount: bnAmount.lt(1) ? bn(1) : bnAmount,\n    max: max ? bn(max) : void 0\n  };\n};\nvar addAmountToCoinQuantities = (params) => {\n  const { amount, assetId } = params;\n  const coinQuantities = [...params.coinQuantities];\n  const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);\n  if (assetIdx !== -1) {\n    coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);\n  } else {\n    coinQuantities.push({ assetId, amount });\n  }\n  return coinQuantities;\n};\n\n// src/providers/provider.ts\nimport { Address as Address2 } from \"@fuel-ts/address\";\nimport { ErrorCode as ErrorCode16, FuelError as FuelError18 } from \"@fuel-ts/errors\";\nimport { BN as BN2, bn as bn17 } from \"@fuel-ts/math\";\nimport { InputType as InputType7, InputMessageCoder as InputMessageCoder2, TransactionCoder as TransactionCoder5 } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify12, hexlify as hexlify15, DateTime as DateTime2, isDefined as isDefined2 } from \"@fuel-ts/utils\";\nimport { checkFuelCoreVersionCompatibility, versions } from \"@fuel-ts/versions\";\nimport { equalBytes } from \"@noble/curves/abstract/utils\";\nimport { GraphQLClient } from \"graphql-request\";\nimport gql2 from \"graphql-tag\";\nimport { clone as clone8 } from \"ramda\";\n\n// src/providers/__generated__/operations.ts\nimport gql from \"graphql-tag\";\nvar SubmittedStatusFragmentDoc = gql`\n    fragment SubmittedStatusFragment on SubmittedStatus {\n  type: __typename\n  time\n}\n    `;\nvar ReceiptFragmentDoc = gql`\n    fragment receiptFragment on Receipt {\n  id\n  pc\n  is\n  to\n  toAddress\n  amount\n  assetId\n  gas\n  param1\n  param2\n  val\n  ptr\n  digest\n  reason\n  ra\n  rb\n  rc\n  rd\n  len\n  receiptType\n  result\n  gasUsed\n  data\n  sender\n  recipient\n  nonce\n  contractId\n  subId\n}\n    `;\nvar SuccessStatusFragmentDoc = gql`\n    fragment SuccessStatusFragment on SuccessStatus {\n  type: __typename\n  time\n  programState {\n    returnType\n    data\n  }\n  receipts {\n    ...receiptFragment\n  }\n  totalGas\n  totalFee\n}\n    ${ReceiptFragmentDoc}`;\nvar SuccessStatusWithBlockIdFragmentDoc = gql`\n    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {\n  ...SuccessStatusFragment\n  block {\n    id\n  }\n}\n    ${SuccessStatusFragmentDoc}`;\nvar MalleableTransactionFieldsFragmentDoc = gql`\n    fragment malleableTransactionFieldsFragment on Transaction {\n  receiptsRoot\n  inputs {\n    type: __typename\n    ... on InputCoin {\n      txPointer\n    }\n    ... on InputContract {\n      txPointer\n    }\n  }\n  outputs {\n    type: __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract\n      stateRoot\n    }\n  }\n}\n    `;\nvar FailureStatusFragmentDoc = gql`\n    fragment FailureStatusFragment on FailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  time\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nvar FailureStatusWithBlockIdFragmentDoc = gql`\n    fragment FailureStatusWithBlockIdFragment on FailureStatus {\n  ...FailureStatusFragment\n  block {\n    id\n  }\n}\n    ${FailureStatusFragmentDoc}`;\nvar SqueezedOutStatusFragmentDoc = gql`\n    fragment SqueezedOutStatusFragment on SqueezedOutStatus {\n  type: __typename\n  reason\n}\n    `;\nvar TransactionStatusSubscriptionFragmentDoc = gql`\n    fragment transactionStatusSubscriptionFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on FailureStatus {\n    ...FailureStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${MalleableTransactionFieldsFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nvar TransactionStatusFragmentDoc = gql`\n    fragment transactionStatusFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusFragment\n  }\n  ... on FailureStatus {\n    ...FailureStatusFragment\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusFragmentDoc}\n${FailureStatusFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nvar TransactionFragmentDoc = gql`\n    fragment transactionFragment on Transaction {\n  id\n  rawPayload\n  status {\n    ...transactionStatusFragment\n  }\n}\n    ${TransactionStatusFragmentDoc}`;\nvar TransactionRawPayloadFragmentDoc = gql`\n    fragment transactionRawPayloadFragment on Transaction {\n  id\n  rawPayload\n}\n    `;\nvar InputEstimatePredicatesFragmentDoc = gql`\n    fragment inputEstimatePredicatesFragment on Input {\n  ... on InputCoin {\n    predicateGasUsed\n  }\n  ... on InputMessage {\n    predicateGasUsed\n  }\n}\n    `;\nvar TransactionEstimatePredicatesFragmentDoc = gql`\n    fragment transactionEstimatePredicatesFragment on Transaction {\n  inputs {\n    ...inputEstimatePredicatesFragment\n  }\n}\n    ${InputEstimatePredicatesFragmentDoc}`;\nvar DryRunFailureStatusFragmentDoc = gql`\n    fragment dryRunFailureStatusFragment on DryRunFailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  reason\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nvar DryRunSuccessStatusFragmentDoc = gql`\n    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nvar DryRunTransactionStatusFragmentDoc = gql`\n    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {\n  ... on DryRunFailureStatus {\n    ...dryRunFailureStatusFragment\n  }\n  ... on DryRunSuccessStatus {\n    ...dryRunSuccessStatusFragment\n  }\n}\n    ${DryRunFailureStatusFragmentDoc}\n${DryRunSuccessStatusFragmentDoc}`;\nvar DryRunTransactionExecutionStatusFragmentDoc = gql`\n    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {\n  id\n  status {\n    ...dryRunTransactionStatusFragment\n  }\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${DryRunTransactionStatusFragmentDoc}\n${ReceiptFragmentDoc}`;\nvar BlockFragmentDoc = gql`\n    fragment blockFragment on Block {\n  id\n  height\n  header {\n    time\n    daHeight\n    stateTransitionBytecodeVersion\n    transactionsCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    prevRoot\n    applicationHash\n  }\n  transactions {\n    id\n  }\n}\n    `;\nvar CoinFragmentDoc = gql`\n    fragment coinFragment on Coin {\n  type: __typename\n  utxoId\n  amount\n  assetId\n  blockCreated\n  txCreatedIdx\n}\n    `;\nvar MessageCoinFragmentDoc = gql`\n    fragment messageCoinFragment on MessageCoin {\n  type: __typename\n  sender\n  recipient\n  nonce\n  amount\n  assetId\n  daHeight\n}\n    `;\nvar MessageFragmentDoc = gql`\n    fragment messageFragment on Message {\n  amount\n  sender\n  recipient\n  data\n  daHeight\n}\n    `;\nvar GetMessageFragmentDoc = gql`\n    fragment getMessageFragment on Message {\n  ...messageFragment\n  nonce\n}\n    ${MessageFragmentDoc}`;\nvar MessageProofFragmentDoc = gql`\n    fragment messageProofFragment on MessageProof {\n  messageProof {\n    proofSet\n    proofIndex\n  }\n  blockProof {\n    proofSet\n    proofIndex\n  }\n  messageBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  commitBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  sender\n  recipient\n  amount\n  data\n}\n    `;\nvar TxParametersFragmentDoc = gql`\n    fragment TxParametersFragment on TxParameters {\n  version\n  maxInputs\n  maxOutputs\n  maxWitnesses\n  maxGasPerTx\n  maxSize\n  maxBytecodeSubsections\n}\n    `;\nvar PredicateParametersFragmentDoc = gql`\n    fragment PredicateParametersFragment on PredicateParameters {\n  version\n  maxPredicateLength\n  maxPredicateDataLength\n  maxGasPerPredicate\n  maxMessageDataLength\n}\n    `;\nvar ScriptParametersFragmentDoc = gql`\n    fragment ScriptParametersFragment on ScriptParameters {\n  version\n  maxScriptLength\n  maxScriptDataLength\n}\n    `;\nvar ContractParametersFragmentDoc = gql`\n    fragment ContractParametersFragment on ContractParameters {\n  version\n  contractMaxSize\n  maxStorageSlots\n}\n    `;\nvar FeeParametersFragmentDoc = gql`\n    fragment FeeParametersFragment on FeeParameters {\n  version\n  gasPriceFactor\n  gasPerByte\n}\n    `;\nvar DependentCostFragmentDoc = gql`\n    fragment DependentCostFragment on DependentCost {\n  ... on LightOperation {\n    type: __typename\n    base\n    unitsPerGas\n  }\n  ... on HeavyOperation {\n    type: __typename\n    base\n    gasPerUnit\n  }\n}\n    `;\nvar GasCostsFragmentDoc = gql`\n    fragment GasCostsFragment on GasCosts {\n  contractRoot {\n    ...DependentCostFragment\n  }\n  stateRoot {\n    ...DependentCostFragment\n  }\n  vmInitialization {\n    ...DependentCostFragment\n  }\n  s256 {\n    ...DependentCostFragment\n  }\n  ecr1\n  newStoragePerByte\n}\n    ${DependentCostFragmentDoc}`;\nvar ConsensusParametersFragmentDoc = gql`\n    fragment consensusParametersFragment on ConsensusParameters {\n  version\n  txParams {\n    ...TxParametersFragment\n  }\n  predicateParams {\n    ...PredicateParametersFragment\n  }\n  scriptParams {\n    ...ScriptParametersFragment\n  }\n  contractParams {\n    ...ContractParametersFragment\n  }\n  feeParams {\n    ...FeeParametersFragment\n  }\n  gasCosts {\n    ...GasCostsFragment\n  }\n  baseAssetId\n  chainId\n}\n    ${TxParametersFragmentDoc}\n${PredicateParametersFragmentDoc}\n${ScriptParametersFragmentDoc}\n${ContractParametersFragmentDoc}\n${FeeParametersFragmentDoc}\n${GasCostsFragmentDoc}`;\nvar ChainInfoFragmentDoc = gql`\n    fragment chainInfoFragment on ChainInfo {\n  name\n  daHeight\n  consensusParameters {\n    ...consensusParametersFragment\n  }\n}\n    ${ConsensusParametersFragmentDoc}`;\nvar ContractBalanceFragmentDoc = gql`\n    fragment contractBalanceFragment on ContractBalance {\n  contract\n  amount\n  assetId\n}\n    `;\nvar PageInfoFragmentDoc = gql`\n    fragment pageInfoFragment on PageInfo {\n  hasPreviousPage\n  hasNextPage\n  startCursor\n  endCursor\n}\n    `;\nvar NodeInfoFragmentDoc = gql`\n    fragment nodeInfoFragment on NodeInfo {\n  utxoValidation\n  vmBacktrace\n  maxTx\n  maxDepth\n  nodeVersion\n}\n    `;\nvar RelayedTransactionStatusFragmentDoc = gql`\n    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {\n  ... on RelayedTransactionFailed {\n    blockHeight\n    failure\n  }\n}\n    `;\nvar GetVersionDocument = gql`\n    query getVersion {\n  nodeInfo {\n    nodeVersion\n  }\n}\n    `;\nvar GetNodeInfoDocument = gql`\n    query getNodeInfo {\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${NodeInfoFragmentDoc}`;\nvar GetChainDocument = gql`\n    query getChain {\n  chain {\n    ...chainInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}`;\nvar GetChainAndNodeInfoDocument = gql`\n    query getChainAndNodeInfo {\n  chain {\n    ...chainInfoFragment\n  }\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}\n${NodeInfoFragmentDoc}`;\nvar GetTransactionDocument = gql`\n    query getTransaction($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentDoc}`;\nvar GetTransactionWithReceiptsDocument = gql`\n    query getTransactionWithReceipts($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    id\n    rawPayload\n    status {\n      ... on SubmittedStatus {\n        ...SubmittedStatusFragment\n      }\n      ... on SuccessStatus {\n        ...SuccessStatusWithBlockIdFragment\n      }\n      ... on FailureStatus {\n        ...FailureStatusWithBlockIdFragment\n      }\n      ... on SqueezedOutStatus {\n        ...SqueezedOutStatusFragment\n      }\n    }\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nvar GetTransactionsDocument = gql`\n    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {\n  transactions(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        rawPayload\n      }\n    }\n    pageInfo {\n      ...pageInfoFragment\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nvar GetTransactionsByOwnerDocument = gql`\n    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  transactionsByOwner(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${TransactionFragmentDoc}`;\nvar EstimatePredicatesDocument = gql`\n    query estimatePredicates($encodedTransaction: HexString!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nvar GetLatestBlockDocument = gql`\n    query getLatestBlock {\n  chain {\n    latestBlock {\n      ...blockFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}`;\nvar GetLatestBlockHeightDocument = gql`\n    query getLatestBlockHeight {\n  chain {\n    latestBlock {\n      height\n    }\n  }\n}\n    `;\nvar GetBlockDocument = gql`\n    query getBlock($blockId: BlockId, $height: U32) {\n  block(id: $blockId, height: $height) {\n    ...blockFragment\n  }\n}\n    ${BlockFragmentDoc}`;\nvar GetBlockWithTransactionsDocument = gql`\n    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n    transactions {\n      ...transactionRawPayloadFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}\n${TransactionRawPayloadFragmentDoc}`;\nvar GetBlocksDocument = gql`\n    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {\n  blocks(after: $after, before: $before, first: $first, last: $last) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...blockFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${BlockFragmentDoc}`;\nvar GetCoinDocument = gql`\n    query getCoin($coinId: UtxoId!) {\n  coin(utxoId: $coinId) {\n    ...coinFragment\n    owner\n  }\n}\n    ${CoinFragmentDoc}`;\nvar GetCoinsDocument = gql`\n    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  coins(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...coinFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${CoinFragmentDoc}`;\nvar GetCoinsToSpendDocument = gql`\n    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {\n  coinsToSpend(\n    owner: $owner\n    queryPerAsset: $queryPerAsset\n    excludedIds: $excludedIds\n  ) {\n    ...coinFragment\n    ...messageCoinFragment\n  }\n}\n    ${CoinFragmentDoc}\n${MessageCoinFragmentDoc}`;\nvar GetContractDocument = gql`\n    query getContract($contractId: ContractId!) {\n  contract(id: $contractId) {\n    bytecode\n    id\n  }\n}\n    `;\nvar GetContractBalanceDocument = gql`\n    query getContractBalance($contract: ContractId!, $asset: AssetId!) {\n  contractBalance(contract: $contract, asset: $asset) {\n    ...contractBalanceFragment\n  }\n}\n    ${ContractBalanceFragmentDoc}`;\nvar GetBalanceDocument = gql`\n    query getBalance($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amount\n  }\n}\n    `;\nvar GetLatestGasPriceDocument = gql`\n    query getLatestGasPrice {\n  latestGasPrice {\n    gasPrice\n  }\n}\n    `;\nvar EstimateGasPriceDocument = gql`\n    query estimateGasPrice($blockHorizon: U32!) {\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    `;\nvar GetBalancesDocument = gql`\n    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    edges {\n      node {\n        assetId\n        amount\n      }\n    }\n  }\n}\n    `;\nvar GetMessagesDocument = gql`\n    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  messages(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...getMessageFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${GetMessageFragmentDoc}`;\nvar DaCompressedBlockDocument = gql`\n    query daCompressedBlock($height: U32!) {\n  daCompressedBlock(height: $height) {\n    bytes\n  }\n}\n    `;\nvar GetMessageProofDocument = gql`\n    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {\n  messageProof(\n    transactionId: $transactionId\n    nonce: $nonce\n    commitBlockId: $commitBlockId\n    commitBlockHeight: $commitBlockHeight\n  ) {\n    ...messageProofFragment\n  }\n}\n    ${MessageProofFragmentDoc}`;\nvar GetMessageStatusDocument = gql`\n    query getMessageStatus($nonce: Nonce!) {\n  messageStatus(nonce: $nonce) {\n    state\n  }\n}\n    `;\nvar GetRelayedTransactionStatusDocument = gql`\n    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {\n  relayedTransactionStatus(id: $relayedTransactionId) {\n    ...relayedTransactionStatusFragment\n  }\n}\n    ${RelayedTransactionStatusFragmentDoc}`;\nvar DryRunDocument = gql`\n    mutation dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {\n  dryRun(\n    txs: $encodedTransactions\n    utxoValidation: $utxoValidation\n    gasPrice: $gasPrice\n  ) {\n    ...dryRunTransactionExecutionStatusFragment\n  }\n}\n    ${DryRunTransactionExecutionStatusFragmentDoc}`;\nvar SubmitDocument = gql`\n    mutation submit($encodedTransaction: HexString!) {\n  submit(tx: $encodedTransaction) {\n    id\n  }\n}\n    `;\nvar ProduceBlocksDocument = gql`\n    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {\n  produceBlocks(\n    blocksToProduce: $blocksToProduce\n    startTimestamp: $startTimestamp\n  )\n}\n    `;\nvar GetMessageByNonceDocument = gql`\n    query getMessageByNonce($nonce: Nonce!) {\n  message(nonce: $nonce) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentDoc}`;\nvar IsUserAccountDocument = gql`\n    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {\n  blob(id: $blobId) {\n    id\n  }\n  contract(id: $contractId) {\n    id\n  }\n  transaction(id: $transactionId) {\n    id\n  }\n}\n    `;\nvar GetConsensusParametersVersionDocument = gql`\n    query getConsensusParametersVersion {\n  chain {\n    latestBlock {\n      header {\n        consensusParametersVersion\n      }\n    }\n  }\n}\n    `;\nvar SubmitAndAwaitStatusDocument = gql`\n    subscription submitAndAwaitStatus($encodedTransaction: HexString!) {\n  submitAndAwaitStatus(tx: $encodedTransaction) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nvar StatusChangeDocument = gql`\n    subscription statusChange($transactionId: TransactionId!) {\n  statusChange(id: $transactionId) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nfunction getSdk(requester) {\n  return {\n    getVersion(variables, options) {\n      return requester(GetVersionDocument, variables, options);\n    },\n    getNodeInfo(variables, options) {\n      return requester(GetNodeInfoDocument, variables, options);\n    },\n    getChain(variables, options) {\n      return requester(GetChainDocument, variables, options);\n    },\n    getChainAndNodeInfo(variables, options) {\n      return requester(GetChainAndNodeInfoDocument, variables, options);\n    },\n    getTransaction(variables, options) {\n      return requester(GetTransactionDocument, variables, options);\n    },\n    getTransactionWithReceipts(variables, options) {\n      return requester(GetTransactionWithReceiptsDocument, variables, options);\n    },\n    getTransactions(variables, options) {\n      return requester(GetTransactionsDocument, variables, options);\n    },\n    getTransactionsByOwner(variables, options) {\n      return requester(GetTransactionsByOwnerDocument, variables, options);\n    },\n    estimatePredicates(variables, options) {\n      return requester(EstimatePredicatesDocument, variables, options);\n    },\n    getLatestBlock(variables, options) {\n      return requester(GetLatestBlockDocument, variables, options);\n    },\n    getLatestBlockHeight(variables, options) {\n      return requester(GetLatestBlockHeightDocument, variables, options);\n    },\n    getBlock(variables, options) {\n      return requester(GetBlockDocument, variables, options);\n    },\n    getBlockWithTransactions(variables, options) {\n      return requester(GetBlockWithTransactionsDocument, variables, options);\n    },\n    getBlocks(variables, options) {\n      return requester(GetBlocksDocument, variables, options);\n    },\n    getCoin(variables, options) {\n      return requester(GetCoinDocument, variables, options);\n    },\n    getCoins(variables, options) {\n      return requester(GetCoinsDocument, variables, options);\n    },\n    getCoinsToSpend(variables, options) {\n      return requester(GetCoinsToSpendDocument, variables, options);\n    },\n    getContract(variables, options) {\n      return requester(GetContractDocument, variables, options);\n    },\n    getContractBalance(variables, options) {\n      return requester(GetContractBalanceDocument, variables, options);\n    },\n    getBalance(variables, options) {\n      return requester(GetBalanceDocument, variables, options);\n    },\n    getLatestGasPrice(variables, options) {\n      return requester(GetLatestGasPriceDocument, variables, options);\n    },\n    estimateGasPrice(variables, options) {\n      return requester(EstimateGasPriceDocument, variables, options);\n    },\n    getBalances(variables, options) {\n      return requester(GetBalancesDocument, variables, options);\n    },\n    getMessages(variables, options) {\n      return requester(GetMessagesDocument, variables, options);\n    },\n    daCompressedBlock(variables, options) {\n      return requester(DaCompressedBlockDocument, variables, options);\n    },\n    getMessageProof(variables, options) {\n      return requester(GetMessageProofDocument, variables, options);\n    },\n    getMessageStatus(variables, options) {\n      return requester(GetMessageStatusDocument, variables, options);\n    },\n    getRelayedTransactionStatus(variables, options) {\n      return requester(GetRelayedTransactionStatusDocument, variables, options);\n    },\n    dryRun(variables, options) {\n      return requester(DryRunDocument, variables, options);\n    },\n    submit(variables, options) {\n      return requester(SubmitDocument, variables, options);\n    },\n    produceBlocks(variables, options) {\n      return requester(ProduceBlocksDocument, variables, options);\n    },\n    getMessageByNonce(variables, options) {\n      return requester(GetMessageByNonceDocument, variables, options);\n    },\n    isUserAccount(variables, options) {\n      return requester(IsUserAccountDocument, variables, options);\n    },\n    getConsensusParametersVersion(variables, options) {\n      return requester(GetConsensusParametersVersionDocument, variables, options);\n    },\n    submitAndAwaitStatus(variables, options) {\n      return requester(SubmitAndAwaitStatusDocument, variables, options);\n    },\n    statusChange(variables, options) {\n      return requester(StatusChangeDocument, variables, options);\n    }\n  };\n}\n\n// src/providers/fuel-graphql-subscriber.ts\nimport { ErrorCode as ErrorCode2, FuelError as FuelError2 } from \"@fuel-ts/errors\";\nimport { print } from \"graphql\";\n\n// src/providers/utils/handle-gql-error-message.ts\nimport { ErrorCode, FuelError } from \"@fuel-ts/errors\";\nvar mapGqlErrorMessage = (error) => {\n  switch (error.message) {\n    case \"not enough coins to fit the target\" /* NOT_ENOUGH_COINS */:\n      return new FuelError(\n        ErrorCode.NOT_ENOUGH_FUNDS,\n        `The account(s) sending the transaction don't have enough funds to cover the transaction.`,\n        {},\n        error\n      );\n    case \"max number of coins is reached while trying to fit the target\" /* MAX_COINS_REACHED */:\n      return new FuelError(\n        ErrorCode.MAX_COINS_REACHED,\n        \"The account retrieving coins has exceeded the maximum number of coins per asset. Please consider combining your coins into a single UTXO.\",\n        {},\n        error\n      );\n    default:\n      return new FuelError(ErrorCode.INVALID_REQUEST, error.message, {}, error);\n  }\n};\nvar mapGqlErrorWithIncompatibleNodeVersion = (error, incompatibleNodeVersionMessage) => {\n  if (!incompatibleNodeVersionMessage) {\n    return error;\n  }\n  return new FuelError(\n    error.code,\n    `${error.message}\n\n${incompatibleNodeVersionMessage}`,\n    error.metadata,\n    error.rawError\n  );\n};\nvar assertGqlResponseHasNoErrors = (errors, incompatibleNodeVersionMessage = false) => {\n  if (!Array.isArray(errors)) {\n    return;\n  }\n  const mappedErrors = errors.map(mapGqlErrorMessage);\n  if (mappedErrors.length === 1) {\n    throw mapGqlErrorWithIncompatibleNodeVersion(mappedErrors[0], incompatibleNodeVersionMessage);\n  }\n  const errorMessage = mappedErrors.map((err) => err.message).join(\"\\n\");\n  throw mapGqlErrorWithIncompatibleNodeVersion(\n    new FuelError(ErrorCode.INVALID_REQUEST, errorMessage, {}, mappedErrors),\n    incompatibleNodeVersionMessage\n  );\n};\n\n// src/providers/fuel-graphql-subscriber.ts\nvar _FuelGraphqlSubscriber = class {\n  constructor(stream) {\n    this.stream = stream;\n  }\n  static async create(options) {\n    const { url, query, variables, fetchFn } = options;\n    const response = await fetchFn(`${url}-sub`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: print(query),\n        variables\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"text/event-stream\"\n      }\n    });\n    const [errorReader, resultReader] = response.body.tee().map((stream) => stream.getReader());\n    await new _FuelGraphqlSubscriber(errorReader).next();\n    return new _FuelGraphqlSubscriber(resultReader);\n  }\n  events = [];\n  parsingLeftover = \"\";\n  async next() {\n    while (true) {\n      if (this.events.length > 0) {\n        const { data, errors } = this.events.shift();\n        assertGqlResponseHasNoErrors(errors, _FuelGraphqlSubscriber.incompatibleNodeVersionMessage);\n        return { value: data, done: false };\n      }\n      const { value, done } = await this.stream.read();\n      if (done) {\n        return { value, done };\n      }\n      const decoded = _FuelGraphqlSubscriber.textDecoder.decode(value).replace(\":keep-alive-text\\n\\n\", \"\");\n      if (decoded === \"\") {\n        continue;\n      }\n      const text = `${this.parsingLeftover}${decoded}`;\n      const regex = /data:.*\\n\\n/g;\n      const matches = [...text.matchAll(regex)].flatMap((match) => match);\n      matches.forEach((match) => {\n        try {\n          this.events.push(JSON.parse(match.replace(/^data:/, \"\")));\n        } catch (e) {\n          throw new FuelError2(\n            ErrorCode2.STREAM_PARSING_ERROR,\n            `Error while parsing stream data response: ${text}`\n          );\n        }\n      });\n      this.parsingLeftover = text.replace(matches.join(), \"\");\n    }\n  }\n  /**\n   * Gets called when `break` is called in a `for-await-of` loop.\n   */\n  return() {\n    return Promise.resolve({ done: true, value: void 0 });\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n};\nvar FuelGraphqlSubscriber = _FuelGraphqlSubscriber;\n__publicField(FuelGraphqlSubscriber, \"incompatibleNodeVersionMessage\", false);\n__publicField(FuelGraphqlSubscriber, \"textDecoder\", new TextDecoder());\n\n// src/providers/resource-cache.ts\nimport { ErrorCode as ErrorCode3, FuelError as FuelError3 } from \"@fuel-ts/errors\";\nimport { hexlify as hexlify2 } from \"@fuel-ts/utils\";\nvar cache = /* @__PURE__ */ new Map();\nvar ResourceCache = class {\n  ttl;\n  constructor(ttl) {\n    this.ttl = ttl;\n    if (typeof ttl !== \"number\" || this.ttl <= 0) {\n      throw new FuelError3(\n        ErrorCode3.INVALID_TTL,\n        `Invalid TTL: ${this.ttl}. Use a value greater than zero.`\n      );\n    }\n  }\n  // Add resources to the cache\n  set(transactionId, resources) {\n    const currentTime = Date.now();\n    const existingResources = cache.get(transactionId) || {\n      utxos: /* @__PURE__ */ new Set(),\n      messages: /* @__PURE__ */ new Set(),\n      timestamp: currentTime\n    };\n    resources.utxos.forEach((utxo) => existingResources.utxos.add(hexlify2(utxo)));\n    resources.messages.forEach((message) => existingResources.messages.add(hexlify2(message)));\n    cache.set(transactionId, existingResources);\n  }\n  // Remove resources from the cache for a given transaction ID\n  unset(transactionId) {\n    cache.delete(transactionId);\n  }\n  // Get all cached resources and remove expired ones\n  getActiveData() {\n    const allResources = { utxos: [], messages: [] };\n    const currentTime = Date.now();\n    cache.forEach((resource, transactionId) => {\n      if (currentTime - resource.timestamp < this.ttl) {\n        allResources.utxos.push(...resource.utxos);\n        allResources.messages.push(...resource.messages);\n      } else {\n        cache.delete(transactionId);\n      }\n    });\n    return allResources;\n  }\n  // Check if a UTXO ID or message nonce is already cached and not expired\n  isCached(key) {\n    const currentTime = Date.now();\n    for (const [transactionId, resourceData] of cache.entries()) {\n      if (currentTime - resourceData.timestamp > this.ttl) {\n        cache.delete(transactionId);\n      } else if (resourceData.utxos.has(key) || resourceData.messages.has(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  clear() {\n    cache.clear();\n  }\n};\n\n// src/providers/transaction-request/input.ts\nimport { BYTES_32, UTXO_ID_LEN } from \"@fuel-ts/abi-coder\";\nimport { ZeroBytes32 } from \"@fuel-ts/address/configs\";\nimport { ErrorCode as ErrorCode4, FuelError as FuelError4 } from \"@fuel-ts/errors\";\nimport { bn as bn2, toNumber } from \"@fuel-ts/math\";\nimport { InputType } from \"@fuel-ts/transactions\";\nimport { arrayify, hexlify as hexlify3 } from \"@fuel-ts/utils\";\nvar inputify = (value) => {\n  const { type } = value;\n  switch (value.type) {\n    case InputType.Coin: {\n      const predicate = arrayify(value.predicate ?? \"0x\");\n      const predicateData = arrayify(value.predicateData ?? \"0x\");\n      return {\n        type: InputType.Coin,\n        txID: hexlify3(arrayify(value.id).slice(0, BYTES_32)),\n        outputIndex: toNumber(arrayify(value.id).slice(BYTES_32, UTXO_ID_LEN)),\n        owner: hexlify3(value.owner),\n        amount: bn2(value.amount),\n        assetId: hexlify3(value.assetId),\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16))\n        },\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn2(value.predicateGasUsed),\n        predicateLength: bn2(predicate.length),\n        predicateDataLength: bn2(predicateData.length),\n        predicate: hexlify3(predicate),\n        predicateData: hexlify3(predicateData)\n      };\n    }\n    case InputType.Contract: {\n      return {\n        type: InputType.Contract,\n        txID: ZeroBytes32,\n        outputIndex: 0,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16))\n        },\n        contractID: hexlify3(value.contractId)\n      };\n    }\n    case InputType.Message: {\n      const predicate = arrayify(value.predicate ?? \"0x\");\n      const predicateData = arrayify(value.predicateData ?? \"0x\");\n      const data = arrayify(value.data ?? \"0x\");\n      return {\n        type: InputType.Message,\n        sender: hexlify3(value.sender),\n        recipient: hexlify3(value.recipient),\n        amount: bn2(value.amount),\n        nonce: hexlify3(value.nonce),\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn2(value.predicateGasUsed),\n        predicateLength: bn2(predicate.length),\n        predicateDataLength: bn2(predicateData.length),\n        predicate: hexlify3(predicate),\n        predicateData: hexlify3(predicateData),\n        data: hexlify3(data),\n        dataLength: data.length\n      };\n    }\n    default: {\n      throw new FuelError4(\n        ErrorCode4.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction input type: ${type}.`\n      );\n    }\n  }\n};\n\n// src/providers/transaction-request/output.ts\nimport { ZeroBytes32 as ZeroBytes322 } from \"@fuel-ts/address/configs\";\nimport { ErrorCode as ErrorCode5, FuelError as FuelError5 } from \"@fuel-ts/errors\";\nimport { bn as bn3 } from \"@fuel-ts/math\";\nimport { OutputType } from \"@fuel-ts/transactions\";\nimport { hexlify as hexlify4 } from \"@fuel-ts/utils\";\nvar outputify = (value) => {\n  const { type } = value;\n  switch (type) {\n    case OutputType.Coin: {\n      return {\n        type: OutputType.Coin,\n        to: hexlify4(value.to),\n        amount: bn3(value.amount),\n        assetId: hexlify4(value.assetId)\n      };\n    }\n    case OutputType.Contract: {\n      return {\n        type: OutputType.Contract,\n        inputIndex: value.inputIndex,\n        balanceRoot: ZeroBytes322,\n        stateRoot: ZeroBytes322\n      };\n    }\n    case OutputType.Change: {\n      return {\n        type: OutputType.Change,\n        to: hexlify4(value.to),\n        amount: bn3(0),\n        assetId: hexlify4(value.assetId)\n      };\n    }\n    case OutputType.Variable: {\n      return {\n        type: OutputType.Variable,\n        to: ZeroBytes322,\n        amount: bn3(0),\n        assetId: ZeroBytes322\n      };\n    }\n    case OutputType.ContractCreated: {\n      return {\n        type: OutputType.ContractCreated,\n        contractId: hexlify4(value.contractId),\n        stateRoot: hexlify4(value.stateRoot)\n      };\n    }\n    default: {\n      throw new FuelError5(\n        ErrorCode5.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction output type: ${type}.`\n      );\n    }\n  }\n};\n\n// src/providers/transaction-request/transaction-request.ts\nimport { UTXO_ID_LEN as UTXO_ID_LEN2 } from \"@fuel-ts/abi-coder\";\nimport { Address, addressify } from \"@fuel-ts/address\";\nimport { ZeroBytes32 as ZeroBytes324 } from \"@fuel-ts/address/configs\";\nimport { randomBytes } from \"@fuel-ts/crypto\";\nimport { FuelError as FuelError10 } from \"@fuel-ts/errors\";\nimport { bn as bn8 } from \"@fuel-ts/math\";\nimport {\n  PolicyType,\n  TransactionCoder,\n  InputType as InputType3,\n  OutputType as OutputType3,\n  TransactionType\n} from \"@fuel-ts/transactions\";\nimport { concat, hexlify as hexlify8, isDefined } from \"@fuel-ts/utils\";\n\n// src/providers/message.ts\nvar isMessageCoin = (message) => !(\"data\" in message);\n\n// src/providers/resource.ts\nvar isRawCoin = (resource) => \"utxoId\" in resource;\nvar isRawMessage = (resource) => \"recipient\" in resource;\nvar isCoin = (resource) => \"id\" in resource;\nvar isMessage = (resource) => \"recipient\" in resource;\n\n// src/providers/utils/receipts.ts\nimport { ZeroBytes32 as ZeroBytes323 } from \"@fuel-ts/address/configs\";\nimport { ErrorCode as ErrorCode6, FuelError as FuelError6 } from \"@fuel-ts/errors\";\nimport { bn as bn4 } from \"@fuel-ts/math\";\nimport { getMintedAssetId, InputMessageCoder, ReceiptType } from \"@fuel-ts/transactions\";\nimport { FAILED_TRANSFER_TO_ADDRESS_SIGNAL } from \"@fuel-ts/transactions/configs\";\nimport { arrayify as arrayify2, hexlify as hexlify5 } from \"@fuel-ts/utils\";\nvar doesReceiptHaveMissingOutputVariables = (receipt) => receipt.type === ReceiptType.Revert && receipt.val.toString(\"hex\") === FAILED_TRANSFER_TO_ADDRESS_SIGNAL;\nvar doesReceiptHaveMissingContractId = (receipt) => receipt.type === ReceiptType.Panic && receipt.contractId !== \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nvar getReceiptsWithMissingData = (receipts) => receipts.reduce(\n  (memo, receipt) => {\n    if (doesReceiptHaveMissingOutputVariables(receipt)) {\n      memo.missingOutputVariables.push(receipt);\n    }\n    if (doesReceiptHaveMissingContractId(receipt)) {\n      memo.missingOutputContractIds.push(receipt);\n    }\n    return memo;\n  },\n  {\n    missingOutputVariables: [],\n    missingOutputContractIds: []\n  }\n);\nvar hexOrZero = (hex) => hex || ZeroBytes323;\nfunction assembleReceiptByType(receipt) {\n  const { receiptType } = receipt;\n  switch (receiptType) {\n    case \"CALL\" /* Call */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const callReceipt = {\n        type: ReceiptType.Call,\n        id,\n        to: hexOrZero(receipt?.to),\n        amount: bn4(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        gas: bn4(receipt.gas),\n        param1: bn4(receipt.param1),\n        param2: bn4(receipt.param2),\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is)\n      };\n      return callReceipt;\n    }\n    case \"RETURN\" /* Return */: {\n      const returnReceipt = {\n        type: ReceiptType.Return,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn4(receipt.val),\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is)\n      };\n      return returnReceipt;\n    }\n    case \"RETURN_DATA\" /* ReturnData */: {\n      const returnDataReceipt = {\n        type: ReceiptType.ReturnData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ptr: bn4(receipt.ptr),\n        len: bn4(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn4(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn4(receipt.is)\n      };\n      return returnDataReceipt;\n    }\n    case \"PANIC\" /* Panic */: {\n      const panicReceipt = {\n        type: ReceiptType.Panic,\n        id: hexOrZero(receipt.id),\n        reason: bn4(receipt.reason),\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is),\n        contractId: hexOrZero(receipt.contractId)\n      };\n      return panicReceipt;\n    }\n    case \"REVERT\" /* Revert */: {\n      const revertReceipt = {\n        type: ReceiptType.Revert,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn4(receipt.ra),\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is)\n      };\n      return revertReceipt;\n    }\n    case \"LOG\" /* Log */: {\n      const ra = bn4(receipt.ra);\n      const rb = bn4(receipt.rb);\n      const rc = bn4(receipt.rc);\n      const rd = bn4(receipt.rd);\n      const logReceipt = {\n        type: ReceiptType.Log,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        rc,\n        rd,\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is)\n      };\n      return logReceipt;\n    }\n    case \"LOG_DATA\" /* LogData */: {\n      const ra = bn4(receipt.ra);\n      const rb = bn4(receipt.rb);\n      const logDataReceipt = {\n        type: ReceiptType.LogData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        ptr: bn4(receipt.ptr),\n        len: bn4(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn4(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn4(receipt.is)\n      };\n      return logDataReceipt;\n    }\n    case \"TRANSFER\" /* Transfer */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferReceipt = {\n        type: ReceiptType.Transfer,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt?.to),\n        amount: bn4(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is)\n      };\n      return transferReceipt;\n    }\n    case \"TRANSFER_OUT\" /* TransferOut */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferOutReceipt = {\n        type: ReceiptType.TransferOut,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt.to),\n        amount: bn4(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is)\n      };\n      return transferOutReceipt;\n    }\n    case \"SCRIPT_RESULT\" /* ScriptResult */: {\n      const scriptResultReceipt = {\n        type: ReceiptType.ScriptResult,\n        result: bn4(receipt.result),\n        gasUsed: bn4(receipt.gasUsed)\n      };\n      return scriptResultReceipt;\n    }\n    case \"MESSAGE_OUT\" /* MessageOut */: {\n      const sender = hexOrZero(receipt.sender);\n      const recipient = hexOrZero(receipt.recipient);\n      const nonce = hexOrZero(receipt.nonce);\n      const amount = bn4(receipt.amount);\n      const data = receipt.data ? arrayify2(receipt.data) : Uint8Array.from([]);\n      const digest = hexOrZero(receipt.digest);\n      const len = bn4(receipt.len).toNumber();\n      const messageId = InputMessageCoder.getMessageId({\n        sender,\n        recipient,\n        nonce,\n        amount,\n        data: hexlify5(data)\n      });\n      const receiptMessageOut = {\n        type: ReceiptType.MessageOut,\n        sender,\n        recipient,\n        amount,\n        nonce,\n        len,\n        data,\n        digest,\n        messageId\n      };\n      return receiptMessageOut;\n    }\n    case \"MINT\" /* Mint */: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n      const mintReceipt = {\n        type: ReceiptType.Mint,\n        subId,\n        contractId,\n        assetId,\n        val: bn4(receipt.val),\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is)\n      };\n      return mintReceipt;\n    }\n    case \"BURN\" /* Burn */: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n      const burnReceipt = {\n        type: ReceiptType.Burn,\n        subId,\n        contractId,\n        assetId,\n        val: bn4(receipt.val),\n        pc: bn4(receipt.pc),\n        is: bn4(receipt.is)\n      };\n      return burnReceipt;\n    }\n    default:\n      throw new FuelError6(ErrorCode6.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);\n  }\n}\n\n// src/providers/utils/block-explorer.ts\nimport { ErrorCode as ErrorCode7, FuelError as FuelError7 } from \"@fuel-ts/errors\";\nvar DEFAULT_BLOCK_EXPLORER_URL = \"https://app.fuel.network\";\nvar getPathFromInput = (key, value) => {\n  const pathMap = {\n    address: `address`,\n    txId: `transaction`,\n    blockNumber: `block`\n  };\n  const path = pathMap[key] || key;\n  return `${path}/${value}`;\n};\nvar buildBlockExplorerUrl = (options = {}) => {\n  const { blockExplorerUrl, path, providerUrl, address, txId, blockNumber } = options;\n  const explorerUrl = blockExplorerUrl || DEFAULT_BLOCK_EXPLORER_URL;\n  const customInputParams = [\n    {\n      key: \"address\",\n      value: address\n    },\n    {\n      key: \"txId\",\n      value: txId\n    },\n    {\n      key: \"blockNumber\",\n      value: blockNumber\n    }\n  ];\n  const definedValues = customInputParams.filter((param) => !!param.value).map(({ key, value }) => ({\n    key,\n    value\n  }));\n  const hasAnyDefinedValues = definedValues.length > 0;\n  if (definedValues.length > 1) {\n    throw new FuelError7(\n      ErrorCode7.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `Only one of the following can be passed in to buildBlockExplorerUrl: ${customInputParams.map((param) => param.key).join(\", \")}.`\n    );\n  }\n  if (path && definedValues.length > 0) {\n    const inputKeys = customInputParams.map(({ key }) => key).join(\", \");\n    throw new FuelError7(\n      ErrorCode7.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `You cannot pass in a path to 'buildBlockExplorerUrl' along with any of the following: ${inputKeys}.`\n    );\n  }\n  const pathGeneratedFromInputParams = hasAnyDefinedValues ? getPathFromInput(\n    definedValues[0].key,\n    definedValues[0].value\n  ) : \"\";\n  const trimSlashes = /^\\/|\\/$/gm;\n  const cleanPath = path ? path.replace(trimSlashes, \"\") : pathGeneratedFromInputParams;\n  const cleanBlockExplorerUrl = explorerUrl.replace(trimSlashes, \"\");\n  const cleanProviderUrl = providerUrl?.replace(trimSlashes, \"\");\n  const encodedProviderUrl = cleanProviderUrl ? encodeURIComponent(cleanProviderUrl) : void 0;\n  const protocol = cleanBlockExplorerUrl.match(/^https?:\\/\\//) ? \"\" : \"https://\";\n  const providerUrlProtocol = cleanProviderUrl?.match(/^https?:\\/\\//) ? \"\" : \"https://\";\n  const url = `${protocol}${cleanBlockExplorerUrl}/${cleanPath}${encodedProviderUrl ? `?providerUrl=${providerUrlProtocol}${encodedProviderUrl}` : \"\"}`;\n  return url;\n};\n\n// src/providers/utils/gas.ts\nimport { bn as bn5 } from \"@fuel-ts/math\";\nimport { ReceiptType as ReceiptType2 } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify3 } from \"@fuel-ts/utils\";\nvar getGasUsedFromReceipts = (receipts) => {\n  const scriptResult = receipts.filter(\n    (receipt) => receipt.type === ReceiptType2.ScriptResult\n  );\n  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), bn5(0));\n  return gasUsed;\n};\nfunction resolveGasDependentCosts(byteSize, gasDependentCost) {\n  const base = bn5(gasDependentCost.base);\n  let dependentValue = bn5(0);\n  if (\"unitsPerGas\" in gasDependentCost) {\n    dependentValue = bn5(byteSize).div(bn5(gasDependentCost.unitsPerGas));\n  } else {\n    dependentValue = bn5(byteSize).mul(bn5(gasDependentCost.gasPerUnit));\n  }\n  return base.add(dependentValue);\n}\nfunction gasUsedByInputs(inputs, txBytesSize, gasCosts) {\n  const witnessCache = [];\n  const chargeableInputs = inputs.filter((input) => {\n    const isCoinOrMessage = \"owner\" in input || \"sender\" in input;\n    if (isCoinOrMessage) {\n      if (\"predicate\" in input && input.predicate && input.predicate !== \"0x\") {\n        return true;\n      }\n      if (!witnessCache.includes(input.witnessIndex)) {\n        witnessCache.push(input.witnessIndex);\n        return true;\n      }\n    }\n    return false;\n  });\n  const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const totalGas = chargeableInputs.reduce((total, input) => {\n    if (\"predicate\" in input && input.predicate && input.predicate !== \"0x\") {\n      return total.add(\n        vmInitializationCost.add(resolveGasDependentCosts(arrayify3(input.predicate).length, gasCosts.contractRoot)).add(bn5(input.predicateGasUsed))\n      );\n    }\n    return total.add(gasCosts.ecr1);\n  }, bn5(0));\n  return totalGas;\n}\nfunction getMinGas(params) {\n  const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;\n  const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const bytesGas = bn5(txBytesSize).mul(gasPerByte);\n  const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);\n  const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();\n  return minGas;\n}\nfunction getMaxGas(params) {\n  const {\n    gasPerByte,\n    witnessesLength,\n    witnessLimit,\n    minGas,\n    gasLimit = bn5(0),\n    maxGasPerTx\n  } = params;\n  let remainingAllowedWitnessGas = bn5(0);\n  if (witnessLimit?.gt(0) && witnessLimit.gte(witnessesLength)) {\n    remainingAllowedWitnessGas = bn5(witnessLimit).sub(witnessesLength).mul(gasPerByte);\n  }\n  const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);\n  return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;\n}\nfunction calculateMetadataGasForTxCreate({\n  gasCosts,\n  stateRootSize,\n  txBytesSize,\n  contractBytesSize\n}) {\n  const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);\n  const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);\n  const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const contractIdInputSize = bn5(4 + 32 + 32 + 32);\n  const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);\n  const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);\n  return metadataGas.maxU64();\n}\nfunction calculateMetadataGasForTxScript({\n  gasCosts,\n  txBytesSize\n}) {\n  return resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n}\nfunction calculateMetadataGasForTxBlob({\n  gasCosts,\n  txBytesSize,\n  witnessBytesSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);\n  return txId.add(blobLen);\n}\nfunction calculateMetadataGasForTxUpgrade({\n  gasCosts,\n  txBytesSize,\n  consensusSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  if (consensusSize) {\n    const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);\n    txId.add(consensusLen);\n  }\n  return txId;\n}\nfunction calculateMetadataGasForTxUpload({\n  gasCosts,\n  txBytesSize,\n  subsectionSize,\n  subsectionsSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);\n  txId.add(subsectionLen);\n  const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);\n  txId.add(subsectionsLen);\n  return txId;\n}\nfunction calculateMinGasForTxUpload({\n  gasCosts,\n  baseMinGas,\n  subsectionSize\n}) {\n  const additionalStoragePerByte = bn5(gasCosts.newStoragePerByte).mul(subsectionSize);\n  return bn5(baseMinGas).add(additionalStoragePerByte);\n}\nvar calculateGasFee = (params) => {\n  const { gas, gasPrice, priceFactor, tip } = params;\n  return gas.mul(gasPrice).div(priceFactor).add(bn5(tip));\n};\n\n// src/providers/utils/json.ts\nimport { hexlify as hexlify6 } from \"@fuel-ts/utils\";\nimport { clone } from \"ramda\";\nfunction normalize(object) {\n  Object.keys(object).forEach((key) => {\n    switch (object[key]?.constructor.name) {\n      case \"Uint8Array\":\n        object[key] = hexlify6(object[key]);\n        break;\n      case \"Array\":\n        object[key] = normalize(object[key]);\n        break;\n      case \"BN\":\n        object[key] = object[key].toHex();\n        break;\n      case \"Address\":\n        object[key] = object[key].toB256();\n        break;\n      case \"Object\":\n        object[key] = normalize(object[key]);\n        break;\n      default:\n        break;\n    }\n  });\n  return object;\n}\nfunction normalizeJSON(root) {\n  return normalize(clone(root));\n}\n\n// src/providers/utils/extract-tx-error.ts\nimport { ErrorCode as ErrorCode8, FuelError as FuelError8 } from \"@fuel-ts/errors\";\nimport { bn as bn6 } from \"@fuel-ts/math\";\nimport { ReceiptType as ReceiptType3 } from \"@fuel-ts/transactions\";\nimport {\n  FAILED_REQUIRE_SIGNAL,\n  FAILED_ASSERT_EQ_SIGNAL,\n  FAILED_ASSERT_NE_SIGNAL,\n  FAILED_ASSERT_SIGNAL,\n  FAILED_TRANSFER_TO_ADDRESS_SIGNAL as FAILED_TRANSFER_TO_ADDRESS_SIGNAL2,\n  PANIC_REASONS,\n  PANIC_DOC_URL\n} from \"@fuel-ts/transactions/configs\";\nvar assemblePanicError = (statusReason, metadata) => {\n  let errorMessage = `The transaction reverted with reason: \"${statusReason}\".`;\n  if (PANIC_REASONS.includes(statusReason)) {\n    errorMessage = `${errorMessage}\n\nYou can read more about this error at:\n\n${PANIC_DOC_URL}#variant.${statusReason}`;\n  }\n  return new FuelError8(ErrorCode8.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason: statusReason\n  });\n};\nvar stringify = (obj) => JSON.stringify(obj, null, 2);\nvar assembleRevertError = (receipts, logs, metadata) => {\n  let errorMessage = \"The transaction reverted with an unknown reason.\";\n  const revertReceipt = receipts.find(({ type }) => type === ReceiptType3.Revert);\n  let reason = \"\";\n  if (revertReceipt) {\n    const reasonHex = bn6(revertReceipt.val).toHex();\n    const lastLog = logs[logs.length - 1];\n    const lastButOneLog = logs[logs.length - 2];\n    switch (reasonHex) {\n      case FAILED_REQUIRE_SIGNAL: {\n        reason = \"require\";\n        errorMessage = `The transaction reverted because a \"require\" statement has thrown ${logs.length ? stringify(lastLog) : \"an error.\"}.`;\n        break;\n      }\n      case FAILED_ASSERT_EQ_SIGNAL: {\n        const sufix = logs.length >= 2 ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.` : \".\";\n        reason = \"assert_eq\";\n        errorMessage = `The transaction reverted because of an \"assert_eq\" statement${sufix}`;\n        break;\n      }\n      case FAILED_ASSERT_NE_SIGNAL: {\n        const sufix = logs.length >= 2 ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.` : \".\";\n        reason = \"assert_ne\";\n        errorMessage = `The transaction reverted because of an \"assert_ne\" statement${sufix}`;\n        break;\n      }\n      case FAILED_ASSERT_SIGNAL:\n        reason = \"assert\";\n        errorMessage = `The transaction reverted because an \"assert\" statement failed to evaluate to true.`;\n        break;\n      case FAILED_TRANSFER_TO_ADDRESS_SIGNAL2:\n        reason = \"MissingOutputChange\";\n        errorMessage = `The transaction reverted because it's missing an \"OutputChange\".`;\n        break;\n      default:\n        throw new FuelError8(\n          ErrorCode8.UNKNOWN,\n          `The transaction reverted with an unknown reason: ${revertReceipt.val}`,\n          {\n            ...metadata,\n            reason: \"unknown\"\n          }\n        );\n    }\n  }\n  return new FuelError8(ErrorCode8.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason\n  });\n};\nvar extractTxError = (params) => {\n  const { receipts, statusReason, logs } = params;\n  const isPanic = receipts.some(({ type }) => type === ReceiptType3.Panic);\n  const isRevert = receipts.some(({ type }) => type === ReceiptType3.Revert);\n  const metadata = {\n    logs,\n    receipts,\n    panic: isPanic,\n    revert: isRevert,\n    reason: \"\"\n  };\n  if (isPanic) {\n    return assemblePanicError(statusReason, metadata);\n  }\n  return assembleRevertError(receipts, logs, metadata);\n};\n\n// src/providers/transaction-request/errors.ts\nvar ChangeOutputCollisionError = class extends Error {\n  name = \"ChangeOutputCollisionError\";\n  message = 'A ChangeOutput with the same \"assetId\" already exists for a different \"to\" address';\n};\nvar NoWitnessAtIndexError = class extends Error {\n  constructor(index) {\n    super();\n    this.index = index;\n    this.message = `Witness at index \"${index}\" was not found`;\n  }\n  name = \"NoWitnessAtIndexError\";\n};\nvar NoWitnessByOwnerError = class extends Error {\n  constructor(owner) {\n    super();\n    this.owner = owner;\n    this.message = `A witness for the given owner \"${owner}\" was not found`;\n  }\n  name = \"NoWitnessByOwnerError\";\n};\n\n// src/providers/transaction-request/helpers.ts\nimport { ErrorCode as ErrorCode9, FuelError as FuelError9 } from \"@fuel-ts/errors\";\nimport { bn as bn7 } from \"@fuel-ts/math\";\nimport { InputType as InputType2, OutputType as OutputType2 } from \"@fuel-ts/transactions\";\nvar isRequestInputCoin = (input) => input.type === InputType2.Coin;\nvar isRequestInputMessage = (input) => input.type === InputType2.Message;\nvar isRequestInputMessageWithoutData = (input) => input.type === InputType2.Message && bn7(input.data).isZero();\nvar isRequestInputCoinOrMessage = (input) => isRequestInputCoin(input) || isRequestInputMessage(input);\nvar isRequestInputResource = (input) => isRequestInputCoin(input) || isRequestInputMessageWithoutData(input);\nvar getRequestInputResourceOwner = (input) => isRequestInputCoin(input) ? input.owner : input.recipient;\nvar isRequestInputResourceFromOwner = (input, owner) => getRequestInputResourceOwner(input) === owner.toB256();\nvar getAssetAmountInRequestInputs = (inputs, assetId, baseAsset) => inputs.filter(isRequestInputResource).reduce((acc, input) => {\n  if (isRequestInputCoin(input) && input.assetId === assetId) {\n    return acc.add(input.amount);\n  }\n  if (isRequestInputMessage(input) && assetId === baseAsset) {\n    return acc.add(input.amount);\n  }\n  return acc;\n}, bn7(0));\nvar cacheRequestInputsResources = (inputs) => inputs.filter(isRequestInputResource).reduce(\n  (cache2, input) => {\n    if (isRequestInputCoin(input)) {\n      cache2.utxos.push(input.id);\n    } else {\n      cache2.messages.push(input.nonce);\n    }\n    return cache2;\n  },\n  {\n    utxos: [],\n    messages: []\n  }\n);\nvar cacheRequestInputsResourcesFromOwner = (inputs, owner) => inputs.reduce(\n  (acc, input) => {\n    if (isRequestInputCoin(input) && input.owner === owner.toB256()) {\n      acc.utxos.push(input.id);\n    } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {\n      acc.messages.push(input.nonce);\n    }\n    return acc;\n  },\n  {\n    utxos: [],\n    messages: []\n  }\n);\nvar getBurnableAssetCount = (baseAssetId, transactionRequest) => {\n  const { inputs, outputs } = transactionRequest;\n  const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));\n  if (inputs.some((i) => isRequestInputMessage(i) && bn7(i.amount).gt(0))) {\n    coinInputs.add(baseAssetId);\n  }\n  const changeOutputs = new Set(\n    outputs.filter((output) => output.type === OutputType2.Change).map((output) => output.assetId)\n  );\n  const difference = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));\n  return difference.size;\n};\nvar validateTransactionForAssetBurn = (baseAssetId, transactionRequest, enableAssetBurn = false) => {\n  if (enableAssetBurn === true) {\n    return;\n  }\n  if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {\n    return;\n  }\n  const message = [\n    \"Asset burn detected.\",\n    \"Add the relevant change outputs to the transaction to avoid burning assets.\",\n    \"Or enable asset burn, upon sending the transaction.\"\n  ].join(\"\\n\");\n  throw new FuelError9(ErrorCode9.ASSET_BURN_DETECTED, message);\n};\n\n// src/providers/transaction-request/witness.ts\nimport { arrayify as arrayify4, hexlify as hexlify7 } from \"@fuel-ts/utils\";\nvar witnessify = (value) => {\n  const data = arrayify4(value);\n  return {\n    data: hexlify7(data),\n    dataLength: data.length\n  };\n};\n\n// src/providers/transaction-request/transaction-request.ts\nvar BaseTransactionRequest = class {\n  /** Gas price for transaction */\n  tip;\n  /** Block until which tx cannot be included */\n  maturity;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit;\n  /** List of inputs */\n  inputs = [];\n  /** List of outputs */\n  outputs = [];\n  /** List of witnesses */\n  witnesses = [];\n  /**\n   * Constructor for initializing a base transaction request.\n   *\n   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.\n   */\n  constructor({\n    tip,\n    maturity,\n    maxFee,\n    witnessLimit,\n    inputs,\n    outputs,\n    witnesses\n  } = {}) {\n    this.tip = tip ? bn8(tip) : void 0;\n    this.maturity = maturity && maturity > 0 ? maturity : void 0;\n    this.witnessLimit = isDefined(witnessLimit) ? bn8(witnessLimit) : void 0;\n    this.maxFee = bn8(maxFee);\n    this.inputs = inputs ?? [];\n    this.outputs = outputs ?? [];\n    this.witnesses = witnesses ?? [];\n  }\n  static getPolicyMeta(req) {\n    let policyTypes = 0;\n    const policies = [];\n    const { tip, witnessLimit, maturity } = req;\n    if (bn8(tip).gt(0)) {\n      policyTypes += PolicyType.Tip;\n      policies.push({ data: bn8(tip), type: PolicyType.Tip });\n    }\n    if (isDefined(witnessLimit) && bn8(witnessLimit).gte(0)) {\n      policyTypes += PolicyType.WitnessLimit;\n      policies.push({ data: bn8(witnessLimit), type: PolicyType.WitnessLimit });\n    }\n    if (maturity && maturity > 0) {\n      policyTypes += PolicyType.Maturity;\n      policies.push({ data: maturity, type: PolicyType.Maturity });\n    }\n    policyTypes += PolicyType.MaxFee;\n    policies.push({ data: req.maxFee, type: PolicyType.MaxFee });\n    return {\n      policyTypes,\n      policies\n    };\n  }\n  /**\n   * Method to obtain the base transaction details.\n   *\n   * @returns The base transaction details.\n   */\n  getBaseTransaction() {\n    const inputs = this.inputs?.map(inputify) ?? [];\n    const outputs = this.outputs?.map(outputify) ?? [];\n    const witnesses = this.witnesses?.map(witnessify) ?? [];\n    const { policyTypes, policies } = BaseTransactionRequest.getPolicyMeta(this);\n    return {\n      policyTypes,\n      inputs,\n      outputs,\n      policies,\n      witnesses,\n      inputsCount: inputs.length,\n      outputsCount: outputs.length,\n      witnessesCount: witnesses.length\n    };\n  }\n  /**\n   * Converts the transaction request to a byte array.\n   *\n   * @returns The transaction bytes.\n   */\n  toTransactionBytes() {\n    return new TransactionCoder().encode(this.toTransaction());\n  }\n  /**\n   * @hidden\n   *\n   * Pushes an input to the list without any side effects and returns the index\n   */\n  pushInput(input) {\n    this.inputs.push(input);\n    return this.inputs.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Pushes an output to the list without any side effects and returns the index\n   */\n  pushOutput(output) {\n    this.outputs.push(output);\n    return this.outputs.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Pushes a witness to the list and returns the index\n   *\n   * @param signature - The signature to add to the witness.\n   * @returns The index of the created witness.\n   */\n  addWitness(signature) {\n    this.witnesses.push(signature);\n    return this.witnesses.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Creates an empty witness without any side effects and returns the index\n   *\n   * @returns The index of the created witness.\n   */\n  addEmptyWitness() {\n    this.addWitness(concat([ZeroBytes324, ZeroBytes324]));\n    return this.witnesses.length - 1;\n  }\n  /**\n   * Updates the witness for a given owner and signature.\n   *\n   * @param address - The address to get the coin input witness index for.\n   * @param signature - The signature to update the witness with.\n   */\n  updateWitnessByOwner(address, signature) {\n    const ownerAddress = new Address(address);\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);\n    if (typeof witnessIndex === \"number\") {\n      this.updateWitness(witnessIndex, signature);\n    }\n  }\n  /**\n   * Updates an existing witness without any side effects.\n   *\n   * @param index - The index of the witness to update.\n   * @param witness - The new witness.\n   * @throws If the witness does not exist.\n   */\n  updateWitness(index, witness) {\n    if (!this.witnesses[index]) {\n      throw new NoWitnessAtIndexError(index);\n    }\n    this.witnesses[index] = witness;\n  }\n  /**\n   * Helper function to add an external signature to the transaction.\n   *\n   * @param account - The account/s to sign to the transaction.\n   * @returns The transaction with the signature witness added.\n   */\n  async addAccountWitnesses(account) {\n    const accounts = Array.isArray(account) ? account : [account];\n    await Promise.all(\n      accounts.map(async (acc) => {\n        this.addWitness(await acc.signTransaction(this));\n      })\n    );\n    return this;\n  }\n  /**\n   * Gets the coin inputs for a transaction.\n   *\n   * @returns The coin inputs.\n   */\n  getCoinInputs() {\n    return this.inputs.filter(\n      (input) => input.type === InputType3.Coin\n    );\n  }\n  /**\n   * Gets the coin outputs for a transaction.\n   *\n   * @returns The coin outputs.\n   */\n  getCoinOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === OutputType3.Coin\n    );\n  }\n  /**\n   * Gets the change outputs for a transaction.\n   *\n   * @returns The change outputs.\n   */\n  getChangeOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === OutputType3.Change\n    );\n  }\n  /**\n   * @hidden\n   *\n   * Returns the witnessIndex of the found CoinInput.\n   */\n  getCoinInputWitnessIndexByOwner(owner) {\n    const ownerAddress = addressify(owner);\n    const found = this.inputs.find((input) => {\n      switch (input.type) {\n        case InputType3.Coin:\n          return hexlify8(input.owner) === ownerAddress.toB256();\n        case InputType3.Message:\n          return hexlify8(input.recipient) === ownerAddress.toB256();\n        default:\n          return false;\n      }\n    });\n    return found?.witnessIndex;\n  }\n  /**\n   * Adds a single coin input to the transaction and a change output for the related\n   * assetId, if one it was not added yet.\n   *\n   * @param coin - Coin resource.\n   */\n  addCoinInput(coin) {\n    const { assetId, owner, amount, id, predicate, predicateData } = coin;\n    let witnessIndex;\n    if (coin.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);\n      if (typeof witnessIndex !== \"number\") {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n    const input = {\n      id,\n      type: InputType3.Coin,\n      owner: owner.toB256(),\n      amount,\n      assetId,\n      txPointer: \"0x00000000000000000000000000000000\",\n      witnessIndex,\n      predicate,\n      predicateData\n    };\n    this.pushInput(input);\n    this.addChangeOutput(owner, assetId);\n  }\n  /**\n   * Adds a single message input to the transaction and a change output for the\n   * asset against the message\n   *\n   * @param message - Message resource.\n   */\n  addMessageInput(message) {\n    const { recipient, sender, amount, predicate, nonce, predicateData } = message;\n    let witnessIndex;\n    if (message.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);\n      if (typeof witnessIndex !== \"number\") {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n    const input = {\n      nonce,\n      type: InputType3.Message,\n      sender: sender.toB256(),\n      recipient: recipient.toB256(),\n      data: isMessageCoin(message) ? \"0x\" : message.data,\n      amount,\n      witnessIndex,\n      predicate,\n      predicateData\n    };\n    this.pushInput(input);\n    if (isMessageCoin(message)) {\n      this.addChangeOutput(recipient, message.assetId);\n    }\n  }\n  /**\n   * Adds a single resource to the transaction by adding a coin/message input and a\n   * change output for the related assetId, if one it was not added yet.\n   *\n   * @param resource - The resource to add.\n   * @returns This transaction.\n   */\n  addResource(resource) {\n    if (isCoin(resource)) {\n      this.addCoinInput(resource);\n    } else {\n      this.addMessageInput(resource);\n    }\n    return this;\n  }\n  /**\n   * Adds multiple resources to the transaction by adding coin/message inputs and change\n   * outputs from the related assetIds.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResources(resources) {\n    resources.forEach((resource) => this.addResource(resource));\n    return this;\n  }\n  /**\n   * Adds a coin output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param amount - Amount of coin.\n   * @param assetId - Asset ID of coin.\n   */\n  addCoinOutput(to, amount, assetId) {\n    this.pushOutput({\n      type: OutputType3.Coin,\n      to: addressify(to).toB256(),\n      amount,\n      assetId\n    });\n    return this;\n  }\n  /**\n   * Adds multiple coin outputs to the transaction.\n   *\n   * @param to - Address of the destination.\n   * @param quantities - Quantities of coins.\n   */\n  addCoinOutputs(to, quantities) {\n    quantities.map(coinQuantityfy).forEach((quantity) => {\n      this.pushOutput({\n        type: OutputType3.Coin,\n        to: addressify(to).toB256(),\n        amount: quantity.amount,\n        assetId: quantity.assetId\n      });\n    });\n    return this;\n  }\n  /**\n   * Adds a change output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param assetId - Asset ID of coin.\n   */\n  addChangeOutput(to, assetId) {\n    const changeOutput = this.getChangeOutputs().find(\n      (output) => hexlify8(output.assetId) === assetId\n    );\n    if (!changeOutput) {\n      this.pushOutput({\n        type: OutputType3.Change,\n        to: addressify(to).toB256(),\n        assetId\n      });\n    }\n  }\n  /**\n   * @hidden\n   */\n  byteSize() {\n    return this.toTransactionBytes().length;\n  }\n  /**\n   * @hidden\n   */\n  metadataGas(_gasCosts) {\n    throw new FuelError10(FuelError10.CODES.NOT_IMPLEMENTED, \"Not implemented\");\n  }\n  /**\n   * @hidden\n   */\n  calculateMinGas(chainInfo) {\n    const { consensusParameters } = chainInfo;\n    const {\n      gasCosts,\n      feeParameters: { gasPerByte }\n    } = consensusParameters;\n    return getMinGas({\n      gasPerByte,\n      gasCosts,\n      inputs: this.inputs,\n      txBytesSize: this.byteSize(),\n      metadataGas: this.metadataGas(gasCosts)\n    });\n  }\n  calculateMaxGas(chainInfo, minGas) {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx }\n    } = consensusParameters;\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      maxGasPerTx\n    });\n  }\n  /**\n   * Funds the transaction with fake UTXOs for each assetId and amount in the\n   * quantities array.\n   *\n   * @param quantities - CoinQuantity Array.\n   * @param baseAssetId - The base asset to fund the transaction.\n   * @deprecated - This method is deprecated and will be removed in future versions.\n   * Please use `Account.generateFakeResources` along with `this.addResources` instead.\n   */\n  fundWithFakeUtxos(quantities, baseAssetId, resourcesOwner) {\n    const findAssetInput = (assetId) => this.inputs.find((input) => {\n      if (\"assetId\" in input) {\n        return input.assetId === assetId;\n      }\n      return false;\n    });\n    const updateAssetInput = (assetId, quantity) => {\n      const assetInput = findAssetInput(assetId);\n      let usedQuantity = quantity;\n      if (assetId === baseAssetId) {\n        usedQuantity = bn8(\"1000000000000000000\");\n      }\n      if (assetInput && \"assetId\" in assetInput) {\n        assetInput.id = hexlify8(randomBytes(UTXO_ID_LEN2));\n        assetInput.amount = usedQuantity;\n      } else {\n        this.addResources([\n          {\n            id: hexlify8(randomBytes(UTXO_ID_LEN2)),\n            amount: usedQuantity,\n            assetId,\n            owner: resourcesOwner || Address.fromRandom(),\n            blockCreated: bn8(1),\n            txCreatedIdx: bn8(1)\n          }\n        ]);\n      }\n    };\n    updateAssetInput(baseAssetId, bn8(1e11));\n    quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));\n    return this;\n  }\n  /**\n   * Retrieves an array of CoinQuantity for each coin output present in the transaction.\n   * a transaction.\n   *\n   * @returns  CoinQuantity array.\n   */\n  getCoinOutputsQuantities() {\n    const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({\n      amount: bn8(amount),\n      assetId: assetId.toString()\n    }));\n    return coinsQuantities;\n  }\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction.\n   *\n   * @returns The transaction as a JSON object.\n   */\n  toJSON() {\n    return normalizeJSON(this);\n  }\n  removeWitness(index) {\n    this.witnesses.splice(index, 1);\n    this.adjustWitnessIndexes(index);\n  }\n  adjustWitnessIndexes(removedIndex) {\n    this.inputs.filter(isRequestInputResource).forEach((input) => {\n      if (input.witnessIndex > removedIndex) {\n        input.witnessIndex -= 1;\n      }\n    });\n  }\n  updatePredicateGasUsed(inputs) {\n    const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);\n    this.inputs.filter(isRequestInputResource).forEach((i) => {\n      const owner = getRequestInputResourceOwner(i);\n      const correspondingInput = inputsToExtractGasUsed.find(\n        (x) => isRequestInputResourceFromOwner(x, new Address(String(owner)))\n      );\n      if (correspondingInput && \"predicateGasUsed\" in correspondingInput && bn8(correspondingInput.predicateGasUsed).gt(0)) {\n        i.predicateGasUsed = correspondingInput.predicateGasUsed;\n      }\n    });\n  }\n  byteLength() {\n    return this.toTransactionBytes().byteLength;\n  }\n};\n\n// src/providers/transaction-request/blob-transaction-request.ts\nimport { clone as clone3 } from \"ramda\";\n\n// src/providers/transaction-request/hash-transaction.ts\nimport { ZeroBytes32 as ZeroBytes325 } from \"@fuel-ts/address/configs\";\nimport { uint64ToBytesBE, sha256 } from \"@fuel-ts/hasher\";\nimport { bn as bn9 } from \"@fuel-ts/math\";\nimport { TransactionType as TransactionType2, InputType as InputType4, OutputType as OutputType4, TransactionCoder as TransactionCoder2 } from \"@fuel-ts/transactions\";\nimport { concat as concat2 } from \"@fuel-ts/utils\";\nimport { clone as clone2 } from \"ramda\";\nfunction hashTransaction(transactionRequest, chainId) {\n  const transaction = transactionRequest.toTransaction();\n  if (transaction.type === TransactionType2.Script) {\n    transaction.receiptsRoot = ZeroBytes325;\n  }\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = clone2(input);\n    switch (inputClone.type) {\n      case InputType4.Coin: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0\n        };\n        inputClone.predicateGasUsed = bn9(0);\n        return inputClone;\n      }\n      case InputType4.Message: {\n        inputClone.predicateGasUsed = bn9(0);\n        return inputClone;\n      }\n      case InputType4.Contract: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0\n        };\n        inputClone.txID = ZeroBytes325;\n        inputClone.outputIndex = 0;\n        inputClone.balanceRoot = ZeroBytes325;\n        inputClone.stateRoot = ZeroBytes325;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = clone2(output);\n    switch (outputClone.type) {\n      case OutputType4.Contract: {\n        outputClone.balanceRoot = ZeroBytes325;\n        outputClone.stateRoot = ZeroBytes325;\n        return outputClone;\n      }\n      case OutputType4.Change: {\n        outputClone.amount = bn9(0);\n        return outputClone;\n      }\n      case OutputType4.Variable: {\n        outputClone.to = ZeroBytes325;\n        outputClone.amount = bn9(0);\n        outputClone.assetId = ZeroBytes325;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n  const chainIdBytes = uint64ToBytesBE(chainId);\n  const concatenatedData = concat2([chainIdBytes, new TransactionCoder2().encode(transaction)]);\n  return sha256(concatenatedData);\n}\n\n// src/providers/transaction-request/blob-transaction-request.ts\nvar BlobTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    return new this(clone3(obj));\n  }\n  /** Type of the transaction */\n  type = TransactionType.Blob;\n  /** Blob ID */\n  blobId;\n  /** Witness index of the bytecode to create */\n  witnessIndex;\n  /**\n   * Creates an instance `BlobTransactionRequest`.\n   *\n   * @param blobTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, blobId, ...rest }) {\n    super(rest);\n    this.blobId = blobId;\n    this.witnessIndex = witnessIndex ?? 0;\n  }\n  /**\n   * Converts the transaction request to a `TransactionBlob`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const { witnessIndex, blobId } = this;\n    return {\n      type: TransactionType.Blob,\n      ...baseTransaction,\n      blobId,\n      witnessIndex\n    };\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Calculates the metadata gas cost for a blob transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   * @returns metadata gas cost for the blob transaction.\n   */\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxBlob({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      witnessBytesSize: this.witnesses[this.witnessIndex].length\n    });\n  }\n};\n\n// src/providers/transaction-request/create-transaction-request.ts\nimport { ZeroBytes32 as ZeroBytes326 } from \"@fuel-ts/address/configs\";\nimport { bn as bn10 } from \"@fuel-ts/math\";\nimport { TransactionType as TransactionType3, OutputType as OutputType5 } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify6, hexlify as hexlify10 } from \"@fuel-ts/utils\";\nimport { clone as clone4 } from \"ramda\";\n\n// src/providers/transaction-request/storage-slot.ts\nimport { arrayify as arrayify5, hexlify as hexlify9 } from \"@fuel-ts/utils\";\nvar getStorageValue = (value) => {\n  const v = new Uint8Array(32);\n  v.set(arrayify5(value));\n  return v;\n};\nvar storageSlotify = (storageSlot) => {\n  let key;\n  let value;\n  if (Array.isArray(storageSlot)) {\n    key = storageSlot[0];\n    value = storageSlot[1];\n  } else {\n    key = storageSlot.key;\n    value = storageSlot.value;\n  }\n  return {\n    key: hexlify9(key),\n    value: hexlify9(getStorageValue(value))\n  };\n};\n\n// src/providers/transaction-request/create-transaction-request.ts\nvar CreateTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    return new this(clone4(obj));\n  }\n  /** Type of the transaction */\n  type = TransactionType3.Create;\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex;\n  /** Salt */\n  salt;\n  /** List of storage slots to initialize */\n  storageSlots;\n  /**\n   * Creates an instance `CreateTransactionRequest`.\n   *\n   * @param createTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ bytecodeWitnessIndex, salt, storageSlots, ...rest }) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.salt = hexlify10(salt ?? ZeroBytes326);\n    this.storageSlots = [...storageSlots ?? []];\n  }\n  /**\n   * Converts the transaction request to a `TransactionCreate`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;\n    const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];\n    return {\n      type: TransactionType3.Create,\n      ...baseTransaction,\n      bytecodeWitnessIndex,\n      storageSlotsCount: bn10(storageSlots.length),\n      salt: this.salt ? hexlify10(this.salt) : ZeroBytes326,\n      storageSlots\n    };\n  }\n  /**\n   * Get contract created outputs for the transaction.\n   *\n   * @returns An array of contract created transaction request outputs.\n   */\n  getContractCreatedOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === OutputType5.ContractCreated\n    );\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Adds a contract created output to the transaction request.\n   *\n   * @param contractId - The contract ID.\n   * @param stateRoot - The state root.\n   */\n  addContractCreatedOutput(contractId, stateRoot) {\n    this.pushOutput({\n      type: OutputType5.ContractCreated,\n      contractId,\n      stateRoot\n    });\n  }\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxCreate({\n      contractBytesSize: bn10(arrayify6(this.witnesses[this.bytecodeWitnessIndex] || \"0x\").length),\n      gasCosts,\n      stateRootSize: this.storageSlots.length,\n      txBytesSize: this.byteSize()\n    });\n  }\n};\n\n// src/providers/transaction-request/script-transaction-request.ts\nimport { Interface } from \"@fuel-ts/abi-coder\";\nimport { addressify as addressify2 } from \"@fuel-ts/address\";\nimport { ZeroBytes32 as ZeroBytes327 } from \"@fuel-ts/address/configs\";\nimport { bn as bn11 } from \"@fuel-ts/math\";\nimport { InputType as InputType5, OutputType as OutputType6, TransactionType as TransactionType4 } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify8, hexlify as hexlify11 } from \"@fuel-ts/utils\";\nimport { clone as clone5 } from \"ramda\";\n\n// src/providers/transaction-request/scripts.ts\nimport { arrayify as arrayify7 } from \"@fuel-ts/utils\";\nvar returnZeroScript = {\n  /*\n      Opcode::RET(REG_ZERO)\n      Opcode::NOOP\n    */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify7(\"0x24000000\"),\n  encodeScriptData: () => new Uint8Array(0)\n};\nvar withdrawScript = {\n  /*\n          The following code loads some basic values into registers and calls SMO to create an output message\n          5040C010 \t- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]\n          5D44C006\t- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]\n          4C400011\t- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]\n          24000000\t- RET                [return 0]\n          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]\n          00000000 00000000 [amount value]\n      */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify7(\"0x5040C0105D44C0064C40001124000000\"),\n  encodeScriptData: () => new Uint8Array(0)\n};\n\n// src/providers/transaction-request/script-transaction-request.ts\nvar ScriptTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    return new this(clone5(obj));\n  }\n  /** Type of the transaction */\n  type = TransactionType4.Script;\n  /** Gas limit for transaction */\n  gasLimit;\n  /** Script to execute */\n  script;\n  /** Script input data (parameters) */\n  scriptData;\n  abis;\n  /**\n   * Constructor for `ScriptTransactionRequest`.\n   *\n   * @param scriptTransactionRequestLike - The initial values for the instance.\n   */\n  constructor({ script, scriptData, gasLimit, ...rest } = {}) {\n    super(rest);\n    this.gasLimit = bn11(gasLimit);\n    this.script = arrayify8(script ?? returnZeroScript.bytes);\n    this.scriptData = arrayify8(scriptData ?? returnZeroScript.encodeScriptData());\n    this.abis = rest.abis;\n  }\n  /**\n   * Helper function to estimate and fund the transaction request with a specified account.\n   *\n   * @param account - The account to fund the transaction.\n   * @param params - The parameters for the transaction cost.\n   * @returns The current instance of the `ScriptTransactionRequest` funded.\n   */\n  async estimateAndFund(account, { signatureCallback, quantities = [] } = {}) {\n    const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });\n    this.maxFee = txCost.maxFee;\n    this.gasLimit = txCost.gasUsed;\n    await account.fund(this, txCost);\n    return this;\n  }\n  /**\n   * Converts the transaction request to a `TransactionScript`.\n   *\n   * @returns The transaction script object.\n   */\n  toTransaction() {\n    const script = arrayify8(this.script ?? \"0x\");\n    const scriptData = arrayify8(this.scriptData ?? \"0x\");\n    return {\n      type: TransactionType4.Script,\n      scriptGasLimit: this.gasLimit,\n      ...super.getBaseTransaction(),\n      scriptLength: bn11(script.length),\n      scriptDataLength: bn11(scriptData.length),\n      receiptsRoot: ZeroBytes327,\n      script: hexlify11(script),\n      scriptData: hexlify11(scriptData)\n    };\n  }\n  /**\n   * Get contract inputs for the transaction.\n   *\n   * @returns An array of contract transaction request inputs.\n   */\n  getContractInputs() {\n    return this.inputs.filter(\n      (input) => input.type === InputType5.Contract\n    );\n  }\n  /**\n   * Get contract outputs for the transaction.\n   *\n   * @returns An array of contract transaction request outputs.\n   */\n  getContractOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === OutputType6.Contract\n    );\n  }\n  /**\n   * Get variable outputs for the transaction.\n   *\n   * @returns An array of variable transaction request outputs.\n   */\n  getVariableOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === OutputType6.Variable\n    );\n  }\n  /**\n   * Set the script and its data.\n   *\n   * @param script - The abstract script request.\n   * @param data - The script data.\n   */\n  setScript(script, data) {\n    this.scriptData = script.encodeScriptData(data);\n    this.script = script.bytes;\n  }\n  /**\n   * Adds variable outputs to the transaction request.\n   *\n   * @param numberOfVariables - The number of variables to add.\n   * @returns The new length of the outputs array.\n   */\n  addVariableOutputs(numberOfVariables = 1) {\n    let outputsNumber = numberOfVariables;\n    while (outputsNumber) {\n      this.pushOutput({\n        type: OutputType6.Variable\n      });\n      outputsNumber -= 1;\n    }\n    return this.outputs.length - 1;\n  }\n  /**\n   * Calculates the maximum gas for the transaction.\n   *\n   * @param chainInfo - The chain information.\n   * @param minGas - The minimum gas.\n   * @returns the maximum gas.\n   */\n  calculateMaxGas(chainInfo, minGas) {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx }\n    } = consensusParameters;\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      gasLimit: this.gasLimit,\n      maxGasPerTx\n    });\n  }\n  /**\n   * Adds a contract input and output to the transaction request.\n   *\n   * @param contract - The contract ID.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  addContractInputAndOutput(contract) {\n    const contractAddress = addressify2(contract);\n    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {\n      return this;\n    }\n    const inputIndex = super.pushInput({\n      type: InputType5.Contract,\n      contractId: contractAddress.toB256(),\n      txPointer: \"0x00000000000000000000000000000000\"\n    });\n    this.pushOutput({\n      type: OutputType6.Contract,\n      inputIndex\n    });\n    return this;\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Sets the data for the transaction request.\n   *\n   * @param abi - Script JSON ABI.\n   * @param args - The input arguments.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  setData(abi, args) {\n    const abiInterface = new Interface(abi);\n    this.scriptData = abiInterface.functions.main.encodeArguments(args);\n    return this;\n  }\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: this.byteSize()\n    });\n  }\n};\n\n// src/providers/transaction-request/upgrade-transaction-request.ts\nimport { FuelError as FuelError11 } from \"@fuel-ts/errors\";\nimport { hash } from \"@fuel-ts/hasher\";\nimport {\n  TransactionType as TransactionType5,\n  UpgradePurposeTypeEnum\n} from \"@fuel-ts/transactions\";\nimport { hexlify as hexlify12 } from \"@fuel-ts/utils\";\nimport { clone as clone6 } from \"ramda\";\nvar UpgradeTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    if (obj instanceof UpgradeTransactionRequest) {\n      return obj;\n    }\n    return new this(clone6(obj));\n  }\n  /** The type of transaction */\n  type = TransactionType5.Upgrade;\n  /** The upgrade purpose */\n  upgradePurpose;\n  /** Witness index of consensus */\n  bytecodeWitnessIndex;\n  /**\n   * Creates an instance `UpgradeTransactionRequest`.\n   *\n   * @param upgradeTransactionRequestLike - The initial values for the instance\n   */\n  constructor({\n    upgradePurpose,\n    bytecodeWitnessIndex,\n    ...rest\n  } = {}) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.upgradePurpose = upgradePurpose ?? {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: \"0x\"\n    };\n  }\n  /**\n   * Adds a consensus parameters upgrade purpose.\n   *\n   * @param consensus - The consensus bytecode.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addConsensusParametersUpgradePurpose(consensus) {\n    this.bytecodeWitnessIndex = this.addWitness(consensus);\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: hash(consensus)\n    };\n    return this;\n  }\n  /**\n   * Adds a state transition upgrade purpose.\n   *\n   * @param bytecodeRoot - The Merkle root of the state transition.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addStateTransitionUpgradePurpose(bytecodeRoot) {\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.StateTransition,\n      data: hexlify12(bytecodeRoot)\n    };\n    return this;\n  }\n  /**\n   * Adds an upgrade purpose.\n   *\n   * @param type - The upgrade purpose type.\n   * @param data - The bytecode or merkle root of upgrade purpose\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addUpgradePurpose(type, data) {\n    if (type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      this.addConsensusParametersUpgradePurpose(data);\n    }\n    if (type === UpgradePurposeTypeEnum.StateTransition) {\n      this.addStateTransitionUpgradePurpose(data);\n    }\n    return this;\n  }\n  /**\n   * Converts the transaction request to a `TransactionUpgrade`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    let upgradePurpose;\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.ConsensusParameters,\n        data: {\n          witnessIndex: this.bytecodeWitnessIndex,\n          checksum: this.upgradePurpose.checksum\n        }\n      };\n    } else if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.StateTransition,\n        data: {\n          bytecodeRoot: hexlify12(this.upgradePurpose.data)\n        }\n      };\n    } else {\n      throw new FuelError11(FuelError11.CODES.NOT_IMPLEMENTED, \"Invalid upgrade purpose\");\n    }\n    return {\n      type: TransactionType5.Upgrade,\n      ...super.getBaseTransaction(),\n      upgradePurpose\n    };\n  }\n  /**\n   * Gets the Transaction ID by hashing the transaction\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Calculates the metadata gas cost for an upgrade transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upgrade transaction.\n   */\n  metadataGas(gasCosts) {\n    const txBytesSize = this.byteSize();\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      const witnessIndex = this.bytecodeWitnessIndex;\n      const consensusSize = this.witnesses[witnessIndex].length;\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n        consensusSize\n      });\n    }\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize\n      });\n    }\n    throw new FuelError11(FuelError11.CODES.NOT_IMPLEMENTED, \"Invalid upgrade purpose\");\n  }\n};\n\n// src/providers/transaction-request/upload-transaction-request.ts\nimport { ZeroBytes32 as ZeroBytes328 } from \"@fuel-ts/address/configs\";\nimport { TransactionType as TransactionType6 } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify9, hexlify as hexlify13 } from \"@fuel-ts/utils\";\nimport { clone as clone7 } from \"ramda\";\nvar UploadTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    if (obj instanceof UploadTransactionRequest) {\n      return obj;\n    }\n    return new this(clone7(obj));\n  }\n  /** Type of the transaction */\n  type = TransactionType6.Upload;\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex;\n  /** The subsection data. */\n  subsection;\n  /**\n   * Creates an instance `UploadTransactionRequest`.\n   *\n   * @param uploadTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, subsection, ...rest } = {}) {\n    super(rest);\n    this.witnessIndex = witnessIndex ?? 0;\n    this.subsection = subsection ?? {\n      proofSet: [],\n      root: ZeroBytes328,\n      subsectionIndex: 0,\n      subsectionsNumber: 0\n    };\n  }\n  /**\n   * Adds the subsection.\n   *\n   * @param subsection - The subsection data.\n   */\n  addSubsection(subsection) {\n    const { subsection: subsectionBytecode, ...rest } = subsection;\n    this.subsection = rest;\n    this.witnessIndex = this.addWitness(subsectionBytecode);\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Converts the transaction request to a `TransactionUpload`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;\n    return {\n      type: TransactionType6.Upload,\n      ...baseTransaction,\n      subsectionIndex,\n      subsectionsNumber,\n      root: hexlify13(root),\n      proofSet: proofSet.map(hexlify13),\n      witnessIndex: this.witnessIndex,\n      proofSetCount: proofSet.length\n    };\n  }\n  /**\n   * Calculates the metadata gas cost for an upload transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upload transaction.\n   */\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxUpload({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      subsectionSize: arrayify9(this.witnesses[this.witnessIndex]).length,\n      subsectionsSize: this.subsection.subsectionsNumber\n    });\n  }\n  /**\n   * Calculates the minimum gas for an upload transaction.\n   *\n   * @param chainInfo - The chain information.\n   *\n   * @returns the minimum gas for the upload transaction\n   */\n  calculateMinGas(chainInfo) {\n    const minGas = super.calculateMinGas(chainInfo);\n    const { gasCosts } = chainInfo.consensusParameters;\n    const bytecode = this.witnesses[this.witnessIndex] ?? ZeroBytes328;\n    return calculateMinGasForTxUpload({\n      gasCosts,\n      baseMinGas: minGas.toNumber(),\n      subsectionSize: arrayify9(bytecode).length\n    });\n  }\n};\n\n// src/providers/transaction-request/types.ts\nvar AbstractScriptRequest = class {\n};\n\n// src/providers/transaction-request/utils.ts\nimport { ErrorCode as ErrorCode10, FuelError as FuelError12 } from \"@fuel-ts/errors\";\nimport { TransactionType as TransactionType7 } from \"@fuel-ts/transactions\";\nvar transactionRequestify = (obj) => {\n  if (obj instanceof ScriptTransactionRequest || obj instanceof CreateTransactionRequest || obj instanceof BlobTransactionRequest || obj instanceof UpgradeTransactionRequest || obj instanceof UploadTransactionRequest) {\n    return obj;\n  }\n  const { type } = obj;\n  switch (obj.type) {\n    case TransactionType7.Script: {\n      return ScriptTransactionRequest.from(obj);\n    }\n    case TransactionType7.Create: {\n      return CreateTransactionRequest.from(obj);\n    }\n    case TransactionType7.Blob: {\n      return BlobTransactionRequest.from(obj);\n    }\n    case TransactionType7.Upgrade: {\n      return UpgradeTransactionRequest.from(obj);\n    }\n    case TransactionType7.Upload: {\n      return UploadTransactionRequest.from(obj);\n    }\n    default: {\n      throw new FuelError12(\n        ErrorCode10.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${type}.`\n      );\n    }\n  }\n};\nvar isTransactionTypeScript = (request2) => request2.type === TransactionType7.Script;\nvar isTransactionTypeCreate = (request2) => request2.type === TransactionType7.Create;\nvar isTransactionTypeBlob = (request2) => request2.type === TransactionType7.Blob;\nvar isTransactionTypeUpgrade = (request2) => request2.type === TransactionType7.Upgrade;\nvar isTransactionTypeUpload = (request2) => request2.type === TransactionType7.Upload;\n\n// src/providers/transaction-response/transaction-response.ts\nimport { ErrorCode as ErrorCode14, FuelError as FuelError16 } from \"@fuel-ts/errors\";\nimport { bn as bn16 } from \"@fuel-ts/math\";\nimport { OutputType as OutputType8, TransactionCoder as TransactionCoder4, TxPointerCoder } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify11, assertUnreachable } from \"@fuel-ts/utils\";\n\n// src/providers/transaction-summary/assemble-transaction-summary.ts\nimport { bn as bn15 } from \"@fuel-ts/math\";\nimport { PolicyType as PolicyType3 } from \"@fuel-ts/transactions\";\nimport { DateTime, hexlify as hexlify14 } from \"@fuel-ts/utils\";\n\n// src/providers/transaction-summary/calculate-tx-fee-for-summary.ts\nimport { bn as bn12 } from \"@fuel-ts/math\";\nimport { PolicyType as PolicyType2, TransactionCoder as TransactionCoder3, TransactionType as TransactionType8 } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify10 } from \"@fuel-ts/utils\";\nvar calculateTXFeeForSummary = (params) => {\n  const {\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: { gasCosts, feeParams, maxGasPerTx }\n  } = params;\n  const gasPerByte = bn12(feeParams.gasPerByte);\n  const gasPriceFactor = bn12(feeParams.gasPriceFactor);\n  const transactionBytes = arrayify10(rawPayload);\n  const [transaction] = new TransactionCoder3().decode(transactionBytes, 0);\n  const { type, witnesses, inputs, policies } = transaction;\n  let metadataGas = bn12(0);\n  let gasLimit = bn12(0);\n  if (type !== TransactionType8.Create && type !== TransactionType8.Script) {\n    return bn12(0);\n  }\n  if (type === TransactionType8.Create) {\n    const { bytecodeWitnessIndex, storageSlots } = transaction;\n    const contractBytesSize = bn12(arrayify10(witnesses[bytecodeWitnessIndex].data).length);\n    metadataGas = calculateMetadataGasForTxCreate({\n      contractBytesSize,\n      gasCosts,\n      stateRootSize: storageSlots.length || 0,\n      txBytesSize: transactionBytes.length\n    });\n  } else {\n    const { scriptGasLimit } = transaction;\n    if (scriptGasLimit) {\n      gasLimit = scriptGasLimit;\n    }\n    metadataGas = calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: transactionBytes.length\n    });\n  }\n  const minGas = getMinGas({\n    gasCosts,\n    gasPerByte: bn12(gasPerByte),\n    inputs,\n    metadataGas,\n    txBytesSize: transactionBytes.length\n  });\n  const witnessLimit = policies.find((policy) => policy.type === PolicyType2.WitnessLimit)?.data;\n  const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);\n  const maxGas = getMaxGas({\n    gasPerByte,\n    minGas,\n    witnessesLength,\n    gasLimit,\n    witnessLimit,\n    maxGasPerTx\n  });\n  const maxFee = calculateGasFee({\n    gasPrice,\n    gas: maxGas,\n    priceFactor: gasPriceFactor,\n    tip\n  });\n  return maxFee;\n};\n\n// src/providers/transaction-summary/operations.ts\nimport { ZeroBytes32 as ZeroBytes329 } from \"@fuel-ts/address/configs\";\nimport { ErrorCode as ErrorCode12, FuelError as FuelError14 } from \"@fuel-ts/errors\";\nimport { bn as bn13 } from \"@fuel-ts/math\";\nimport { ReceiptType as ReceiptType4, TransactionType as TransactionType9 } from \"@fuel-ts/transactions\";\n\n// src/providers/transaction-summary/call.ts\nimport { Interface as Interface2 } from \"@fuel-ts/abi-coder\";\nvar getFunctionCall = ({ abi, receipt }) => {\n  const abiInterface = new Interface2(abi);\n  const callFunctionSelector = receipt.param1.toHex(8);\n  const functionFragment = abiInterface.getFunction(callFunctionSelector);\n  const inputs = functionFragment.jsonFn.inputs;\n  const encodedArgs = receipt.param2.toHex();\n  let argumentsProvided;\n  const data = functionFragment.decodeArguments(encodedArgs);\n  if (data) {\n    argumentsProvided = inputs.reduce((prev, input, index) => {\n      const value = data[index];\n      const name = input.name;\n      if (name) {\n        return {\n          ...prev,\n          // reparse to remove bn\n          [name]: JSON.parse(JSON.stringify(value))\n        };\n      }\n      return prev;\n    }, {});\n  }\n  const call = {\n    functionSignature: functionFragment.signature,\n    functionName: functionFragment.name,\n    argumentsProvided,\n    ...receipt.amount?.isZero() ? {} : { amount: receipt.amount, assetId: receipt.assetId }\n  };\n  return call;\n};\n\n// src/providers/transaction-summary/input.ts\nimport { ErrorCode as ErrorCode11, FuelError as FuelError13 } from \"@fuel-ts/errors\";\nimport { BN } from \"@fuel-ts/math\";\nimport { InputType as InputType6 } from \"@fuel-ts/transactions\";\nfunction getInputsByTypes(inputs, types) {\n  return inputs.filter((i) => types.includes(i.type));\n}\nfunction getInputsByType(inputs, type) {\n  return inputs.filter((i) => i.type === type);\n}\nfunction getInputsCoin(inputs) {\n  return getInputsByType(inputs, InputType6.Coin);\n}\nfunction getInputsMessage(inputs) {\n  return getInputsByType(inputs, InputType6.Message);\n}\nfunction getInputsCoinAndMessage(inputs) {\n  return getInputsByTypes(inputs, [InputType6.Coin, InputType6.Message]);\n}\nfunction isInputCoin(input) {\n  return input.type === InputType6.Coin;\n}\nfunction getInputsContract(inputs) {\n  return getInputsByType(inputs, InputType6.Contract);\n}\nfunction findCoinInput(inputs, assetId) {\n  const coinInputs = getInputsCoin(inputs);\n  return coinInputs.find((i) => i.assetId === assetId);\n}\nfunction aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId) {\n  const aggregated = /* @__PURE__ */ new Map();\n  getInputsCoinAndMessage(inputs).forEach((input) => {\n    const assetId = isInputCoin(input) ? input.assetId : baseAssetId;\n    const owner = isInputCoin(input) ? input.owner : input.recipient;\n    let ownersMap = aggregated.get(assetId);\n    if (!ownersMap) {\n      ownersMap = /* @__PURE__ */ new Map();\n      aggregated.set(assetId, ownersMap);\n    }\n    let ownerBalance = ownersMap.get(owner);\n    if (!ownerBalance) {\n      ownerBalance = new BN(0);\n      ownersMap.set(owner, ownerBalance);\n    }\n    ownersMap.set(owner, ownerBalance.add(input.amount));\n  });\n  return aggregated;\n}\nfunction findMessageInput(inputs) {\n  return getInputsMessage(inputs)?.[0];\n}\nfunction getInputFromAssetId(inputs, assetId, isBaseAsset = false) {\n  const coinInput = findCoinInput(inputs, assetId);\n  if (coinInput) {\n    return coinInput;\n  }\n  if (isBaseAsset) {\n    return findMessageInput(inputs);\n  }\n  return void 0;\n}\nfunction getInputContractFromIndex(inputs, inputIndex) {\n  if (inputIndex == null) {\n    return void 0;\n  }\n  const contractInput = inputs?.[inputIndex];\n  if (!contractInput) {\n    return void 0;\n  }\n  if (contractInput.type !== InputType6.Contract) {\n    throw new FuelError13(\n      ErrorCode11.INVALID_TRANSACTION_INPUT,\n      `Contract input should be of type 'contract'.`\n    );\n  }\n  return contractInput;\n}\nfunction getInputAccountAddress(input) {\n  if (input.type === InputType6.Coin) {\n    return input.owner.toString();\n  }\n  if (input.type === InputType6.Message) {\n    return input.recipient.toString();\n  }\n  return \"\";\n}\n\n// src/providers/transaction-summary/output.ts\nimport { OutputType as OutputType7 } from \"@fuel-ts/transactions\";\nfunction getOutputsByType(outputs, type) {\n  return outputs.filter((o) => o.type === type);\n}\nfunction getOutputsContractCreated(outputs) {\n  return getOutputsByType(outputs, OutputType7.ContractCreated);\n}\nfunction getOutputsCoin(outputs) {\n  return getOutputsByType(outputs, OutputType7.Coin);\n}\nfunction getOutputsChange(outputs) {\n  return getOutputsByType(outputs, OutputType7.Change);\n}\nfunction getOutputsContract(outputs) {\n  return getOutputsByType(outputs, OutputType7.Contract);\n}\nfunction getOutputsVariable(outputs) {\n  return getOutputsByType(outputs, OutputType7.Variable);\n}\n\n// src/providers/transaction-summary/types.ts\nvar TransactionTypeName = /* @__PURE__ */ ((TransactionTypeName2) => {\n  TransactionTypeName2[\"Create\"] = \"Create\";\n  TransactionTypeName2[\"Mint\"] = \"Mint\";\n  TransactionTypeName2[\"Script\"] = \"Script\";\n  TransactionTypeName2[\"Upgrade\"] = \"Upgrade\";\n  TransactionTypeName2[\"Upload\"] = \"Upload\";\n  TransactionTypeName2[\"Blob\"] = \"Blob\";\n  return TransactionTypeName2;\n})(TransactionTypeName || {});\nvar TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {\n  TransactionStatus2[\"submitted\"] = \"submitted\";\n  TransactionStatus2[\"success\"] = \"success\";\n  TransactionStatus2[\"squeezedout\"] = \"squeezedout\";\n  TransactionStatus2[\"failure\"] = \"failure\";\n  return TransactionStatus2;\n})(TransactionStatus || {});\nvar OperationName = /* @__PURE__ */ ((OperationName2) => {\n  OperationName2[\"payBlockProducer\"] = \"Pay network fee to block producer\";\n  OperationName2[\"contractCreated\"] = \"Contract created\";\n  OperationName2[\"transfer\"] = \"Transfer asset\";\n  OperationName2[\"contractCall\"] = \"Contract call\";\n  OperationName2[\"receive\"] = \"Receive asset\";\n  OperationName2[\"withdrawFromFuel\"] = \"Withdraw from Fuel\";\n  return OperationName2;\n})(OperationName || {});\nvar AddressType = /* @__PURE__ */ ((AddressType2) => {\n  AddressType2[AddressType2[\"contract\"] = 0] = \"contract\";\n  AddressType2[AddressType2[\"account\"] = 1] = \"account\";\n  return AddressType2;\n})(AddressType || {});\nvar ChainName = /* @__PURE__ */ ((ChainName2) => {\n  ChainName2[\"ethereum\"] = \"ethereum\";\n  ChainName2[\"fuel\"] = \"fuel\";\n  return ChainName2;\n})(ChainName || {});\n\n// src/providers/transaction-summary/operations.ts\nfunction getReceiptsByType(receipts, type) {\n  return (receipts ?? []).filter((r) => r.type === type);\n}\nfunction getTransactionTypeName(transactionType) {\n  switch (transactionType) {\n    case TransactionType9.Mint:\n      return \"Mint\" /* Mint */;\n    case TransactionType9.Create:\n      return \"Create\" /* Create */;\n    case TransactionType9.Script:\n      return \"Script\" /* Script */;\n    case TransactionType9.Blob:\n      return \"Blob\" /* Blob */;\n    case TransactionType9.Upgrade:\n      return \"Upgrade\" /* Upgrade */;\n    case TransactionType9.Upload:\n      return \"Upload\" /* Upload */;\n    default:\n      throw new FuelError14(\n        ErrorCode12.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${transactionType}.`\n      );\n  }\n}\nfunction isType(transactionType, type) {\n  const txType = getTransactionTypeName(transactionType);\n  return txType === type;\n}\nfunction isTypeMint(transactionType) {\n  return isType(transactionType, \"Mint\" /* Mint */);\n}\nfunction isTypeCreate(transactionType) {\n  return isType(transactionType, \"Create\" /* Create */);\n}\nfunction isTypeScript(transactionType) {\n  return isType(transactionType, \"Script\" /* Script */);\n}\nfunction isTypeUpgrade(transactionType) {\n  return isType(transactionType, \"Upgrade\" /* Upgrade */);\n}\nfunction isTypeUpload(transactionType) {\n  return isType(transactionType, \"Upload\" /* Upload */);\n}\nfunction isTypeBlob(transactionType) {\n  return isType(transactionType, \"Blob\" /* Blob */);\n}\nfunction hasSameAssetId(a) {\n  return (b) => a.assetId === b.assetId;\n}\nfunction getReceiptsCall(receipts) {\n  return getReceiptsByType(receipts, ReceiptType4.Call);\n}\nfunction getReceiptsMessageOut(receipts) {\n  return getReceiptsByType(receipts, ReceiptType4.MessageOut);\n}\nfunction mergeAssets(op1, op2) {\n  const assets1 = op1.assetsSent || [];\n  const assets2 = op2.assetsSent || [];\n  const assetMap = /* @__PURE__ */ new Map();\n  assets1.forEach((asset) => {\n    assetMap.set(asset.assetId, { ...asset });\n  });\n  assets2.forEach((asset) => {\n    const existingAsset = assetMap.get(asset.assetId);\n    if (existingAsset) {\n      existingAsset.amount = bn13(existingAsset.amount).add(asset.amount);\n    } else {\n      assetMap.set(asset.assetId, { ...asset });\n    }\n  });\n  return Array.from(assetMap.values());\n}\nfunction isSameOperation(a, b) {\n  return a.name === b.name && a.from?.address === b.from?.address && a.to?.address === b.to?.address && a.from?.type === b.from?.type && a.to?.type === b.to?.type;\n}\nfunction mergeAssetsSent(existing, toAdd) {\n  if (!toAdd.assetsSent?.length) {\n    return existing.assetsSent;\n  }\n  return existing.assetsSent?.length ? mergeAssets(existing, toAdd) : toAdd.assetsSent;\n}\nfunction mergeCalls(existing, toAdd) {\n  if (!toAdd.calls?.length) {\n    return existing.calls;\n  }\n  return [...existing.calls || [], ...toAdd.calls];\n}\nfunction mergeOperations(existing, toAdd) {\n  return {\n    ...existing,\n    assetsSent: mergeAssetsSent(existing, toAdd),\n    calls: mergeCalls(existing, toAdd)\n  };\n}\nfunction addOperation(operations, toAdd) {\n  const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));\n  if (existingIndex === -1) {\n    return [...operations, toAdd];\n  }\n  return operations.map((op, index) => index === existingIndex ? mergeOperations(op, toAdd) : op);\n}\nfunction getReceiptsTransferOut(receipts) {\n  return getReceiptsByType(receipts, ReceiptType4.TransferOut);\n}\nfunction getWithdrawFromFuelOperations({\n  inputs,\n  receipts,\n  baseAssetId\n}) {\n  const messageOutReceipts = getReceiptsMessageOut(receipts);\n  const withdrawFromFuelOperations = messageOutReceipts.reduce(\n    (prevWithdrawFromFuelOps, receipt) => {\n      const input = getInputFromAssetId(inputs, baseAssetId, true);\n      if (input) {\n        const inputAddress = getInputAccountAddress(input);\n        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {\n          name: \"Withdraw from Fuel\" /* withdrawFromFuel */,\n          from: {\n            type: 1 /* account */,\n            address: inputAddress\n          },\n          to: {\n            type: 1 /* account */,\n            address: receipt.recipient.toString(),\n            chain: \"ethereum\" /* ethereum */\n          },\n          assetsSent: [\n            {\n              amount: receipt.amount,\n              assetId: baseAssetId\n            }\n          ]\n        });\n        return newWithdrawFromFuelOps;\n      }\n      return prevWithdrawFromFuelOps;\n    },\n    []\n  );\n  return withdrawFromFuelOperations;\n}\nfunction getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs) {\n  const abi = abiMap?.[contractInput.contractID];\n  if (!abi) {\n    return [];\n  }\n  return [\n    getFunctionCall({\n      abi,\n      receipt,\n      rawPayload,\n      maxInputs\n    })\n  ];\n}\nfunction getAssetsSent(receipt) {\n  return receipt.amount?.isZero() ? void 0 : [\n    {\n      amount: receipt.amount,\n      assetId: receipt.assetId\n    }\n  ];\n}\nfunction processCallReceipt(receipt, contractInput, inputs, abiMap, rawPayload, maxInputs, baseAssetId) {\n  const assetId = receipt.assetId === ZeroBytes329 ? baseAssetId : receipt.assetId;\n  const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);\n  if (!input) {\n    return [];\n  }\n  const inputAddress = getInputAccountAddress(input);\n  const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);\n  return [\n    {\n      name: \"Contract call\" /* contractCall */,\n      from: {\n        type: 1 /* account */,\n        address: inputAddress\n      },\n      to: {\n        type: 0 /* contract */,\n        address: receipt.to\n      },\n      assetsSent: getAssetsSent(receipt),\n      calls\n    }\n  ];\n}\nfunction getContractCallOperations({\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId\n}) {\n  const contractCallReceipts = getReceiptsCall(receipts);\n  const contractOutputs = getOutputsContract(outputs);\n  return contractOutputs.flatMap((output) => {\n    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);\n    if (!contractInput) {\n      return [];\n    }\n    return contractCallReceipts.filter((receipt) => receipt.to === contractInput.contractID).flatMap(\n      (receipt) => processCallReceipt(\n        receipt,\n        contractInput,\n        inputs,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId\n      )\n    );\n  });\n}\nfunction extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs) {\n  const { to: toAddress, assetId, amount } = receipt;\n  let { id: fromAddress } = receipt;\n  const toType = contractInputs.some((input) => input.contractID === toAddress) ? 0 /* contract */ : 1 /* account */;\n  if (ZeroBytes329 === fromAddress) {\n    const change = changeOutputs.find((output) => output.assetId === assetId);\n    fromAddress = change?.to || fromAddress;\n  }\n  const fromType = contractInputs.some((input) => input.contractID === fromAddress) ? 0 /* contract */ : 1 /* account */;\n  return {\n    name: \"Transfer asset\" /* transfer */,\n    from: {\n      type: fromType,\n      address: fromAddress\n    },\n    to: {\n      type: toType,\n      address: toAddress\n    },\n    assetsSent: [\n      {\n        assetId: assetId.toString(),\n        amount\n      }\n    ]\n  };\n}\nfunction getTransferOperations({\n  inputs,\n  outputs,\n  receipts,\n  baseAssetId\n}) {\n  let operations = [];\n  const coinOutputs = getOutputsCoin(outputs);\n  const contractInputs = getInputsContract(inputs);\n  const changeOutputs = getOutputsChange(outputs);\n  const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);\n  coinOutputs.forEach(({ amount, assetId, to }) => {\n    const txPayers = aggregated.get(assetId) || /* @__PURE__ */ new Map();\n    let selectedPayer;\n    let fallbackPayer;\n    for (const [address, payedAmount] of txPayers) {\n      if (!fallbackPayer) {\n        fallbackPayer = address;\n      }\n      if (payedAmount.gte(amount)) {\n        selectedPayer = address;\n        break;\n      }\n    }\n    selectedPayer = selectedPayer || fallbackPayer;\n    if (selectedPayer) {\n      operations = addOperation(operations, {\n        name: \"Transfer asset\" /* transfer */,\n        from: {\n          type: 1 /* account */,\n          address: selectedPayer\n        },\n        to: {\n          type: 1 /* account */,\n          address: to\n        },\n        assetsSent: [{ assetId, amount }]\n      });\n    }\n  });\n  const transferReceipts = getReceiptsByType(\n    receipts,\n    ReceiptType4.Transfer\n  );\n  const transferOutReceipts = getReceiptsByType(\n    receipts,\n    ReceiptType4.TransferOut\n  );\n  [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {\n    const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);\n    operations = addOperation(operations, operation);\n  });\n  return operations;\n}\nfunction getPayProducerOperations(outputs) {\n  const coinOutputs = getOutputsCoin(outputs);\n  const payProducerOperations = coinOutputs.reduce((prev, output) => {\n    const operations = addOperation(prev, {\n      name: \"Pay network fee to block producer\" /* payBlockProducer */,\n      from: {\n        type: 1 /* account */,\n        address: \"Network\"\n      },\n      to: {\n        type: 1 /* account */,\n        address: output.to.toString()\n      },\n      assetsSent: [\n        {\n          assetId: output.assetId.toString(),\n          amount: output.amount\n        }\n      ]\n    });\n    return operations;\n  }, []);\n  return payProducerOperations;\n}\nfunction getContractCreatedOperations({ inputs, outputs }) {\n  const contractCreatedOutputs = getOutputsContractCreated(outputs);\n  const input = getInputsCoinAndMessage(inputs)[0];\n  const fromAddress = getInputAccountAddress(input);\n  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {\n    const operations = addOperation(prev, {\n      name: \"Contract created\" /* contractCreated */,\n      from: {\n        type: 1 /* account */,\n        address: fromAddress\n      },\n      to: {\n        type: 0 /* contract */,\n        address: contractCreatedOutput?.contractId || \"\"\n      }\n    });\n    return operations;\n  }, []);\n  return contractCreatedOperations;\n}\nfunction getOperations({\n  transactionType,\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId\n}) {\n  if (isTypeCreate(transactionType)) {\n    return [...getContractCreatedOperations({ inputs, outputs })];\n  }\n  if (isTypeScript(transactionType)) {\n    return [\n      ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),\n      ...getContractCallOperations({\n        inputs,\n        outputs,\n        receipts,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId\n      }),\n      ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId })\n    ];\n  }\n  return [...getPayProducerOperations(outputs)];\n}\n\n// src/providers/transaction-summary/receipt.ts\nimport { ReceiptType as ReceiptType5 } from \"@fuel-ts/transactions\";\nvar processGqlReceipt = (gqlReceipt) => assembleReceiptByType(gqlReceipt);\nvar extractMintedAssetsFromReceipts = (receipts) => {\n  const mintedAssets = [];\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType5.Mint) {\n      mintedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val\n      });\n    }\n  });\n  return mintedAssets;\n};\nvar extractBurnedAssetsFromReceipts = (receipts) => {\n  const burnedAssets = [];\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType5.Burn) {\n      burnedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val\n      });\n    }\n  });\n  return burnedAssets;\n};\n\n// src/providers/transaction-summary/status.ts\nimport { ErrorCode as ErrorCode13, FuelError as FuelError15 } from \"@fuel-ts/errors\";\nimport { bn as bn14 } from \"@fuel-ts/math\";\nvar getTransactionStatusName = (gqlStatus) => {\n  switch (gqlStatus) {\n    case \"FailureStatus\":\n      return \"failure\" /* failure */;\n    case \"SuccessStatus\":\n      return \"success\" /* success */;\n    case \"SubmittedStatus\":\n      return \"submitted\" /* submitted */;\n    case \"SqueezedOutStatus\":\n      return \"squeezedout\" /* squeezedout */;\n    default:\n      throw new FuelError15(\n        ErrorCode13.INVALID_TRANSACTION_STATUS,\n        `Invalid transaction status: ${gqlStatus}.`\n      );\n  }\n};\nvar processGraphqlStatus = (gqlTransactionStatus) => {\n  let time;\n  let blockId;\n  let status;\n  let totalFee;\n  let totalGas;\n  let isStatusFailure = false;\n  let isStatusSuccess = false;\n  let isStatusPending = false;\n  if (gqlTransactionStatus?.type) {\n    status = getTransactionStatusName(gqlTransactionStatus.type);\n    switch (gqlTransactionStatus.type) {\n      case \"SuccessStatus\":\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusSuccess = true;\n        totalFee = bn14(gqlTransactionStatus.totalFee);\n        totalGas = bn14(gqlTransactionStatus.totalGas);\n        break;\n      case \"FailureStatus\":\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusFailure = true;\n        totalFee = bn14(gqlTransactionStatus.totalFee);\n        totalGas = bn14(gqlTransactionStatus.totalGas);\n        break;\n      case \"SubmittedStatus\":\n        time = gqlTransactionStatus.time;\n        isStatusPending = true;\n        break;\n      default:\n    }\n  }\n  const processedGraphqlStatus = {\n    time,\n    blockId,\n    status,\n    totalFee,\n    totalGas,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending\n  };\n  return processedGraphqlStatus;\n};\nvar getTotalFeeFromStatus = (status) => status && \"totalFee\" in status ? bn14(status.totalFee) : void 0;\n\n// src/providers/transaction-summary/assemble-transaction-summary.ts\nfunction assembleTransactionSummary(params) {\n  const {\n    id,\n    receipts,\n    gasPerByte,\n    gasPriceFactor,\n    transaction,\n    transactionBytes,\n    gqlTransactionStatus,\n    abiMap = {},\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  } = params;\n  const gasUsed = getGasUsedFromReceipts(receipts);\n  const rawPayload = hexlify14(transactionBytes);\n  const operations = getOperations({\n    transactionType: transaction.type,\n    inputs: transaction.inputs || [],\n    outputs: transaction.outputs || [],\n    receipts,\n    rawPayload,\n    abiMap,\n    maxInputs,\n    baseAssetId\n  });\n  const typeName = getTransactionTypeName(transaction.type);\n  const tip = bn15(transaction.policies?.find((policy) => policy.type === PolicyType3.Tip)?.data);\n  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time, totalFee } = processGraphqlStatus(gqlTransactionStatus);\n  const fee = totalFee ?? calculateTXFeeForSummary({\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: {\n      gasCosts,\n      maxGasPerTx,\n      feeParams: {\n        gasPerByte,\n        gasPriceFactor\n      }\n    }\n  });\n  const mintedAssets = extractMintedAssetsFromReceipts(receipts);\n  const burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n  let date;\n  if (time) {\n    date = DateTime.fromTai64(time);\n  }\n  const transactionSummary = {\n    id,\n    tip,\n    fee,\n    gasUsed,\n    operations,\n    type: typeName,\n    blockId,\n    time,\n    status,\n    receipts,\n    mintedAssets,\n    burnedAssets,\n    isTypeMint: isTypeMint(transaction.type),\n    isTypeCreate: isTypeCreate(transaction.type),\n    isTypeScript: isTypeScript(transaction.type),\n    isTypeUpgrade: isTypeUpgrade(transaction.type),\n    isTypeUpload: isTypeUpload(transaction.type),\n    isTypeBlob: isTypeBlob(transaction.type),\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    date,\n    transaction\n  };\n  return transactionSummary;\n}\n\n// src/providers/transaction-response/getDecodedLogs.ts\nimport { Interface as Interface3, BigNumberCoder } from \"@fuel-ts/abi-coder\";\nimport { ReceiptType as ReceiptType6 } from \"@fuel-ts/transactions\";\nfunction getDecodedLogs(receipts, mainAbi, externalAbis = {}) {\n  return receipts.reduce((logs, receipt) => {\n    if (receipt.type === ReceiptType6.LogData || receipt.type === ReceiptType6.Log) {\n      const interfaceToUse = new Interface3(externalAbis[receipt.id] || mainAbi);\n      const data = receipt.type === ReceiptType6.Log ? new BigNumberCoder(\"u64\").encode(receipt.ra) : receipt.data;\n      const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n      logs.push(decodedLog);\n    }\n    return logs;\n  }, []);\n}\n\n// src/providers/transaction-response/transaction-response.ts\nfunction mapGqlOutputsToTxOutputs(outputs) {\n  return outputs.map((o) => {\n    const obj = \"amount\" in o ? { ...o, amount: bn16(o.amount) } : o;\n    switch (obj.type) {\n      case \"CoinOutput\":\n        return { ...obj, type: OutputType8.Coin };\n      case \"ContractOutput\":\n        return {\n          ...obj,\n          type: OutputType8.Contract,\n          inputIndex: parseInt(obj.inputIndex, 10)\n        };\n      case \"ChangeOutput\":\n        return {\n          ...obj,\n          type: OutputType8.Change\n        };\n      case \"VariableOutput\":\n        return { ...obj, type: OutputType8.Variable };\n      case \"ContractCreated\":\n        return {\n          ...obj,\n          type: OutputType8.ContractCreated,\n          contractId: obj.contract\n        };\n      default:\n        return assertUnreachable(obj);\n    }\n  });\n}\nvar TransactionResponse = class {\n  /**\n   * Constructor for `TransactionResponse`.\n   *\n   * @param tx - The transaction ID or TransactionRequest.\n   * @param provider - The provider.\n   */\n  constructor(tx, provider, chainId, abis, submitTxSubscription) {\n    this.submitTxSubscription = submitTxSubscription;\n    this.id = typeof tx === \"string\" ? tx : tx.getTransactionId(chainId);\n    this.provider = provider;\n    this.abis = abis;\n    this.request = typeof tx === \"string\" ? void 0 : tx;\n    this.waitForResult = this.waitForResult.bind(this);\n  }\n  /** Transaction ID */\n  id;\n  /** Current provider */\n  provider;\n  /** Gas used on the transaction */\n  gasUsed = bn16(0);\n  /** The graphql Transaction with receipts object. */\n  gqlTransaction;\n  request;\n  status;\n  abis;\n  /**\n   * Async constructor for `TransactionResponse`. This method can be used to create\n   * an instance of `TransactionResponse` and wait for the transaction to be fetched\n   * from the chain, ensuring that the `gqlTransaction` property is set.\n   *\n   * @param id - The transaction ID.\n   * @param provider - The provider.\n   */\n  static async create(id, provider, abis) {\n    const chainId = await provider.getChainId();\n    const response = new TransactionResponse(id, provider, chainId, abis);\n    await response.fetch();\n    return response;\n  }\n  applyMalleableSubscriptionFields(transaction) {\n    const status = this.status;\n    if (!status) {\n      return;\n    }\n    const tx = transaction;\n    if (status.type === \"SuccessStatus\" || status.type === \"FailureStatus\") {\n      tx.inputs = tx.inputs.map((input, idx) => {\n        if (\"txPointer\" in input) {\n          const correspondingInput = status.transaction.inputs?.[idx];\n          return {\n            ...input,\n            txPointer: TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer)\n          };\n        }\n        return input;\n      });\n      tx.outputs = mapGqlOutputsToTxOutputs(status.transaction.outputs);\n      if (\"receiptsRoot\" in status.transaction) {\n        tx.receiptsRoot = status.transaction.receiptsRoot;\n      }\n    }\n  }\n  async getTransaction() {\n    if (this.request) {\n      const tx = this.request.toTransaction();\n      this.applyMalleableSubscriptionFields(tx);\n      return {\n        tx,\n        bytes: this.request.toTransactionBytes()\n      };\n    }\n    const gqlTransaction = this.gqlTransaction ?? await this.fetch();\n    return {\n      tx: this.decodeTransaction(gqlTransaction),\n      bytes: arrayify11(gqlTransaction.rawPayload)\n    };\n  }\n  getReceipts() {\n    const status = this.status ?? this.gqlTransaction?.status;\n    switch (status?.type) {\n      case \"SuccessStatus\":\n      case \"FailureStatus\":\n        return status.receipts.map(processGqlReceipt);\n      default:\n        return [];\n    }\n  }\n  /**\n   * Fetch the transaction with receipts from the provider.\n   *\n   * @returns Transaction with receipts query result.\n   */\n  async fetch() {\n    const response = await this.provider.operations.getTransactionWithReceipts({\n      transactionId: this.id\n    });\n    if (!response.transaction) {\n      const subscription = await this.provider.operations.statusChange({\n        transactionId: this.id\n      });\n      for await (const { statusChange } of subscription) {\n        if (statusChange) {\n          this.status = statusChange;\n          break;\n        }\n      }\n      return this.fetch();\n    }\n    this.gqlTransaction = response.transaction;\n    return response.transaction;\n  }\n  /**\n   * Decode the raw payload of the transaction.\n   *\n   * @param transactionWithReceipts - The transaction with receipts object.\n   * @returns The decoded transaction.\n   */\n  decodeTransaction(transactionWithReceipts) {\n    return new TransactionCoder4().decode(\n      arrayify11(transactionWithReceipts.rawPayload),\n      0\n    )?.[0];\n  }\n  /**\n   * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will\n   * fetch it from the provider\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns\n   */\n  async getTransactionSummary(contractsAbiMap) {\n    const { tx: transaction, bytes: transactionBytes } = await this.getTransaction();\n    const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await this.provider.getGasConfig();\n    const totalFee = getTotalFeeFromStatus(this.status ?? this.gqlTransaction?.status);\n    const gasPrice = totalFee ? bn16(0) : await this.provider.getLatestGasPrice();\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const transactionSummary = assembleTransactionSummary({\n      id: this.id,\n      receipts: this.getReceipts(),\n      transaction,\n      transactionBytes,\n      gqlTransactionStatus: this.status ?? this.gqlTransaction?.status,\n      gasPerByte,\n      gasPriceFactor,\n      abiMap: contractsAbiMap,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId\n    });\n    return transactionSummary;\n  }\n  async waitForStatusChange() {\n    const status = this.gqlTransaction?.status?.type;\n    if (status && status !== \"SubmittedStatus\") {\n      return;\n    }\n    const subscription = this.submitTxSubscription ?? await this.provider.operations.statusChange({\n      transactionId: this.id\n    });\n    for await (const sub2 of subscription) {\n      const statusChange = \"statusChange\" in sub2 ? sub2.statusChange : sub2.submitAndAwaitStatus;\n      this.status = statusChange;\n      if (statusChange.type === \"SqueezedOutStatus\") {\n        this.unsetResourceCache();\n        throw new FuelError16(\n          ErrorCode14.TRANSACTION_SQUEEZED_OUT,\n          `Transaction Squeezed Out with reason: ${statusChange.reason}`\n        );\n      }\n      if (statusChange.type !== \"SubmittedStatus\") {\n        break;\n      }\n    }\n  }\n  /**\n   * Assembles the result of a transaction by retrieving the transaction summary,\n   * decoding logs (if available), and handling transaction failure.\n   *\n   * This method can be used to obtain the result of a transaction that has just\n   * been submitted or one that has already been processed.\n   *\n   * @template TTransactionType - The type of the transaction.\n   * @param contractsAbiMap - The map of contract ABIs.\n   * @returns - The assembled transaction result.\n   * @throws If the transaction status is a failure.\n   */\n  async assembleResult(contractsAbiMap) {\n    const transactionSummary = await this.getTransactionSummary(contractsAbiMap);\n    const transactionResult = {\n      ...transactionSummary\n    };\n    let logs = [];\n    if (this.abis) {\n      logs = getDecodedLogs(\n        transactionSummary.receipts,\n        this.abis.main,\n        this.abis.otherContractsAbis\n      );\n      transactionResult.logs = logs;\n    }\n    const { receipts } = transactionResult;\n    const status = this.status ?? this.gqlTransaction?.status;\n    if (status?.type === \"FailureStatus\") {\n      this.unsetResourceCache();\n      const { reason } = status;\n      throw extractTxError({\n        receipts,\n        statusReason: reason,\n        logs\n      });\n    }\n    return transactionResult;\n  }\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction result\n   */\n  async waitForResult(contractsAbiMap) {\n    await this.waitForStatusChange();\n    return this.assembleResult(contractsAbiMap);\n  }\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   */\n  async wait(contractsAbiMap) {\n    return this.waitForResult(contractsAbiMap);\n  }\n  unsetResourceCache() {\n    this.provider.cache?.unset(this.id);\n  }\n};\n\n// src/providers/utils/auto-retry-fetch.ts\nimport { sleep } from \"@fuel-ts/utils\";\nfunction getWaitDelay(options, retryAttemptNum) {\n  const duration = options.baseDelay ?? 150;\n  switch (options.backoff) {\n    case \"linear\":\n      return duration * retryAttemptNum;\n    case \"fixed\":\n      return duration;\n    case \"exponential\":\n    default:\n      return 2 ** (retryAttemptNum - 1) * duration;\n  }\n}\nfunction autoRetryFetch(fetchFn, options, retryAttemptNum = 0) {\n  if (options === void 0) {\n    return fetchFn;\n  }\n  return async (...args) => {\n    try {\n      return await fetchFn(...args);\n    } catch (_error) {\n      const error = _error;\n      if (error.cause?.code !== \"ECONNREFUSED\") {\n        throw error;\n      }\n      const retryNum = retryAttemptNum + 1;\n      if (retryNum > options.maxRetries) {\n        throw error;\n      }\n      const delay = getWaitDelay(options, retryNum);\n      await sleep(delay);\n      return autoRetryFetch(fetchFn, options, retryNum)(...args);\n    }\n  };\n}\n\n// src/providers/utils/validate-pagination-args.ts\nimport { FuelError as FuelError17, ErrorCode as ErrorCode15 } from \"@fuel-ts/errors\";\nvar validatePaginationArgs = (params) => {\n  const { paginationLimit, inputArgs = {} } = params;\n  const { first, last, after, before } = inputArgs;\n  if (after && before) {\n    throw new FuelError17(\n      ErrorCode15.INVALID_INPUT_PARAMETERS,\n      'Pagination arguments \"after\" and \"before\" cannot be used together'\n    );\n  }\n  if ((first || 0) > paginationLimit || (last || 0) > paginationLimit) {\n    throw new FuelError17(\n      ErrorCode15.INVALID_INPUT_PARAMETERS,\n      `Pagination limit for this query cannot exceed ${paginationLimit} items`\n    );\n  }\n  if (first && before) {\n    throw new FuelError17(\n      ErrorCode15.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"first\" with \"before\" is not supported'\n    );\n  }\n  if (last && after) {\n    throw new FuelError17(\n      ErrorCode15.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"last\" with \"after\" is not supported'\n    );\n  }\n  if (!first && !last) {\n    inputArgs.first = paginationLimit;\n  }\n  return inputArgs;\n};\n\n// src/providers/provider.ts\nvar MAX_RETRIES = 10;\nvar RESOURCES_PAGE_SIZE_LIMIT = 512;\nvar TRANSACTIONS_PAGE_SIZE_LIMIT = 60;\nvar BLOCKS_PAGE_SIZE_LIMIT = 5;\nvar DEFAULT_RESOURCE_CACHE_TTL = 2e4;\nvar GAS_USED_MODIFIER = 1.2;\nvar processGqlChain = (chain) => {\n  const { name, daHeight, consensusParameters } = chain;\n  const {\n    contractParams,\n    feeParams,\n    predicateParams,\n    scriptParams,\n    txParams,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version\n  } = consensusParameters;\n  return {\n    name,\n    baseChainHeight: bn17(daHeight),\n    consensusParameters: {\n      version,\n      chainId: bn17(chainId),\n      baseAssetId,\n      feeParameters: {\n        version: feeParams.version,\n        gasPerByte: bn17(feeParams.gasPerByte),\n        gasPriceFactor: bn17(feeParams.gasPriceFactor)\n      },\n      contractParameters: {\n        version: contractParams.version,\n        contractMaxSize: bn17(contractParams.contractMaxSize),\n        maxStorageSlots: bn17(contractParams.maxStorageSlots)\n      },\n      txParameters: {\n        version: txParams.version,\n        maxInputs: bn17(txParams.maxInputs),\n        maxOutputs: bn17(txParams.maxOutputs),\n        maxWitnesses: bn17(txParams.maxWitnesses),\n        maxGasPerTx: bn17(txParams.maxGasPerTx),\n        maxSize: bn17(txParams.maxSize),\n        maxBytecodeSubsections: bn17(txParams.maxBytecodeSubsections)\n      },\n      predicateParameters: {\n        version: predicateParams.version,\n        maxPredicateLength: bn17(predicateParams.maxPredicateLength),\n        maxPredicateDataLength: bn17(predicateParams.maxPredicateDataLength),\n        maxGasPerPredicate: bn17(predicateParams.maxGasPerPredicate),\n        maxMessageDataLength: bn17(predicateParams.maxMessageDataLength)\n      },\n      scriptParameters: {\n        version: scriptParams.version,\n        maxScriptLength: bn17(scriptParams.maxScriptLength),\n        maxScriptDataLength: bn17(scriptParams.maxScriptDataLength)\n      },\n      gasCosts\n    }\n  };\n};\nvar _cacheInputs, cacheInputs_fn;\nvar _Provider = class {\n  /**\n   * Constructor to initialize a Provider.\n   *\n   * @param url - GraphQL endpoint of the Fuel node\n   * @param options - Additional options for the provider\n   * @hidden\n   */\n  constructor(url, options = {}) {\n    /**\n     * @hidden\n     */\n    __privateAdd(this, _cacheInputs);\n    __publicField(this, \"operations\");\n    __publicField(this, \"cache\");\n    /** @hidden */\n    __publicField(this, \"url\");\n    /** @hidden */\n    __publicField(this, \"urlWithoutAuth\");\n    /** @hidden */\n    __publicField(this, \"consensusParametersTimestamp\");\n    __publicField(this, \"options\", {\n      timeout: void 0,\n      resourceCacheTTL: void 0,\n      fetch: void 0,\n      retryOptions: void 0,\n      headers: void 0\n    });\n    const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = _Provider.extractBasicAuth(url);\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.url = url;\n    const { FUELS } = versions;\n    const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };\n    this.options = {\n      ...this.options,\n      ...options,\n      headers\n    };\n    this.operations = this.createOperations();\n    const { resourceCacheTTL } = this.options;\n    if (isDefined2(resourceCacheTTL)) {\n      if (resourceCacheTTL !== -1) {\n        this.cache = new ResourceCache(resourceCacheTTL);\n      } else {\n        this.cache = void 0;\n      }\n    } else {\n      this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);\n    }\n  }\n  /** @hidden */\n  static clearChainAndNodeCaches() {\n    _Provider.nodeInfoCache = {};\n    _Provider.chainInfoCache = {};\n  }\n  /**\n   * @hidden\n   */\n  static getFetchFn(options) {\n    const { retryOptions, timeout, headers } = options;\n    return autoRetryFetch(async (...args) => {\n      const url = args[0];\n      const request2 = args[1];\n      const signal = timeout ? AbortSignal.timeout(timeout) : void 0;\n      let fullRequest = {\n        ...request2,\n        signal,\n        headers: { ...request2?.headers, ...headers }\n      };\n      if (options.requestMiddleware) {\n        fullRequest = await options.requestMiddleware(fullRequest);\n      }\n      return options.fetch ? options.fetch(url, fullRequest, options) : fetch(url, fullRequest);\n    }, retryOptions);\n  }\n  static extractBasicAuth(url) {\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (error) {\n      throw new FuelError18(FuelError18.CODES.INVALID_URL, \"Invalid URL provided.\", { url }, error);\n    }\n    const username = parsedUrl.username;\n    const password = parsedUrl.password;\n    const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    if (!(username && password)) {\n      return { url, urlWithoutAuth: url, headers: void 0 };\n    }\n    return {\n      url,\n      urlWithoutAuth,\n      headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` }\n    };\n  }\n  /**\n   * Initialize Provider async stuff\n   */\n  async init() {\n    await this.fetchChainAndNodeInfo();\n    return this;\n  }\n  /**\n   * Returns the `chainInfo` for the current network.\n   *\n   * @returns the chain information configuration.\n   */\n  async getChain() {\n    await this.init();\n    return _Provider.chainInfoCache[this.urlWithoutAuth];\n  }\n  /**\n   * Returns the `nodeInfo` for the current network.\n   *\n   * @returns the node information configuration.\n   */\n  async getNode() {\n    await this.init();\n    return _Provider.nodeInfoCache[this.urlWithoutAuth];\n  }\n  /**\n   * Returns some helpful parameters related to gas fees.\n   */\n  async getGasConfig() {\n    const {\n      txParameters: { maxGasPerTx },\n      predicateParameters: { maxGasPerPredicate },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts\n    } = (await this.getChain()).consensusParameters;\n    return {\n      maxGasPerTx,\n      maxGasPerPredicate,\n      gasPriceFactor,\n      gasPerByte,\n      gasCosts\n    };\n  }\n  /**\n   * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.\n   *\n   * @param url - The URL to connect to.\n   * @param options - Additional options for the provider.\n   */\n  async connect(url, options) {\n    const { url: rawUrl, urlWithoutAuth, headers } = _Provider.extractBasicAuth(url);\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.options = options ?? this.options;\n    this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };\n    this.operations = this.createOperations();\n    await this.init();\n  }\n  /**\n   * Return the chain and node information.\n   * @param ignoreCache - If true, ignores the cache and re-fetch configs.\n   * @returns A promise that resolves to the Chain and NodeInfo.\n   */\n  async fetchChainAndNodeInfo(ignoreCache = false) {\n    let nodeInfo;\n    let chain;\n    try {\n      nodeInfo = _Provider.nodeInfoCache[this.urlWithoutAuth];\n      chain = _Provider.chainInfoCache[this.urlWithoutAuth];\n      const noCache = !nodeInfo || !chain;\n      if (ignoreCache || noCache) {\n        throw new Error(`Jumps to the catch block and re-fetch`);\n      }\n    } catch (_err) {\n      const data = await this.operations.getChainAndNodeInfo();\n      nodeInfo = {\n        maxDepth: bn17(data.nodeInfo.maxDepth),\n        maxTx: bn17(data.nodeInfo.maxTx),\n        nodeVersion: data.nodeInfo.nodeVersion,\n        utxoValidation: data.nodeInfo.utxoValidation,\n        vmBacktrace: data.nodeInfo.vmBacktrace\n      };\n      _Provider.setIncompatibleNodeVersionMessage(nodeInfo);\n      chain = processGqlChain(data.chain);\n      _Provider.chainInfoCache[this.urlWithoutAuth] = chain;\n      _Provider.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;\n      this.consensusParametersTimestamp = Date.now();\n    }\n    return {\n      chain,\n      nodeInfo\n    };\n  }\n  /**\n   * @hidden\n   */\n  static setIncompatibleNodeVersionMessage(nodeInfo) {\n    const { isMajorSupported, isMinorSupported, supportedVersion } = checkFuelCoreVersionCompatibility(nodeInfo.nodeVersion);\n    if (!isMajorSupported || !isMinorSupported) {\n      _Provider.incompatibleNodeVersionMessage = [\n        `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion}.`,\n        `The TS SDK currently supports fuel-core version ${supportedVersion}.`,\n        `Things may not work as expected.`\n      ].join(\"\\n\");\n      FuelGraphqlSubscriber.incompatibleNodeVersionMessage = _Provider.incompatibleNodeVersionMessage;\n    }\n  }\n  /**\n   * Create GraphQL client and set operations.\n   *\n   * @returns The operation SDK object\n   * @hidden\n   */\n  createOperations() {\n    const fetchFn = _Provider.getFetchFn(this.options);\n    const gqlClient = new GraphQLClient(this.urlWithoutAuth, {\n      fetch: (input, requestInit) => fetchFn(input.toString(), requestInit || {}, this.options),\n      responseMiddleware: (response) => {\n        if (\"response\" in response) {\n          const graphQlResponse = response.response;\n          assertGqlResponseHasNoErrors(\n            graphQlResponse.errors,\n            _Provider.incompatibleNodeVersionMessage\n          );\n        }\n      }\n    });\n    const executeQuery = (query, vars) => {\n      const opDefinition = query.definitions.find((x) => x.kind === \"OperationDefinition\");\n      const isSubscription = opDefinition?.operation === \"subscription\";\n      if (isSubscription) {\n        return FuelGraphqlSubscriber.create({\n          url: this.urlWithoutAuth,\n          query,\n          fetchFn: (url, requestInit) => fetchFn(url, requestInit, this.options),\n          variables: vars\n        });\n      }\n      return gqlClient.request(query, vars);\n    };\n    const customOperations = (requester) => ({\n      getBlobs(variables) {\n        const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(\", \");\n        const blobParams = variables.blobIds.map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`).join(\"\\n\");\n        const updatedVariables = variables.blobIds.reduce(\n          (acc, blobId, i) => {\n            acc[`blobId${i}`] = blobId;\n            return acc;\n          },\n          {}\n        );\n        const document2 = gql2`\n          query getBlobs(${queryParams}) {\n            ${blobParams}\n          }\n        `;\n        return requester(document2, updatedVariables);\n      }\n    });\n    return { ...getSdk(executeQuery), ...customOperations(executeQuery) };\n  }\n  /**\n   * Returns the version of the connected node.\n   *\n   * @returns A promise that resolves to the version string.\n   */\n  async getVersion() {\n    const {\n      nodeInfo: { nodeVersion }\n    } = await this.operations.getVersion();\n    return nodeVersion;\n  }\n  /**\n   * Returns the latest block number.\n   *\n   * @returns A promise that resolves to the latest block number.\n   */\n  async getBlockNumber() {\n    const {\n      chain: {\n        latestBlock: { height }\n      }\n    } = await this.operations.getLatestBlockHeight();\n    return bn17(height);\n  }\n  /**\n   * Returns the node information for the current provider network.\n   *\n   * @returns a promise that resolves to the node information.\n   */\n  async fetchNode() {\n    const { nodeInfo } = await this.operations.getNodeInfo();\n    const processedNodeInfo = {\n      maxDepth: bn17(nodeInfo.maxDepth),\n      maxTx: bn17(nodeInfo.maxTx),\n      nodeVersion: nodeInfo.nodeVersion,\n      utxoValidation: nodeInfo.utxoValidation,\n      vmBacktrace: nodeInfo.vmBacktrace\n    };\n    _Provider.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;\n    return processedNodeInfo;\n  }\n  /**\n   * Returns the chain information for the current provider network.\n   *\n   * @returns a promise that resolves to the chain information.\n   */\n  async fetchChain() {\n    const { chain } = await this.operations.getChain();\n    const processedChain = processGqlChain(chain);\n    _Provider.chainInfoCache[this.urlWithoutAuth] = processedChain;\n    return processedChain;\n  }\n  /**\n   * Returns the chain ID for the current provider network.\n   *\n   * @returns A promise that resolves to the chain ID number.\n   */\n  async getChainId() {\n    const {\n      consensusParameters: { chainId }\n    } = await this.getChain();\n    return chainId.toNumber();\n  }\n  /**\n   * Returns the base asset ID for the current provider network.\n   *\n   * @returns the base asset ID.\n   */\n  async getBaseAssetId() {\n    const all = await this.getChain();\n    const {\n      consensusParameters: { baseAssetId }\n    } = all;\n    return baseAssetId;\n  }\n  /**\n   * @hidden\n   */\n  async validateTransaction(tx) {\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs, maxOutputs }\n      }\n    } = await this.getChain();\n    if (bn17(tx.inputs.length).gt(maxInputs)) {\n      throw new FuelError18(\n        ErrorCode16.MAX_INPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`\n      );\n    }\n    if (bn17(tx.outputs.length).gt(maxOutputs)) {\n      throw new FuelError18(\n        ErrorCode16.MAX_OUTPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`\n      );\n    }\n  }\n  /**\n   * Submits a transaction to the chain to be executed.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response object.\n   */\n  async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, enableAssetBurn } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.estimateTxDependencies(transactionRequest);\n    }\n    await this.validateTransaction(transactionRequest);\n    const encodedTransaction = hexlify15(transactionRequest.toTransactionBytes());\n    let abis;\n    if (isTransactionTypeScript(transactionRequest)) {\n      abis = transactionRequest.abis;\n    }\n    const subscription = await this.operations.submitAndAwaitStatus({ encodedTransaction });\n    __privateMethod(this, _cacheInputs, cacheInputs_fn).call(this, transactionRequest.inputs, transactionRequest.getTransactionId(await this.getChainId()));\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);\n  }\n  /**\n   * Executes a transaction without actually submitting it to the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async dryRun(transactionRequestLike, { utxoValidation, estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransaction = hexlify15(transactionRequest.toTransactionBytes());\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions: encodedTransaction,\n      utxoValidation: utxoValidation || false\n    });\n    const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;\n    const receipts = rawReceipts.map(processGqlReceipt);\n    return { receipts, dryRunStatus };\n  }\n  /**\n   * Verifies whether enough gas is available to complete transaction.\n   *\n   * @template T - The type of the transaction request object.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @returns A promise that resolves to the estimated transaction request object.\n   */\n  async estimatePredicates(transactionRequest) {\n    const shouldEstimatePredicates = Boolean(\n      transactionRequest.inputs.find(\n        (input) => \"predicate\" in input && input.predicate && !equalBytes(arrayify12(input.predicate), arrayify12(\"0x\")) && new BN2(input.predicateGasUsed).isZero()\n      )\n    );\n    if (!shouldEstimatePredicates) {\n      return transactionRequest;\n    }\n    const encodedTransaction = hexlify15(transactionRequest.toTransactionBytes());\n    const response = await this.operations.estimatePredicates({\n      encodedTransaction\n    });\n    const {\n      estimatePredicates: { inputs }\n    } = response;\n    if (inputs) {\n      inputs.forEach((input, index) => {\n        if (\"predicateGasUsed\" in input && bn17(input.predicateGasUsed).gt(0)) {\n          transactionRequest.inputs[index].predicateGasUsed = input.predicateGasUsed;\n        }\n      });\n    }\n    return transactionRequest;\n  }\n  /**\n   * Will dryRun a transaction and check for missing dependencies.\n   *\n   * If there are missing variable outputs,\n   * `addVariableOutputs` is called on the transaction.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @param gasPrice - The gas price to use for the transaction, if not provided it will be fetched.\n   * @returns A promise that resolves to the estimate transaction dependencies.\n   */\n  async estimateTxDependencies(transactionRequest, { gasPrice: gasPriceParam } = {}) {\n    if (isTransactionTypeCreate(transactionRequest)) {\n      return {\n        receipts: [],\n        outputVariables: 0,\n        missingContractIds: []\n      };\n    }\n    let receipts = [];\n    const missingContractIds = [];\n    let outputVariables = 0;\n    let dryRunStatus;\n    await this.validateTransaction(transactionRequest);\n    const gasPrice = gasPriceParam ?? await this.estimateGasPrice(10);\n    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {\n      const {\n        dryRun: [{ receipts: rawReceipts, status }]\n      } = await this.operations.dryRun({\n        encodedTransactions: [hexlify15(transactionRequest.toTransactionBytes())],\n        utxoValidation: false,\n        gasPrice: gasPrice.toString()\n      });\n      receipts = rawReceipts.map(processGqlReceipt);\n      dryRunStatus = status;\n      const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(receipts);\n      const hasMissingOutputs = missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;\n      if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {\n        outputVariables += missingOutputVariables.length;\n        transactionRequest.addVariableOutputs(missingOutputVariables.length);\n        missingOutputContractIds.forEach(({ contractId }) => {\n          transactionRequest.addContractInputAndOutput(new Address2(contractId));\n          missingContractIds.push(contractId);\n        });\n        const { maxFee } = await this.estimateTxGasAndFee({\n          transactionRequest,\n          gasPrice\n        });\n        transactionRequest.maxFee = maxFee;\n      } else {\n        break;\n      }\n    }\n    return {\n      receipts,\n      outputVariables,\n      missingContractIds,\n      dryRunStatus\n    };\n  }\n  /**\n   * Dry runs multiple transactions and checks for missing dependencies in batches.\n   *\n   * Transactions are dry run in batches. After each dry run, transactions requiring\n   * further modifications are identified. The method iteratively updates these transactions\n   * and performs subsequent dry runs until all dependencies for each transaction are satisfied.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @returns A promise that resolves to an array of results for each transaction.\n   */\n  async estimateMultipleTxDependencies(transactionRequests) {\n    const results = transactionRequests.map(() => ({\n      receipts: [],\n      outputVariables: 0,\n      missingContractIds: [],\n      dryRunStatus: void 0\n    }));\n    const allRequests = clone8(transactionRequests);\n    const serializedTransactionsMap = /* @__PURE__ */ new Map();\n    allRequests.forEach((req, index) => {\n      if (isTransactionTypeScript(req)) {\n        serializedTransactionsMap.set(index, hexlify15(req.toTransactionBytes()));\n      }\n    });\n    let transactionsToProcess = Array.from(serializedTransactionsMap.keys());\n    let attempt = 0;\n    while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {\n      const encodedTransactions = transactionsToProcess.map(\n        (index) => serializedTransactionsMap.get(index)\n      );\n      const dryRunResults = await this.operations.dryRun({\n        encodedTransactions,\n        utxoValidation: false\n      });\n      const nextRoundTransactions = [];\n      for (let i = 0; i < dryRunResults.dryRun.length; i++) {\n        const requestIdx = transactionsToProcess[i];\n        const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];\n        const result = results[requestIdx];\n        result.receipts = rawReceipts.map(processGqlReceipt);\n        result.dryRunStatus = status;\n        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(\n          result.receipts\n        );\n        const hasMissingOutputs = missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;\n        const request2 = allRequests[requestIdx];\n        if (hasMissingOutputs && isTransactionTypeScript(request2)) {\n          result.outputVariables += missingOutputVariables.length;\n          request2.addVariableOutputs(missingOutputVariables.length);\n          missingOutputContractIds.forEach(({ contractId }) => {\n            request2.addContractInputAndOutput(new Address2(contractId));\n            result.missingContractIds.push(contractId);\n          });\n          const { maxFee } = await this.estimateTxGasAndFee({\n            transactionRequest: request2\n          });\n          request2.maxFee = maxFee;\n          serializedTransactionsMap.set(requestIdx, hexlify15(request2.toTransactionBytes()));\n          nextRoundTransactions.push(requestIdx);\n        }\n      }\n      transactionsToProcess = nextRoundTransactions;\n      attempt += 1;\n    }\n    return results;\n  }\n  /**\n   * Dry runs multiple transactions.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   *\n   * @returns A promise that resolves to an array of results for each transaction call.\n   */\n  async dryRunMultipleTransactions(transactionRequests, { utxoValidation, estimateTxDependencies = true } = {}) {\n    if (estimateTxDependencies) {\n      return this.estimateMultipleTxDependencies(transactionRequests);\n    }\n    const encodedTransactions = transactionRequests.map((tx) => hexlify15(tx.toTransactionBytes()));\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: utxoValidation || false\n    });\n    const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {\n      const receipts = rawReceipts.map(processGqlReceipt);\n      return { receipts, dryRunStatus: status };\n    });\n    return results;\n  }\n  async autoRefetchConfigs() {\n    const now = Date.now();\n    const diff = now - (this.consensusParametersTimestamp ?? 0);\n    if (diff < 6e4) {\n      return;\n    }\n    if (!_Provider.chainInfoCache?.[this.urlWithoutAuth]) {\n      await this.fetchChainAndNodeInfo(true);\n      return;\n    }\n    const chainInfo = _Provider.chainInfoCache[this.urlWithoutAuth];\n    const {\n      consensusParameters: { version: previous }\n    } = chainInfo;\n    const {\n      chain: {\n        latestBlock: {\n          header: { consensusParametersVersion: current }\n        }\n      }\n    } = await this.operations.getConsensusParametersVersion();\n    if (previous !== current) {\n      await this.fetchChainAndNodeInfo(true);\n    }\n  }\n  /**\n   * Estimates the transaction gas and fee based on the provided transaction request.\n   * @param params - The parameters for estimating the transaction gas and fee.\n   * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.\n   */\n  async estimateTxGasAndFee(params) {\n    const { transactionRequest, gasPrice: gasPriceParam } = params;\n    let gasPrice = gasPriceParam;\n    await this.autoRefetchConfigs();\n    const chainInfo = await this.getChain();\n    const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();\n    const minGas = transactionRequest.calculateMinGas(chainInfo);\n    if (!isDefined2(gasPrice)) {\n      gasPrice = await this.estimateGasPrice(10);\n    }\n    const minFee = calculateGasFee({\n      gasPrice: bn17(gasPrice),\n      gas: minGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip\n    }).add(1);\n    let gasLimit = bn17(0);\n    if (isTransactionTypeScript(transactionRequest)) {\n      gasLimit = transactionRequest.gasLimit;\n      if (transactionRequest.gasLimit.eq(0)) {\n        transactionRequest.gasLimit = minGas;\n        transactionRequest.gasLimit = maxGasPerTx.sub(\n          transactionRequest.calculateMaxGas(chainInfo, minGas)\n        );\n        gasLimit = transactionRequest.gasLimit;\n      }\n    }\n    const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);\n    const maxFee = calculateGasFee({\n      gasPrice: bn17(gasPrice),\n      gas: maxGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip\n    }).add(1);\n    return {\n      minGas,\n      minFee,\n      maxGas,\n      maxFee,\n      gasPrice,\n      gasLimit\n    };\n  }\n  /**\n   * Executes a signed transaction without applying the states changes\n   * on the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async simulate(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransactions = [hexlify15(transactionRequest.toTransactionBytes())];\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: true\n    });\n    const callResult = dryRunStatuses.map((dryRunStatus) => {\n      const { id, receipts, status } = dryRunStatus;\n      const processedReceipts = receipts.map(processGqlReceipt);\n      return { id, receipts: processedReceipts, status };\n    });\n    return { receipts: callResult[0].receipts };\n  }\n  /**\n   * @hidden\n   *\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(transactionRequestLike, { signatureCallback, gasPrice: gasPriceParam } = {}) {\n    const txRequestClone = clone8(transactionRequestify(transactionRequestLike));\n    const updateMaxFee = txRequestClone.maxFee.eq(0);\n    const isScriptTransaction = isTransactionTypeScript(txRequestClone);\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = bn17(0);\n    }\n    const signedRequest = clone8(txRequestClone);\n    let addedSignatures = 0;\n    if (signatureCallback && isTransactionTypeScript(signedRequest)) {\n      const lengthBefore = signedRequest.witnesses.length;\n      await signatureCallback(signedRequest);\n      addedSignatures = signedRequest.witnesses.length - lengthBefore;\n    }\n    await this.estimatePredicates(signedRequest);\n    txRequestClone.updatePredicateGasUsed(signedRequest.inputs);\n    const gasPrice = gasPriceParam ?? await this.estimateGasPrice(10);\n    let { maxFee, maxGas, minFee, minGas, gasLimit } = await this.estimateTxGasAndFee({\n      // Fetches and returns a gas price\n      transactionRequest: signedRequest,\n      gasPrice\n    });\n    let receipts = [];\n    let dryRunStatus;\n    let missingContractIds = [];\n    let outputVariables = 0;\n    let gasUsed = bn17(0);\n    txRequestClone.maxFee = maxFee;\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = gasLimit;\n      if (signatureCallback) {\n        await signatureCallback(txRequestClone);\n      }\n      ({ receipts, missingContractIds, outputVariables, dryRunStatus } = await this.estimateTxDependencies(txRequestClone, { gasPrice }));\n      if (dryRunStatus && \"reason\" in dryRunStatus) {\n        throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus);\n      }\n      const { maxGasPerTx } = await this.getGasConfig();\n      const pristineGasUsed = getGasUsedFromReceipts(receipts);\n      gasUsed = bn17(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));\n      txRequestClone.gasLimit = gasUsed;\n      ({ maxFee, maxGas, minFee, minGas } = await this.estimateTxGasAndFee({\n        transactionRequest: txRequestClone,\n        gasPrice\n      }));\n    }\n    return {\n      receipts,\n      gasUsed,\n      gasPrice,\n      minGas,\n      maxGas,\n      minFee,\n      maxFee,\n      outputVariables,\n      missingContractIds,\n      addedSignatures,\n      estimatedPredicates: txRequestClone.inputs,\n      dryRunStatus,\n      updateMaxFee\n    };\n  }\n  /**\n   * Returns coins for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get (optional).\n   * @param paginationArgs - Pagination arguments (optional).\n   *\n   * @returns A promise that resolves to the coins.\n   */\n  async getCoins(owner, assetId, paginationArgs) {\n    const ownerAddress = new Address2(owner);\n    const {\n      coins: { edges, pageInfo }\n    } = await this.operations.getCoins({\n      ...validatePaginationArgs({\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n        inputArgs: paginationArgs\n      }),\n      filter: { owner: ownerAddress.toB256(), assetId: assetId && hexlify15(assetId) }\n    });\n    const coins = edges.map(({ node }) => ({\n      id: node.utxoId,\n      assetId: node.assetId,\n      amount: bn17(node.amount),\n      owner: ownerAddress,\n      blockCreated: bn17(node.blockCreated),\n      txCreatedIdx: bn17(node.txCreatedIdx)\n    }));\n    return {\n      coins,\n      pageInfo\n    };\n  }\n  /**\n   * Returns resources for the given owner satisfying the spend query.\n   *\n   * @param owner - The address to get resources for.\n   * @param quantities - The coin quantities to get.\n   * @param excludedIds - IDs of excluded resources from the selection (optional).\n   * @returns A promise that resolves to the resources.\n   */\n  async getResourcesToSpend(owner, quantities, excludedIds) {\n    const ownerAddress = new Address2(owner);\n    const excludeInput = {\n      messages: excludedIds?.messages?.map((nonce) => hexlify15(nonce)) || [],\n      utxos: excludedIds?.utxos?.map((id) => hexlify15(id)) || []\n    };\n    if (this.cache) {\n      const cached = this.cache.getActiveData();\n      excludeInput.messages.push(...cached.messages);\n      excludeInput.utxos.push(...cached.utxos);\n    }\n    const coinsQuery = {\n      owner: ownerAddress.toB256(),\n      queryPerAsset: quantities.map(coinQuantityfy).map(({ assetId, amount, max: maxPerAsset }) => ({\n        assetId: hexlify15(assetId),\n        amount: amount.toString(10),\n        max: maxPerAsset ? maxPerAsset.toString(10) : void 0\n      })),\n      excludedIds: excludeInput\n    };\n    const result = await this.operations.getCoinsToSpend(coinsQuery);\n    const coins = result.coinsToSpend.flat().map((coin) => {\n      switch (coin.type) {\n        case \"MessageCoin\":\n          return {\n            amount: bn17(coin.amount),\n            assetId: coin.assetId,\n            daHeight: bn17(coin.daHeight),\n            sender: new Address2(coin.sender),\n            recipient: new Address2(coin.recipient),\n            nonce: coin.nonce\n          };\n        case \"Coin\":\n          return {\n            id: coin.utxoId,\n            amount: bn17(coin.amount),\n            assetId: coin.assetId,\n            owner: ownerAddress,\n            blockCreated: bn17(coin.blockCreated),\n            txCreatedIdx: bn17(coin.txCreatedIdx)\n          };\n        default:\n          return null;\n      }\n    }).filter((v) => !!v);\n    return coins;\n  }\n  /**\n   * Returns an array of blobIds that exist on chain, for a given array of blobIds.\n   *\n   * @param blobIds - blobIds to check.\n   * @returns - A promise that resolves to an array of blobIds that exist on chain.\n   */\n  async getBlobs(blobIds) {\n    const res = await this.operations.getBlobs({ blobIds });\n    const blobs = [];\n    Object.keys(res).forEach((key) => {\n      const val = res[key];\n      blobs.push(val?.id ?? null);\n    });\n    return blobs.filter((v) => v);\n  }\n  /**\n   * Returns block matching the given ID or height.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block or null.\n   */\n  async getBlock(idOrHeight) {\n    let block;\n    if (idOrHeight === \"latest\") {\n      const {\n        chain: { latestBlock }\n      } = await this.operations.getLatestBlock();\n      block = latestBlock;\n    } else {\n      const isblockId = typeof idOrHeight === \"string\" && idOrHeight.length === 66;\n      const variables = isblockId ? { blockId: idOrHeight } : { height: bn17(idOrHeight).toString(10) };\n      const response = await this.operations.getBlock(variables);\n      block = response.block;\n    }\n    if (!block) {\n      return null;\n    }\n    const { header, height, id, transactions } = block;\n    return {\n      id,\n      height: bn17(height),\n      time: header.time,\n      header: {\n        applicationHash: header.applicationHash,\n        daHeight: bn17(header.daHeight),\n        eventInboxRoot: header.eventInboxRoot,\n        messageOutboxRoot: header.messageOutboxRoot,\n        prevRoot: header.prevRoot,\n        stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,\n        transactionsCount: header.transactionsCount,\n        transactionsRoot: header.transactionsRoot\n      },\n      transactionIds: transactions.map((tx) => tx.id)\n    };\n  }\n  /**\n   * Returns all the blocks matching the given parameters.\n   *\n   * @param params - The parameters to query blocks.\n   * @returns A promise that resolves to the blocks.\n   */\n  async getBlocks(params) {\n    const {\n      blocks: { edges, pageInfo }\n    } = await this.operations.getBlocks({\n      ...validatePaginationArgs({\n        paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,\n        inputArgs: params\n      })\n    });\n    const blocks = edges.map(({ node: block }) => ({\n      id: block.id,\n      height: bn17(block.height),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn17(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot\n      },\n      transactionIds: block.transactions.map((tx) => tx.id)\n    }));\n    return { blocks, pageInfo };\n  }\n  /**\n   * Returns block matching the given ID or type, including transaction data.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlockWithTransactions(idOrHeight) {\n    let variables;\n    if (typeof idOrHeight === \"number\") {\n      variables = { blockHeight: bn17(idOrHeight).toString(10) };\n    } else if (idOrHeight === \"latest\") {\n      variables = { blockHeight: (await this.getBlockNumber()).toString() };\n    } else {\n      variables = { blockId: idOrHeight };\n    }\n    const { block } = await this.operations.getBlockWithTransactions(variables);\n    if (!block) {\n      return null;\n    }\n    return {\n      id: block.id,\n      height: bn17(block.height, 10),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn17(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n      transactions: block.transactions.map(\n        (tx) => new TransactionCoder5().decode(arrayify12(tx.rawPayload), 0)?.[0]\n      )\n    };\n  }\n  /**\n   * Get transaction with the given ID.\n   *\n   * @param transactionId - ID of the transaction.\n   * @returns A promise that resolves to the transaction.\n   */\n  async getTransaction(transactionId) {\n    const { transaction } = await this.operations.getTransaction({ transactionId });\n    if (!transaction) {\n      return null;\n    }\n    try {\n      return new TransactionCoder5().decode(\n        arrayify12(transaction.rawPayload),\n        0\n      )?.[0];\n    } catch (error) {\n      if (error instanceof FuelError18 && error.code === ErrorCode16.UNSUPPORTED_TRANSACTION_TYPE) {\n        console.warn(\"Unsupported transaction type encountered\");\n        return null;\n      }\n      throw error;\n    }\n  }\n  /**\n   * Retrieves transactions based on the provided pagination arguments.\n   * @param paginationArgs - The pagination arguments for retrieving transactions.\n   * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.\n   */\n  async getTransactions(paginationArgs) {\n    const {\n      transactions: { edges, pageInfo }\n    } = await this.operations.getTransactions({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT\n      })\n    });\n    const coder = new TransactionCoder5();\n    const transactions = edges.map(({ node: { rawPayload } }) => {\n      try {\n        return coder.decode(arrayify12(rawPayload), 0)[0];\n      } catch (error) {\n        if (error instanceof FuelError18 && error.code === ErrorCode16.UNSUPPORTED_TRANSACTION_TYPE) {\n          console.warn(\"Unsupported transaction type encountered\");\n          return null;\n        }\n        throw error;\n      }\n    }).filter((tx) => tx !== null);\n    return { transactions, pageInfo };\n  }\n  /**\n   * Fetches a compressed block at the specified height.\n   *\n   * @param height - The height of the block to fetch.\n   * @returns The compressed block if available, otherwise `null`.\n   */\n  async daCompressedBlock(height) {\n    const { daCompressedBlock } = await this.operations.daCompressedBlock({\n      height\n    });\n    if (!daCompressedBlock) {\n      return null;\n    }\n    return daCompressedBlock;\n  }\n  /**\n   * Get deployed contract with the given ID.\n   *\n   * @param contractId - ID of the contract.\n   * @returns A promise that resolves to the contract.\n   */\n  async getContract(contractId) {\n    const { contract } = await this.operations.getContract({ contractId });\n    if (!contract) {\n      return null;\n    }\n    return contract;\n  }\n  /**\n   * Returns the balance for the given contract for the given asset ID.\n   *\n   * @param contractId - The contract ID to get the balance for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getContractBalance(contractId, assetId) {\n    const { contractBalance } = await this.operations.getContractBalance({\n      contract: new Address2(contractId).toB256(),\n      asset: hexlify15(assetId)\n    });\n    return bn17(contractBalance.amount, 10);\n  }\n  /**\n   * Returns the balance for the given owner for the given asset ID.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getBalance(owner, assetId) {\n    const { balance } = await this.operations.getBalance({\n      owner: new Address2(owner).toB256(),\n      assetId: hexlify15(assetId)\n    });\n    return bn17(balance.amount, 10);\n  }\n  /**\n   * Returns balances for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the balances.\n   */\n  async getBalances(owner) {\n    const {\n      balances: { edges }\n    } = await this.operations.getBalances({\n      /**\n       * The query parameters for this method were designed to support pagination,\n       * but the current Fuel-Core implementation does not support pagination yet.\n       */\n      first: 1e4,\n      filter: { owner: new Address2(owner).toB256() }\n    });\n    const balances = edges.map(({ node }) => ({\n      assetId: node.assetId,\n      amount: bn17(node.amount)\n    }));\n    return { balances };\n  }\n  /**\n   * Returns message for the given address.\n   *\n   * @param address - The address to get message from.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the messages.\n   */\n  async getMessages(address, paginationArgs) {\n    const {\n      messages: { edges, pageInfo }\n    } = await this.operations.getMessages({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT\n      }),\n      owner: new Address2(address).toB256()\n    });\n    const messages = edges.map(({ node }) => ({\n      messageId: InputMessageCoder2.getMessageId({\n        sender: node.sender,\n        recipient: node.recipient,\n        nonce: node.nonce,\n        amount: bn17(node.amount),\n        data: node.data\n      }),\n      sender: new Address2(node.sender),\n      recipient: new Address2(node.recipient),\n      nonce: node.nonce,\n      amount: bn17(node.amount),\n      data: InputMessageCoder2.decodeData(node.data),\n      daHeight: bn17(node.daHeight)\n    }));\n    return {\n      messages,\n      pageInfo\n    };\n  }\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param transactionId - The transaction to get message from.\n   * @param messageId - The message id from MessageOut receipt.\n   * @param commitBlockId - The commit block id (optional).\n   * @param commitBlockHeight - The commit block height (optional).\n   * @returns A promise that resolves to the message proof.\n   */\n  async getMessageProof(transactionId, nonce, commitBlockId, commitBlockHeight) {\n    let inputObject = {\n      transactionId,\n      nonce\n    };\n    if (commitBlockId && commitBlockHeight) {\n      throw new FuelError18(\n        ErrorCode16.INVALID_INPUT_PARAMETERS,\n        \"commitBlockId and commitBlockHeight cannot be used together\"\n      );\n    }\n    if (commitBlockId) {\n      inputObject = {\n        ...inputObject,\n        commitBlockId\n      };\n    }\n    if (commitBlockHeight) {\n      inputObject = {\n        ...inputObject,\n        // Conver BN into a number string required on the query\n        // This should problably be fixed on the fuel client side\n        commitBlockHeight: commitBlockHeight.toNumber().toString()\n      };\n    }\n    const result = await this.operations.getMessageProof(inputObject);\n    if (!result.messageProof) {\n      return null;\n    }\n    const {\n      messageProof,\n      messageBlockHeader,\n      commitBlockHeader,\n      blockProof,\n      sender,\n      recipient,\n      amount,\n      data\n    } = result.messageProof;\n    return {\n      messageProof: {\n        proofIndex: bn17(messageProof.proofIndex),\n        proofSet: messageProof.proofSet\n      },\n      blockProof: {\n        proofIndex: bn17(blockProof.proofIndex),\n        proofSet: blockProof.proofSet\n      },\n      messageBlockHeader: {\n        id: messageBlockHeader.id,\n        daHeight: bn17(messageBlockHeader.daHeight),\n        transactionsCount: Number(messageBlockHeader.transactionsCount),\n        transactionsRoot: messageBlockHeader.transactionsRoot,\n        height: bn17(messageBlockHeader.height),\n        prevRoot: messageBlockHeader.prevRoot,\n        time: messageBlockHeader.time,\n        applicationHash: messageBlockHeader.applicationHash,\n        messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),\n        messageOutboxRoot: messageBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),\n        eventInboxRoot: messageBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion)\n      },\n      commitBlockHeader: {\n        id: commitBlockHeader.id,\n        daHeight: bn17(commitBlockHeader.daHeight),\n        transactionsCount: Number(commitBlockHeader.transactionsCount),\n        transactionsRoot: commitBlockHeader.transactionsRoot,\n        height: bn17(commitBlockHeader.height),\n        prevRoot: commitBlockHeader.prevRoot,\n        time: commitBlockHeader.time,\n        applicationHash: commitBlockHeader.applicationHash,\n        messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),\n        messageOutboxRoot: commitBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),\n        eventInboxRoot: commitBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion)\n      },\n      sender: new Address2(sender),\n      recipient: new Address2(recipient),\n      nonce,\n      amount: bn17(amount),\n      data\n    };\n  }\n  /**\n   * Get the latest gas price from the node.\n   *\n   * @returns A promise that resolves to the latest gas price.\n   */\n  async getLatestGasPrice() {\n    const { latestGasPrice } = await this.operations.getLatestGasPrice();\n    return bn17(latestGasPrice.gasPrice);\n  }\n  /**\n   * Returns the estimate gas price for the given block horizon.\n   *\n   * @param blockHorizon - The block horizon to estimate gas price for.\n   * @returns A promise that resolves to the estimated gas price.\n   */\n  async estimateGasPrice(blockHorizon) {\n    const { estimateGasPrice } = await this.operations.estimateGasPrice({\n      blockHorizon: String(blockHorizon)\n    });\n    return bn17(estimateGasPrice.gasPrice);\n  }\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param nonce - The nonce of the message to get status from.\n   * @returns A promise that resolves to the message status\n   */\n  async getMessageStatus(nonce) {\n    const result = await this.operations.getMessageStatus({ nonce });\n    return result.messageStatus;\n  }\n  /**\n   * Lets you produce blocks with custom timestamps and the block number of the last block produced.\n   *\n   * @param amount - The amount of blocks to produce.\n   * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).\n   * @returns A promise that resolves to the block number of the last produced block.\n   */\n  async produceBlocks(amount, startTime) {\n    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({\n      blocksToProduce: bn17(amount).toString(10),\n      startTimestamp: startTime ? DateTime2.fromUnixMilliseconds(startTime).toTai64() : void 0\n    });\n    return bn17(latestBlockHeight);\n  }\n  /**\n   * Check if the given ID is an account.\n   *\n   * @param id - The ID to check.\n   * @returns A promise that resolves to the result of the check.\n   */\n  async isUserAccount(id) {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id\n    });\n    if (contract || blob || transaction) {\n      return false;\n    }\n    return true;\n  }\n  async getAddressType(id) {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id\n    });\n    if (contract) {\n      return \"Contract\";\n    }\n    if (blob) {\n      return \"Blob\";\n    }\n    if (transaction) {\n      return \"Transaction\";\n    }\n    return \"Account\";\n  }\n  /**\n   * Get the transaction response for the given transaction ID.\n   *\n   * @param transactionId - The transaction ID to get the response for.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async getTransactionResponse(transactionId) {\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionId, this, chainId);\n  }\n  /**\n   * Returns Message for given nonce.\n   *\n   * @param nonce - The nonce of the message to retrieve.\n   * @returns A promise that resolves to the Message object or null.\n   */\n  async getMessageByNonce(nonce) {\n    const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });\n    if (!rawMessage) {\n      return null;\n    }\n    const message = {\n      messageId: InputMessageCoder2.getMessageId({\n        sender: rawMessage.sender,\n        recipient: rawMessage.recipient,\n        nonce,\n        amount: bn17(rawMessage.amount),\n        data: rawMessage.data\n      }),\n      sender: new Address2(rawMessage.sender),\n      recipient: new Address2(rawMessage.recipient),\n      nonce,\n      amount: bn17(rawMessage.amount),\n      data: InputMessageCoder2.decodeData(rawMessage.data),\n      daHeight: bn17(rawMessage.daHeight)\n    };\n    return message;\n  }\n  /**\n   * Get the relayed transaction for the given transaction ID.\n   *\n   * @param relayedTransactionId - The relayed transaction ID to get the response for.\n   * @returns A promise that resolves to the relayed transaction.\n   */\n  async getRelayedTransactionStatus(relayedTransactionId) {\n    const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({\n      relayedTransactionId\n    });\n    if (!relayedTransactionStatus) {\n      return null;\n    }\n    return relayedTransactionStatus;\n  }\n  /**\n   * @hidden\n   */\n  extractDryRunError(transactionRequest, receipts, dryRunStatus) {\n    const status = dryRunStatus;\n    let logs = [];\n    if (transactionRequest.abis) {\n      logs = getDecodedLogs(\n        receipts,\n        transactionRequest.abis.main,\n        transactionRequest.abis.otherContractsAbis\n      );\n    }\n    return extractTxError({\n      logs,\n      receipts,\n      statusReason: status.reason\n    });\n  }\n};\nvar Provider = _Provider;\n_cacheInputs = new WeakSet();\ncacheInputs_fn = function(inputs, transactionId) {\n  if (!this.cache) {\n    return;\n  }\n  const inputsToCache = inputs.reduce(\n    (acc, input) => {\n      if (input.type === InputType7.Coin) {\n        acc.utxos.push(input.id);\n      } else if (input.type === InputType7.Message) {\n        acc.messages.push(input.nonce);\n      }\n      return acc;\n    },\n    { utxos: [], messages: [] }\n  );\n  this.cache.set(transactionId, inputsToCache);\n};\n/** @hidden */\n__publicField(Provider, \"chainInfoCache\", {});\n/** @hidden */\n__publicField(Provider, \"nodeInfoCache\", {});\n/** @hidden */\n__publicField(Provider, \"incompatibleNodeVersionMessage\", \"\");\n\n// src/providers/transaction-summary/get-transaction-summary.ts\nimport { ErrorCode as ErrorCode17, FuelError as FuelError19 } from \"@fuel-ts/errors\";\nimport { bn as bn18 } from \"@fuel-ts/math\";\nimport { TransactionCoder as TransactionCoder6 } from \"@fuel-ts/transactions\";\nimport { arrayify as arrayify13 } from \"@fuel-ts/utils\";\nasync function getTransactionSummary(params) {\n  const { id, provider, abiMap } = params;\n  const { transaction: gqlTransaction } = await provider.operations.getTransactionWithReceipts({\n    transactionId: id\n  });\n  if (!gqlTransaction) {\n    throw new FuelError19(\n      ErrorCode17.TRANSACTION_NOT_FOUND,\n      `Transaction not found for given id: ${id}.`\n    );\n  }\n  const [decodedTransaction] = new TransactionCoder6().decode(\n    arrayify13(gqlTransaction.rawPayload),\n    0\n  );\n  let txReceipts = [];\n  if (gqlTransaction?.status && \"receipts\" in gqlTransaction.status) {\n    txReceipts = gqlTransaction.status.receipts;\n  }\n  const receipts = txReceipts.map(processGqlReceipt);\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts\n    }\n  } = await provider.getChain();\n  const totalFee = getTotalFeeFromStatus(gqlTransaction.status);\n  const gasPrice = totalFee ? bn18(0) : await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactionInfo = assembleTransactionSummary({\n    id: gqlTransaction.id,\n    receipts,\n    transaction: decodedTransaction,\n    transactionBytes: arrayify13(gqlTransaction.rawPayload),\n    gqlTransactionStatus: gqlTransaction.status,\n    gasPerByte: bn18(gasPerByte),\n    gasPriceFactor: bn18(gasPriceFactor),\n    abiMap,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  });\n  return {\n    ...transactionInfo\n  };\n}\nasync function getTransactionSummaryFromRequest(params) {\n  const { provider, transactionRequest, abiMap } = params;\n  const { receipts } = await provider.dryRun(transactionRequest);\n  const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await provider.getGasConfig();\n  const maxInputs = (await provider.getChain()).consensusParameters.txParameters.maxInputs;\n  const transaction = transactionRequest.toTransaction();\n  const transactionBytes = transactionRequest.toTransactionBytes();\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactionSummary = assembleTransactionSummary({\n    id: transactionRequest.getTransactionId(await provider.getChainId()),\n    receipts,\n    transaction,\n    transactionBytes,\n    abiMap,\n    gasPerByte,\n    gasPriceFactor,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  });\n  return transactionSummary;\n}\nasync function getTransactionsSummaries(params) {\n  const { filters, provider, abiMap } = params;\n  const { owner, ...inputArgs } = filters;\n  const validPaginationParams = validatePaginationArgs({\n    inputArgs,\n    paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT\n  });\n  const { transactionsByOwner } = await provider.operations.getTransactionsByOwner({\n    ...validPaginationParams,\n    owner\n  });\n  const { edges, pageInfo } = transactionsByOwner;\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts\n    }\n  } = await provider.getChain();\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactions = edges.map((edge) => {\n    const { node: gqlTransaction } = edge;\n    const { id, rawPayload, status } = gqlTransaction;\n    const [decodedTransaction] = new TransactionCoder6().decode(arrayify13(rawPayload), 0);\n    let txReceipts = [];\n    if (gqlTransaction?.status && \"receipts\" in gqlTransaction.status) {\n      txReceipts = gqlTransaction.status.receipts;\n    }\n    const receipts = txReceipts.map(processGqlReceipt);\n    const transactionSummary = assembleTransactionSummary({\n      id,\n      receipts,\n      transaction: decodedTransaction,\n      transactionBytes: arrayify13(rawPayload),\n      gqlTransactionStatus: status,\n      abiMap,\n      gasPerByte,\n      gasPriceFactor,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId\n    });\n    const output = {\n      ...transactionSummary\n    };\n    return output;\n  });\n  return {\n    transactions,\n    pageInfo\n  };\n}\n\n// src/providers/utils/merge-quantities.ts\nvar mergeQuantities = (...coinQuantities) => {\n  const resultMap = {};\n  function addToMap({ amount, assetId }) {\n    if (resultMap[assetId]) {\n      resultMap[assetId] = resultMap[assetId].add(amount);\n    } else {\n      resultMap[assetId] = amount;\n    }\n  }\n  coinQuantities.forEach((arr) => arr.forEach(addToMap));\n  return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));\n};\n\n// src/types.ts\nvar AbstractAccount = class {\n};\n\n// src/utils/formatTransferToContractScriptData.ts\nimport { ASSET_ID_LEN, BigNumberCoder as BigNumberCoder2, CONTRACT_ID_LEN, WORD_SIZE } from \"@fuel-ts/abi-coder\";\nimport { Address as Address3 } from \"@fuel-ts/address\";\nimport { arrayify as arrayify14, concat as concat3 } from \"@fuel-ts/utils\";\nimport * as asm from \"@fuels/vm-asm\";\nvar formatTransferToContractScriptData = (transferParams) => {\n  const numberCoder = new BigNumberCoder2(\"u64\");\n  return transferParams.reduce((acc, transferParam) => {\n    const { assetId, amount, contractId } = transferParam;\n    const encoded = numberCoder.encode(amount);\n    const scriptData = concat3([new Address3(contractId).toBytes(), encoded, arrayify14(assetId)]);\n    return concat3([acc, scriptData]);\n  }, new Uint8Array());\n};\nvar assembleTransferToContractScript = async (transferParams) => {\n  const scriptData = formatTransferToContractScriptData(transferParams);\n  await asm.initWasm();\n  let script = new Uint8Array();\n  transferParams.forEach((_, i) => {\n    const offset = (CONTRACT_ID_LEN + WORD_SIZE + ASSET_ID_LEN) * i;\n    script = concat3([\n      script,\n      // Load ScriptData into register 0x10.\n      asm.gtf(16, 0, asm.GTFArgs.ScriptData).to_bytes(),\n      // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.\n      asm.addi(17, 16, offset).to_bytes(),\n      // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.\n      asm.addi(18, 17, CONTRACT_ID_LEN).to_bytes(),\n      // Load word to the amount at 0x12 into register 0x13.\n      asm.lw(19, 18, 0).to_bytes(),\n      // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.\n      asm.addi(20, 18, WORD_SIZE).to_bytes(),\n      // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.\n      asm.tr(17, 19, 20).to_bytes()\n    ]);\n  });\n  script = concat3([script, asm.ret(1).to_bytes()]);\n  return { script, scriptData };\n};\n\n// src/account.ts\nvar MAX_FUNDING_ATTEMPTS = 5;\nvar Account = class extends AbstractAccount {\n  /**\n   * The address associated with the account.\n   */\n  address;\n  /**\n   * The provider used to interact with the network.\n   */\n  _provider;\n  /**\n   * The connector for use with external wallets\n   */\n  _connector;\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - A Provider instance  (optional).\n   * @param connector - A FuelConnector instance (optional).\n   */\n  constructor(address, provider, connector) {\n    super();\n    this._provider = provider;\n    this._connector = connector;\n    this.address = new Address4(address);\n  }\n  /**\n   * The provider used to interact with the network.\n   *\n   * @returns A Provider instance.\n   *\n   * @throws `FuelError` if the provider is not set.\n   */\n  get provider() {\n    if (!this._provider) {\n      throw new FuelError20(ErrorCode18.MISSING_PROVIDER, \"Provider not set\");\n    }\n    return this._provider;\n  }\n  /**\n   * Sets the provider for the account.\n   *\n   * @param provider - A Provider instance.\n   */\n  set provider(provider) {\n    this._provider = provider;\n  }\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - A Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider) {\n    this._provider = provider;\n    return this.provider;\n  }\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - Quantities of resources to be obtained.\n   * @param excludedIds - IDs of resources to be excluded from the query (optional).\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(quantities, excludedIds) {\n    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);\n  }\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve (optional).\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(assetId, paginationArgs) {\n    return this.provider.getCoins(this.address, assetId, paginationArgs);\n  }\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(paginationArgs) {\n    return this.provider.getMessages(this.address, paginationArgs);\n  }\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for (optional).\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId) {\n    const assetIdToFetch = assetId ?? await this.provider.getBaseAssetId();\n    const amount = await this.provider.getBalance(this.address, assetIdToFetch);\n    return amount;\n  }\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances() {\n    return this.provider.getBalances(this.address);\n  }\n  /**\n   * Funds a transaction request by adding the necessary resources.\n   *\n   * @typeParam T - The type of the TransactionRequest.\n   * @param request - The transaction request to fund.\n   * @param params - The estimated transaction parameters.\n   * @returns A promise that resolves to the funded transaction request.\n   */\n  async fund(request2, params) {\n    const { addedSignatures, estimatedPredicates, requiredQuantities, updateMaxFee, gasPrice } = params;\n    const fee = request2.maxFee;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const requiredInBaseAsset = requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)?.amount || bn19(0);\n    const requiredQuantitiesWithFee = addAmountToCoinQuantities({\n      amount: bn19(fee),\n      assetId: baseAssetId,\n      coinQuantities: requiredQuantities\n    });\n    const quantitiesDict = {};\n    requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {\n      quantitiesDict[assetId] = {\n        required: amount,\n        owned: bn19(0)\n      };\n    });\n    request2.inputs.filter(isRequestInputResource).forEach((input) => {\n      const isCoin2 = isRequestInputCoin(input);\n      const assetId = isCoin2 ? String(input.assetId) : baseAssetId;\n      if (quantitiesDict[assetId]) {\n        quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);\n      }\n    });\n    let missingQuantities = [];\n    Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {\n      if (owned.lt(required)) {\n        missingQuantities.push({\n          assetId,\n          amount: required.sub(owned)\n        });\n      }\n    });\n    let needsToBeFunded = missingQuantities.length > 0;\n    let fundingAttempts = 0;\n    while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {\n      const resources = await this.getResourcesToSpend(\n        missingQuantities,\n        cacheRequestInputsResourcesFromOwner(request2.inputs, this.address)\n      );\n      request2.addResources(resources);\n      request2.updatePredicateGasUsed(estimatedPredicates);\n      const requestToReestimate2 = clone9(request2);\n      if (addedSignatures) {\n        Array.from({ length: addedSignatures }).forEach(\n          () => requestToReestimate2.addEmptyWitness()\n        );\n      }\n      if (!updateMaxFee) {\n        needsToBeFunded = false;\n        break;\n      }\n      const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({\n        transactionRequest: requestToReestimate2,\n        gasPrice\n      });\n      const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(\n        request2.inputs.filter(isRequestInputResource),\n        baseAssetId,\n        baseAssetId\n      );\n      const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);\n      if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {\n        needsToBeFunded = false;\n      } else {\n        missingQuantities = [\n          {\n            amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),\n            assetId: baseAssetId\n          }\n        ];\n      }\n      fundingAttempts += 1;\n    }\n    if (needsToBeFunded) {\n      throw new FuelError20(\n        ErrorCode18.NOT_ENOUGH_FUNDS,\n        `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`\n      );\n    }\n    await this.provider.validateTransaction(request2);\n    request2.updatePredicateGasUsed(estimatedPredicates);\n    const requestToReestimate = clone9(request2);\n    if (addedSignatures) {\n      Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());\n    }\n    if (!updateMaxFee) {\n      return request2;\n    }\n    const { maxFee } = await this.provider.estimateTxGasAndFee({\n      transactionRequest: requestToReestimate,\n      gasPrice\n    });\n    request2.maxFee = maxFee;\n    return request2;\n  }\n  /**\n   * A helper that creates a transfer transaction request and returns it.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the prepared transaction request.\n   */\n  async createTransfer(destination, amount, assetId, txParams = {}) {\n    let request2 = new ScriptTransactionRequest(txParams);\n    request2 = this.addTransfer(request2, {\n      destination,\n      amount,\n      assetId: assetId || await this.provider.getBaseAssetId()\n    });\n    request2 = await this.estimateAndFundTransaction(request2, txParams);\n    return request2;\n  }\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(destination, amount, assetId, txParams = {}) {\n    const request2 = await this.createTransfer(destination, amount, assetId, txParams);\n    return this.sendTransaction(request2, { estimateTxDependencies: false });\n  }\n  /**\n   * Transfers multiple amounts of a token to multiple recipients.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @param txParams - Optional transaction parameters.\n   * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.\n   */\n  async batchTransfer(transferParams, txParams = {}) {\n    let request2 = new ScriptTransactionRequest(txParams);\n    request2 = this.addBatchTransfer(request2, transferParams);\n    request2 = await this.estimateAndFundTransaction(request2, txParams);\n    return this.sendTransaction(request2, { estimateTxDependencies: false });\n  }\n  /**\n   * Adds a transfer to the given transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The updated transaction request with the added transfer.\n   */\n  addTransfer(request2, transferParams) {\n    const { destination, amount, assetId } = transferParams;\n    this.validateTransferAmount(amount);\n    request2.addCoinOutput(new Address4(destination), amount, assetId);\n    return request2;\n  }\n  /**\n   * Adds multiple transfers to a script transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The updated script transaction request.\n   */\n  addBatchTransfer(request2, transferParams) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.addTransfer(request2, {\n        destination,\n        amount,\n        assetId\n      });\n    });\n    return request2;\n  }\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(contractId, amount, assetId, txParams = {}) {\n    return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);\n  }\n  async batchTransferToContracts(contractTransferParams, txParams = {}) {\n    let request2 = new ScriptTransactionRequest({\n      ...txParams\n    });\n    const quantities = [];\n    const defaultAssetId = await this.provider.getBaseAssetId();\n    const transferParams = contractTransferParams.map((transferParam) => {\n      const amount = bn19(transferParam.amount);\n      const contractAddress = new Address4(transferParam.contractId);\n      const assetId = transferParam.assetId ? hexlify16(transferParam.assetId) : defaultAssetId;\n      if (amount.lte(0)) {\n        throw new FuelError20(\n          ErrorCode18.INVALID_TRANSFER_AMOUNT,\n          \"Transfer amount must be a positive number.\"\n        );\n      }\n      request2.addContractInputAndOutput(contractAddress);\n      quantities.push({ amount, assetId });\n      return {\n        amount,\n        contractId: contractAddress.toB256(),\n        assetId\n      };\n    });\n    const { script, scriptData } = await assembleTransferToContractScript(transferParams);\n    request2.script = script;\n    request2.scriptData = scriptData;\n    request2 = await this.estimateAndFundTransaction(request2, txParams, { quantities });\n    return this.sendTransaction(request2);\n  }\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(recipient, amount, txParams = {}) {\n    const recipientAddress = new Address4(recipient);\n    const recipientDataArray = arrayify15(\n      \"0x\".concat(recipientAddress.toHexString().substring(2).padStart(64, \"0\"))\n    );\n    const amountDataArray = arrayify15(\n      \"0x\".concat(bn19(amount).toHex().substring(2).padStart(16, \"0\"))\n    );\n    const script = new Uint8Array([\n      ...arrayify15(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray\n    ]);\n    const params = { script, ...txParams };\n    const baseAssetId = await this.provider.getBaseAssetId();\n    let request2 = new ScriptTransactionRequest(params);\n    const quantities = [{ amount: bn19(amount), assetId: baseAssetId }];\n    const txCost = await this.getTransactionCost(request2, { quantities });\n    request2 = this.validateGasLimitAndMaxFee({\n      transactionRequest: request2,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams\n    });\n    await this.fund(request2, txCost);\n    return this.sendTransaction(request2);\n  }\n  /**\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(transactionRequestLike, { signatureCallback, quantities = [], gasPrice } = {}) {\n    const txRequestClone = clone9(transactionRequestify(transactionRequestLike));\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();\n    const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);\n    const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: bn19(\"100000000000000000\") }];\n    const findAssetInput = (assetId) => txRequestClone.inputs.find((input) => {\n      if (input.type === InputType8.Coin) {\n        return input.assetId === assetId;\n      }\n      if (isRequestInputMessageWithoutData(input)) {\n        return baseAssetId === assetId;\n      }\n      return false;\n    });\n    const updateAssetInput = (assetId, quantity) => {\n      const assetInput = findAssetInput(assetId);\n      const usedQuantity = quantity;\n      if (assetInput && \"amount\" in assetInput) {\n        assetInput.amount = usedQuantity;\n      } else {\n        txRequestClone.addResources(\n          this.generateFakeResources([\n            {\n              amount: quantity,\n              assetId\n            }\n          ])\n        );\n      }\n    };\n    mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(\n      ({ amount, assetId }) => updateAssetInput(assetId, amount)\n    );\n    const txCost = await this.provider.getTransactionCost(txRequestClone, {\n      signatureCallback,\n      gasPrice\n    });\n    return {\n      ...txCost,\n      requiredQuantities\n    };\n  }\n  /**\n   * Sign a message from the account via the connector.\n   *\n   * @param message - the message to sign.\n   * @returns a promise that resolves to the signature.\n   *\n   * @hidden\n   */\n  async signMessage(message) {\n    if (!this._connector) {\n      throw new FuelError20(ErrorCode18.MISSING_CONNECTOR, \"A connector is required to sign messages.\");\n    }\n    return this._connector.signMessage(this.address.toString(), message);\n  }\n  /**\n   * Signs a transaction from the account via the connector..\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature of the transaction.\n   */\n  async signTransaction(transactionRequestLike) {\n    if (!this._connector) {\n      throw new FuelError20(\n        ErrorCode18.MISSING_CONNECTOR,\n        \"A connector is required to sign transactions.\"\n      );\n    }\n    return this._connector.signTransaction(this.address.toString(), transactionRequestLike);\n  }\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, onBeforeSend, skipCustomFee = false } = {}) {\n    if (this._connector) {\n      return this.provider.getTransactionResponse(\n        await this._connector.sendTransaction(this.address.toString(), transactionRequestLike, {\n          onBeforeSend,\n          skipCustomFee\n        })\n      );\n    }\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n  }\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });\n  }\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins) {\n    return coins.map((coin) => ({\n      id: hexlify16(randomBytes2(UTXO_ID_LEN3)),\n      owner: this.address,\n      blockCreated: bn19(1),\n      txCreatedIdx: bn19(1),\n      ...coin\n    }));\n  }\n  /** @hidden * */\n  validateTransferAmount(amount) {\n    if (bn19(amount).lte(0)) {\n      throw new FuelError20(\n        ErrorCode18.INVALID_TRANSFER_AMOUNT,\n        \"Transfer amount must be a positive number.\"\n      );\n    }\n  }\n  /** @hidden * */\n  async estimateAndFundTransaction(transactionRequest, txParams, costParams) {\n    let request2 = transactionRequest;\n    const txCost = await this.getTransactionCost(request2, costParams);\n    request2 = this.validateGasLimitAndMaxFee({\n      transactionRequest: request2,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams\n    });\n    request2 = await this.fund(request2, txCost);\n    return request2;\n  }\n  /** @hidden * */\n  validateGasLimitAndMaxFee({\n    gasUsed,\n    maxFee,\n    transactionRequest,\n    txParams: { gasLimit: setGasLimit, maxFee: setMaxFee }\n  }) {\n    const request2 = transactionRequestify(transactionRequest);\n    if (!isDefined3(setGasLimit)) {\n      request2.gasLimit = gasUsed;\n    } else if (gasUsed.gt(setGasLimit)) {\n      throw new FuelError20(\n        ErrorCode18.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n    if (!isDefined3(setMaxFee)) {\n      request2.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new FuelError20(\n        ErrorCode18.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n    return request2;\n  }\n};\n\n// src/wallet/base-wallet-unlocked.ts\nimport { hashMessage } from \"@fuel-ts/hasher\";\nimport { hexlify as hexlify19 } from \"@fuel-ts/utils\";\n\n// src/signer/signer.ts\nimport { Address as Address5 } from \"@fuel-ts/address\";\nimport { randomBytes as randomBytes3 } from \"@fuel-ts/crypto\";\nimport { hash as hash2 } from \"@fuel-ts/hasher\";\nimport { toBytes } from \"@fuel-ts/math\";\nimport { hexlify as hexlify17, concat as concat4, arrayify as arrayify16 } from \"@fuel-ts/utils\";\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nvar Signer = class {\n  address;\n  publicKey;\n  compressedPublicKey;\n  privateKey;\n  /**\n   * Create a Signer instance from a given private key\n   *\n   * @param privateKey - The private key to use for signing\n   * @returns A new Signer instance\n   */\n  constructor(privateKey) {\n    if (typeof privateKey === \"string\") {\n      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        privateKey = `0x${privateKey}`;\n      }\n    }\n    const privateKeyBytes = toBytes(privateKey, 32);\n    this.privateKey = hexlify17(privateKeyBytes);\n    this.publicKey = hexlify17(secp256k1.getPublicKey(privateKeyBytes, false).slice(1));\n    this.compressedPublicKey = hexlify17(secp256k1.getPublicKey(privateKeyBytes, true));\n    this.address = new Address5(this.publicKey);\n  }\n  /**\n   * Sign data using the Signer instance\n   *\n   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.\n   * @ignore\n   * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)\n   *\n   * @param data - The data to be sign\n   * @returns hashed signature\n   */\n  sign(data) {\n    const signature = secp256k1.sign(arrayify16(data), arrayify16(this.privateKey));\n    const r = toBytes(`0x${signature.r.toString(16)}`, 32);\n    const s = toBytes(`0x${signature.s.toString(16)}`, 32);\n    s[0] |= (signature.recovery || 0) << 7;\n    return hexlify17(concat4([r, s]));\n  }\n  /**\n   * Add point on the current elliptic curve\n   *\n   * @param point - Point to add on the curve\n   * @returns compressed point on the curve\n   */\n  addPoint(point) {\n    const p0 = secp256k1.ProjectivePoint.fromHex(arrayify16(this.compressedPublicKey));\n    const p1 = secp256k1.ProjectivePoint.fromHex(arrayify16(point));\n    const result = p0.add(p1);\n    return `0x${result.toHex(true)}`;\n  }\n  /**\n   * Recover the public key from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - hashed signature\n   * @returns public key from signature from the\n   */\n  static recoverPublicKey(data, signature) {\n    const signedMessageBytes = arrayify16(signature);\n    const r = signedMessageBytes.slice(0, 32);\n    const s = signedMessageBytes.slice(32, 64);\n    const recoveryParam = (s[0] & 128) >> 7;\n    s[0] &= 127;\n    const sig = new secp256k1.Signature(BigInt(hexlify17(r)), BigInt(hexlify17(s))).addRecoveryBit(\n      recoveryParam\n    );\n    const publicKey = sig.recoverPublicKey(arrayify16(data)).toRawBytes(false).slice(1);\n    return hexlify17(publicKey);\n  }\n  /**\n   * Recover the address from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - Signature\n   * @returns Address from signature\n   */\n  static recoverAddress(data, signature) {\n    return new Address5(Signer.recoverPublicKey(data, signature));\n  }\n  /**\n   * Generate a random privateKey\n   *\n   * @param entropy - Adds extra entropy to generate the privateKey\n   * @returns random 32-byte hashed\n   */\n  static generatePrivateKey(entropy) {\n    return entropy ? hash2(concat4([randomBytes3(32), arrayify16(entropy)])) : randomBytes3(32);\n  }\n  /**\n   * Extended publicKey from a compact publicKey\n   *\n   * @param publicKey - Compact publicKey\n   * @returns extended publicKey\n   */\n  static extendPublicKey(publicKey) {\n    const point = secp256k1.ProjectivePoint.fromHex(arrayify16(publicKey));\n    return hexlify17(point.toRawBytes(false).slice(1));\n  }\n};\n\n// src/wallet/keystore-wallet.ts\nimport { Address as Address6 } from \"@fuel-ts/address\";\nimport {\n  bufferFromString,\n  keccak256,\n  randomBytes as randomBytes4,\n  scrypt,\n  stringFromBuffer,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  randomUUID\n} from \"@fuel-ts/crypto\";\nimport { ErrorCode as ErrorCode19, FuelError as FuelError21 } from \"@fuel-ts/errors\";\nimport { hexlify as hexlify18 } from \"@fuel-ts/utils\";\nvar DEFAULT_KDF_PARAMS_LOG_N = 13;\nvar DEFAULT_KDF_PARAMS_R = 8;\nvar DEFAULT_KDF_PARAMS_P = 1;\nvar DEFAULT_KEY_SIZE = 32;\nvar DEFAULT_IV_SIZE = 16;\nvar removeHexPrefix = (hexString) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n  return hexString;\n};\nasync function encryptKeystoreWallet(privateKey, address, password) {\n  const privateKeyBuffer = bufferFromString(removeHexPrefix(privateKey), \"hex\");\n  const ownerAddress = new Address6(address);\n  const salt = randomBytes4(DEFAULT_KEY_SIZE);\n  const key = scrypt({\n    password: bufferFromString(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P\n  });\n  const iv = randomBytes4(DEFAULT_IV_SIZE);\n  const ciphertext = await encryptJsonWalletData(privateKeyBuffer, key, iv);\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n  const macHashUint8Array = keccak256(data);\n  const mac = stringFromBuffer(macHashUint8Array, \"hex\");\n  const keystore = {\n    id: randomUUID(),\n    version: 3,\n    address: removeHexPrefix(ownerAddress.toHexString()),\n    crypto: {\n      cipher: \"aes-128-ctr\",\n      mac,\n      cipherparams: { iv: stringFromBuffer(iv, \"hex\") },\n      ciphertext: stringFromBuffer(ciphertext, \"hex\"),\n      kdf: \"scrypt\",\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: stringFromBuffer(salt, \"hex\")\n      }\n    }\n  };\n  return JSON.stringify(keystore);\n}\nasync function decryptKeystoreWallet(jsonWallet, password) {\n  const keystoreWallet = JSON.parse(jsonWallet);\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt }\n    }\n  } = keystoreWallet;\n  const ciphertextBuffer = bufferFromString(ciphertext, \"hex\");\n  const ivBuffer = bufferFromString(iv, \"hex\");\n  const saltBuffer = bufferFromString(salt, \"hex\");\n  const passwordBuffer = bufferFromString(password);\n  const key = scrypt({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen\n  });\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n  const macHashUint8Array = keccak256(data);\n  const macHash = stringFromBuffer(macHashUint8Array, \"hex\");\n  if (mac !== macHash) {\n    throw new FuelError21(\n      ErrorCode19.INVALID_PASSWORD,\n      \"Failed to decrypt the keystore wallet, the provided password is incorrect.\"\n    );\n  }\n  const buffer = await decryptJsonWalletData(ciphertextBuffer, key, ivBuffer);\n  const privateKey = hexlify18(buffer);\n  return privateKey;\n}\n\n// src/wallet/base-wallet-unlocked.ts\nvar BaseWalletUnlocked = class extends Account {\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer;\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   */\n  constructor(privateKey, provider) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n  }\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey() {\n    return this.signer().privateKey;\n  }\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey() {\n    return this.signer().publicKey;\n  }\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signMessage(message) {\n    const signedMessage = await this.signer().sign(hashMessage(message));\n    return hexlify19(signedMessage);\n  }\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = await this.provider.getChainId();\n    const hashedTransaction = transactionRequest.getTransactionId(chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n    return hexlify19(signature);\n  }\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const signedTransaction = await this.signTransaction(transactionRequest);\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n    return transactionRequest;\n  }\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @param estimateTxDependencies - Whether to estimate the transaction dependencies.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  async sendTransaction(transactionRequestLike, { estimateTxDependencies = false, enableAssetBurn } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.provider.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      { estimateTxDependencies: false, enableAssetBurn }\n    );\n  }\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.dryRun(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n        estimateTxDependencies: false\n      }\n    );\n  }\n  /**\n   * Encrypts an unlocked wallet with a password.\n   *\n   * @param password - the password to encrypt the wallet with.\n   * @returns - the encrypted wallet.\n   */\n  async encrypt(password) {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n};\n/**\n * Default HDWallet path.\n */\n__publicField(BaseWalletUnlocked, \"defaultPath\", \"m/44'/1179993420'/0'/0/0\");\n\n// src/hdwallet/hdwallet.ts\nimport { computeHmac as computeHmac2, ripemd160 } from \"@fuel-ts/crypto\";\nimport { ErrorCode as ErrorCode22, FuelError as FuelError24 } from \"@fuel-ts/errors\";\nimport { sha256 as sha2564 } from \"@fuel-ts/hasher\";\nimport { bn as bn20, toBytes as toBytes2, toHex } from \"@fuel-ts/math\";\nimport { arrayify as arrayify19, hexlify as hexlify21, concat as concat6, dataSlice as dataSlice2, encodeBase58 as encodeBase582, decodeBase58 } from \"@fuel-ts/utils\";\n\n// src/mnemonic/mnemonic.ts\nimport { randomBytes as randomBytes5, pbkdf2, computeHmac } from \"@fuel-ts/crypto\";\nimport { ErrorCode as ErrorCode21, FuelError as FuelError23 } from \"@fuel-ts/errors\";\nimport { sha256 as sha2563 } from \"@fuel-ts/hasher\";\nimport { arrayify as arrayify18, hexlify as hexlify20, concat as concat5, dataSlice, encodeBase58, toUtf8Bytes } from \"@fuel-ts/utils\";\n\n// src/wordlists/words/english.ts\nvar english = [\n  \"abandon\",\n  \"ability\",\n  \"able\",\n  \"about\",\n  \"above\",\n  \"absent\",\n  \"absorb\",\n  \"abstract\",\n  \"absurd\",\n  \"abuse\",\n  \"access\",\n  \"accident\",\n  \"account\",\n  \"accuse\",\n  \"achieve\",\n  \"acid\",\n  \"acoustic\",\n  \"acquire\",\n  \"across\",\n  \"act\",\n  \"action\",\n  \"actor\",\n  \"actress\",\n  \"actual\",\n  \"adapt\",\n  \"add\",\n  \"addict\",\n  \"address\",\n  \"adjust\",\n  \"admit\",\n  \"adult\",\n  \"advance\",\n  \"advice\",\n  \"aerobic\",\n  \"affair\",\n  \"afford\",\n  \"afraid\",\n  \"again\",\n  \"age\",\n  \"agent\",\n  \"agree\",\n  \"ahead\",\n  \"aim\",\n  \"air\",\n  \"airport\",\n  \"aisle\",\n  \"alarm\",\n  \"album\",\n  \"alcohol\",\n  \"alert\",\n  \"alien\",\n  \"all\",\n  \"alley\",\n  \"allow\",\n  \"almost\",\n  \"alone\",\n  \"alpha\",\n  \"already\",\n  \"also\",\n  \"alter\",\n  \"always\",\n  \"amateur\",\n  \"amazing\",\n  \"among\",\n  \"amount\",\n  \"amused\",\n  \"analyst\",\n  \"anchor\",\n  \"ancient\",\n  \"anger\",\n  \"angle\",\n  \"angry\",\n  \"animal\",\n  \"ankle\",\n  \"announce\",\n  \"annual\",\n  \"another\",\n  \"answer\",\n  \"antenna\",\n  \"antique\",\n  \"anxiety\",\n  \"any\",\n  \"apart\",\n  \"apology\",\n  \"appear\",\n  \"apple\",\n  \"approve\",\n  \"april\",\n  \"arch\",\n  \"arctic\",\n  \"area\",\n  \"arena\",\n  \"argue\",\n  \"arm\",\n  \"armed\",\n  \"armor\",\n  \"army\",\n  \"around\",\n  \"arrange\",\n  \"arrest\",\n  \"arrive\",\n  \"arrow\",\n  \"art\",\n  \"artefact\",\n  \"artist\",\n  \"artwork\",\n  \"ask\",\n  \"aspect\",\n  \"assault\",\n  \"asset\",\n  \"assist\",\n  \"assume\",\n  \"asthma\",\n  \"athlete\",\n  \"atom\",\n  \"attack\",\n  \"attend\",\n  \"attitude\",\n  \"attract\",\n  \"auction\",\n  \"audit\",\n  \"august\",\n  \"aunt\",\n  \"author\",\n  \"auto\",\n  \"autumn\",\n  \"average\",\n  \"avocado\",\n  \"avoid\",\n  \"awake\",\n  \"aware\",\n  \"away\",\n  \"awesome\",\n  \"awful\",\n  \"awkward\",\n  \"axis\",\n  \"baby\",\n  \"bachelor\",\n  \"bacon\",\n  \"badge\",\n  \"bag\",\n  \"balance\",\n  \"balcony\",\n  \"ball\",\n  \"bamboo\",\n  \"banana\",\n  \"banner\",\n  \"bar\",\n  \"barely\",\n  \"bargain\",\n  \"barrel\",\n  \"base\",\n  \"basic\",\n  \"basket\",\n  \"battle\",\n  \"beach\",\n  \"bean\",\n  \"beauty\",\n  \"because\",\n  \"become\",\n  \"beef\",\n  \"before\",\n  \"begin\",\n  \"behave\",\n  \"behind\",\n  \"believe\",\n  \"below\",\n  \"belt\",\n  \"bench\",\n  \"benefit\",\n  \"best\",\n  \"betray\",\n  \"better\",\n  \"between\",\n  \"beyond\",\n  \"bicycle\",\n  \"bid\",\n  \"bike\",\n  \"bind\",\n  \"biology\",\n  \"bird\",\n  \"birth\",\n  \"bitter\",\n  \"black\",\n  \"blade\",\n  \"blame\",\n  \"blanket\",\n  \"blast\",\n  \"bleak\",\n  \"bless\",\n  \"blind\",\n  \"blood\",\n  \"blossom\",\n  \"blouse\",\n  \"blue\",\n  \"blur\",\n  \"blush\",\n  \"board\",\n  \"boat\",\n  \"body\",\n  \"boil\",\n  \"bomb\",\n  \"bone\",\n  \"bonus\",\n  \"book\",\n  \"boost\",\n  \"border\",\n  \"boring\",\n  \"borrow\",\n  \"boss\",\n  \"bottom\",\n  \"bounce\",\n  \"box\",\n  \"boy\",\n  \"bracket\",\n  \"brain\",\n  \"brand\",\n  \"brass\",\n  \"brave\",\n  \"bread\",\n  \"breeze\",\n  \"brick\",\n  \"bridge\",\n  \"brief\",\n  \"bright\",\n  \"bring\",\n  \"brisk\",\n  \"broccoli\",\n  \"broken\",\n  \"bronze\",\n  \"broom\",\n  \"brother\",\n  \"brown\",\n  \"brush\",\n  \"bubble\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"build\",\n  \"bulb\",\n  \"bulk\",\n  \"bullet\",\n  \"bundle\",\n  \"bunker\",\n  \"burden\",\n  \"burger\",\n  \"burst\",\n  \"bus\",\n  \"business\",\n  \"busy\",\n  \"butter\",\n  \"buyer\",\n  \"buzz\",\n  \"cabbage\",\n  \"cabin\",\n  \"cable\",\n  \"cactus\",\n  \"cage\",\n  \"cake\",\n  \"call\",\n  \"calm\",\n  \"camera\",\n  \"camp\",\n  \"can\",\n  \"canal\",\n  \"cancel\",\n  \"candy\",\n  \"cannon\",\n  \"canoe\",\n  \"canvas\",\n  \"canyon\",\n  \"capable\",\n  \"capital\",\n  \"captain\",\n  \"car\",\n  \"carbon\",\n  \"card\",\n  \"cargo\",\n  \"carpet\",\n  \"carry\",\n  \"cart\",\n  \"case\",\n  \"cash\",\n  \"casino\",\n  \"castle\",\n  \"casual\",\n  \"cat\",\n  \"catalog\",\n  \"catch\",\n  \"category\",\n  \"cattle\",\n  \"caught\",\n  \"cause\",\n  \"caution\",\n  \"cave\",\n  \"ceiling\",\n  \"celery\",\n  \"cement\",\n  \"census\",\n  \"century\",\n  \"cereal\",\n  \"certain\",\n  \"chair\",\n  \"chalk\",\n  \"champion\",\n  \"change\",\n  \"chaos\",\n  \"chapter\",\n  \"charge\",\n  \"chase\",\n  \"chat\",\n  \"cheap\",\n  \"check\",\n  \"cheese\",\n  \"chef\",\n  \"cherry\",\n  \"chest\",\n  \"chicken\",\n  \"chief\",\n  \"child\",\n  \"chimney\",\n  \"choice\",\n  \"choose\",\n  \"chronic\",\n  \"chuckle\",\n  \"chunk\",\n  \"churn\",\n  \"cigar\",\n  \"cinnamon\",\n  \"circle\",\n  \"citizen\",\n  \"city\",\n  \"civil\",\n  \"claim\",\n  \"clap\",\n  \"clarify\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clerk\",\n  \"clever\",\n  \"click\",\n  \"client\",\n  \"cliff\",\n  \"climb\",\n  \"clinic\",\n  \"clip\",\n  \"clock\",\n  \"clog\",\n  \"close\",\n  \"cloth\",\n  \"cloud\",\n  \"clown\",\n  \"club\",\n  \"clump\",\n  \"cluster\",\n  \"clutch\",\n  \"coach\",\n  \"coast\",\n  \"coconut\",\n  \"code\",\n  \"coffee\",\n  \"coil\",\n  \"coin\",\n  \"collect\",\n  \"color\",\n  \"column\",\n  \"combine\",\n  \"come\",\n  \"comfort\",\n  \"comic\",\n  \"common\",\n  \"company\",\n  \"concert\",\n  \"conduct\",\n  \"confirm\",\n  \"congress\",\n  \"connect\",\n  \"consider\",\n  \"control\",\n  \"convince\",\n  \"cook\",\n  \"cool\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"core\",\n  \"corn\",\n  \"correct\",\n  \"cost\",\n  \"cotton\",\n  \"couch\",\n  \"country\",\n  \"couple\",\n  \"course\",\n  \"cousin\",\n  \"cover\",\n  \"coyote\",\n  \"crack\",\n  \"cradle\",\n  \"craft\",\n  \"cram\",\n  \"crane\",\n  \"crash\",\n  \"crater\",\n  \"crawl\",\n  \"crazy\",\n  \"cream\",\n  \"credit\",\n  \"creek\",\n  \"crew\",\n  \"cricket\",\n  \"crime\",\n  \"crisp\",\n  \"critic\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crowd\",\n  \"crucial\",\n  \"cruel\",\n  \"cruise\",\n  \"crumble\",\n  \"crunch\",\n  \"crush\",\n  \"cry\",\n  \"crystal\",\n  \"cube\",\n  \"culture\",\n  \"cup\",\n  \"cupboard\",\n  \"curious\",\n  \"current\",\n  \"curtain\",\n  \"curve\",\n  \"cushion\",\n  \"custom\",\n  \"cute\",\n  \"cycle\",\n  \"dad\",\n  \"damage\",\n  \"damp\",\n  \"dance\",\n  \"danger\",\n  \"daring\",\n  \"dash\",\n  \"daughter\",\n  \"dawn\",\n  \"day\",\n  \"deal\",\n  \"debate\",\n  \"debris\",\n  \"decade\",\n  \"december\",\n  \"decide\",\n  \"decline\",\n  \"decorate\",\n  \"decrease\",\n  \"deer\",\n  \"defense\",\n  \"define\",\n  \"defy\",\n  \"degree\",\n  \"delay\",\n  \"deliver\",\n  \"demand\",\n  \"demise\",\n  \"denial\",\n  \"dentist\",\n  \"deny\",\n  \"depart\",\n  \"depend\",\n  \"deposit\",\n  \"depth\",\n  \"deputy\",\n  \"derive\",\n  \"describe\",\n  \"desert\",\n  \"design\",\n  \"desk\",\n  \"despair\",\n  \"destroy\",\n  \"detail\",\n  \"detect\",\n  \"develop\",\n  \"device\",\n  \"devote\",\n  \"diagram\",\n  \"dial\",\n  \"diamond\",\n  \"diary\",\n  \"dice\",\n  \"diesel\",\n  \"diet\",\n  \"differ\",\n  \"digital\",\n  \"dignity\",\n  \"dilemma\",\n  \"dinner\",\n  \"dinosaur\",\n  \"direct\",\n  \"dirt\",\n  \"disagree\",\n  \"discover\",\n  \"disease\",\n  \"dish\",\n  \"dismiss\",\n  \"disorder\",\n  \"display\",\n  \"distance\",\n  \"divert\",\n  \"divide\",\n  \"divorce\",\n  \"dizzy\",\n  \"doctor\",\n  \"document\",\n  \"dog\",\n  \"doll\",\n  \"dolphin\",\n  \"domain\",\n  \"donate\",\n  \"donkey\",\n  \"donor\",\n  \"door\",\n  \"dose\",\n  \"double\",\n  \"dove\",\n  \"draft\",\n  \"dragon\",\n  \"drama\",\n  \"drastic\",\n  \"draw\",\n  \"dream\",\n  \"dress\",\n  \"drift\",\n  \"drill\",\n  \"drink\",\n  \"drip\",\n  \"drive\",\n  \"drop\",\n  \"drum\",\n  \"dry\",\n  \"duck\",\n  \"dumb\",\n  \"dune\",\n  \"during\",\n  \"dust\",\n  \"dutch\",\n  \"duty\",\n  \"dwarf\",\n  \"dynamic\",\n  \"eager\",\n  \"eagle\",\n  \"early\",\n  \"earn\",\n  \"earth\",\n  \"easily\",\n  \"east\",\n  \"easy\",\n  \"echo\",\n  \"ecology\",\n  \"economy\",\n  \"edge\",\n  \"edit\",\n  \"educate\",\n  \"effort\",\n  \"egg\",\n  \"eight\",\n  \"either\",\n  \"elbow\",\n  \"elder\",\n  \"electric\",\n  \"elegant\",\n  \"element\",\n  \"elephant\",\n  \"elevator\",\n  \"elite\",\n  \"else\",\n  \"embark\",\n  \"embody\",\n  \"embrace\",\n  \"emerge\",\n  \"emotion\",\n  \"employ\",\n  \"empower\",\n  \"empty\",\n  \"enable\",\n  \"enact\",\n  \"end\",\n  \"endless\",\n  \"endorse\",\n  \"enemy\",\n  \"energy\",\n  \"enforce\",\n  \"engage\",\n  \"engine\",\n  \"enhance\",\n  \"enjoy\",\n  \"enlist\",\n  \"enough\",\n  \"enrich\",\n  \"enroll\",\n  \"ensure\",\n  \"enter\",\n  \"entire\",\n  \"entry\",\n  \"envelope\",\n  \"episode\",\n  \"equal\",\n  \"equip\",\n  \"era\",\n  \"erase\",\n  \"erode\",\n  \"erosion\",\n  \"error\",\n  \"erupt\",\n  \"escape\",\n  \"essay\",\n  \"essence\",\n  \"estate\",\n  \"eternal\",\n  \"ethics\",\n  \"evidence\",\n  \"evil\",\n  \"evoke\",\n  \"evolve\",\n  \"exact\",\n  \"example\",\n  \"excess\",\n  \"exchange\",\n  \"excite\",\n  \"exclude\",\n  \"excuse\",\n  \"execute\",\n  \"exercise\",\n  \"exhaust\",\n  \"exhibit\",\n  \"exile\",\n  \"exist\",\n  \"exit\",\n  \"exotic\",\n  \"expand\",\n  \"expect\",\n  \"expire\",\n  \"explain\",\n  \"expose\",\n  \"express\",\n  \"extend\",\n  \"extra\",\n  \"eye\",\n  \"eyebrow\",\n  \"fabric\",\n  \"face\",\n  \"faculty\",\n  \"fade\",\n  \"faint\",\n  \"faith\",\n  \"fall\",\n  \"false\",\n  \"fame\",\n  \"family\",\n  \"famous\",\n  \"fan\",\n  \"fancy\",\n  \"fantasy\",\n  \"farm\",\n  \"fashion\",\n  \"fat\",\n  \"fatal\",\n  \"father\",\n  \"fatigue\",\n  \"fault\",\n  \"favorite\",\n  \"feature\",\n  \"february\",\n  \"federal\",\n  \"fee\",\n  \"feed\",\n  \"feel\",\n  \"female\",\n  \"fence\",\n  \"festival\",\n  \"fetch\",\n  \"fever\",\n  \"few\",\n  \"fiber\",\n  \"fiction\",\n  \"field\",\n  \"figure\",\n  \"file\",\n  \"film\",\n  \"filter\",\n  \"final\",\n  \"find\",\n  \"fine\",\n  \"finger\",\n  \"finish\",\n  \"fire\",\n  \"firm\",\n  \"first\",\n  \"fiscal\",\n  \"fish\",\n  \"fit\",\n  \"fitness\",\n  \"fix\",\n  \"flag\",\n  \"flame\",\n  \"flash\",\n  \"flat\",\n  \"flavor\",\n  \"flee\",\n  \"flight\",\n  \"flip\",\n  \"float\",\n  \"flock\",\n  \"floor\",\n  \"flower\",\n  \"fluid\",\n  \"flush\",\n  \"fly\",\n  \"foam\",\n  \"focus\",\n  \"fog\",\n  \"foil\",\n  \"fold\",\n  \"follow\",\n  \"food\",\n  \"foot\",\n  \"force\",\n  \"forest\",\n  \"forget\",\n  \"fork\",\n  \"fortune\",\n  \"forum\",\n  \"forward\",\n  \"fossil\",\n  \"foster\",\n  \"found\",\n  \"fox\",\n  \"fragile\",\n  \"frame\",\n  \"frequent\",\n  \"fresh\",\n  \"friend\",\n  \"fringe\",\n  \"frog\",\n  \"front\",\n  \"frost\",\n  \"frown\",\n  \"frozen\",\n  \"fruit\",\n  \"fuel\",\n  \"fun\",\n  \"funny\",\n  \"furnace\",\n  \"fury\",\n  \"future\",\n  \"gadget\",\n  \"gain\",\n  \"galaxy\",\n  \"gallery\",\n  \"game\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"garlic\",\n  \"garment\",\n  \"gas\",\n  \"gasp\",\n  \"gate\",\n  \"gather\",\n  \"gauge\",\n  \"gaze\",\n  \"general\",\n  \"genius\",\n  \"genre\",\n  \"gentle\",\n  \"genuine\",\n  \"gesture\",\n  \"ghost\",\n  \"giant\",\n  \"gift\",\n  \"giggle\",\n  \"ginger\",\n  \"giraffe\",\n  \"girl\",\n  \"give\",\n  \"glad\",\n  \"glance\",\n  \"glare\",\n  \"glass\",\n  \"glide\",\n  \"glimpse\",\n  \"globe\",\n  \"gloom\",\n  \"glory\",\n  \"glove\",\n  \"glow\",\n  \"glue\",\n  \"goat\",\n  \"goddess\",\n  \"gold\",\n  \"good\",\n  \"goose\",\n  \"gorilla\",\n  \"gospel\",\n  \"gossip\",\n  \"govern\",\n  \"gown\",\n  \"grab\",\n  \"grace\",\n  \"grain\",\n  \"grant\",\n  \"grape\",\n  \"grass\",\n  \"gravity\",\n  \"great\",\n  \"green\",\n  \"grid\",\n  \"grief\",\n  \"grit\",\n  \"grocery\",\n  \"group\",\n  \"grow\",\n  \"grunt\",\n  \"guard\",\n  \"guess\",\n  \"guide\",\n  \"guilt\",\n  \"guitar\",\n  \"gun\",\n  \"gym\",\n  \"habit\",\n  \"hair\",\n  \"half\",\n  \"hammer\",\n  \"hamster\",\n  \"hand\",\n  \"happy\",\n  \"harbor\",\n  \"hard\",\n  \"harsh\",\n  \"harvest\",\n  \"hat\",\n  \"have\",\n  \"hawk\",\n  \"hazard\",\n  \"head\",\n  \"health\",\n  \"heart\",\n  \"heavy\",\n  \"hedgehog\",\n  \"height\",\n  \"hello\",\n  \"helmet\",\n  \"help\",\n  \"hen\",\n  \"hero\",\n  \"hidden\",\n  \"high\",\n  \"hill\",\n  \"hint\",\n  \"hip\",\n  \"hire\",\n  \"history\",\n  \"hobby\",\n  \"hockey\",\n  \"hold\",\n  \"hole\",\n  \"holiday\",\n  \"hollow\",\n  \"home\",\n  \"honey\",\n  \"hood\",\n  \"hope\",\n  \"horn\",\n  \"horror\",\n  \"horse\",\n  \"hospital\",\n  \"host\",\n  \"hotel\",\n  \"hour\",\n  \"hover\",\n  \"hub\",\n  \"huge\",\n  \"human\",\n  \"humble\",\n  \"humor\",\n  \"hundred\",\n  \"hungry\",\n  \"hunt\",\n  \"hurdle\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hybrid\",\n  \"ice\",\n  \"icon\",\n  \"idea\",\n  \"identify\",\n  \"idle\",\n  \"ignore\",\n  \"ill\",\n  \"illegal\",\n  \"illness\",\n  \"image\",\n  \"imitate\",\n  \"immense\",\n  \"immune\",\n  \"impact\",\n  \"impose\",\n  \"improve\",\n  \"impulse\",\n  \"inch\",\n  \"include\",\n  \"income\",\n  \"increase\",\n  \"index\",\n  \"indicate\",\n  \"indoor\",\n  \"industry\",\n  \"infant\",\n  \"inflict\",\n  \"inform\",\n  \"inhale\",\n  \"inherit\",\n  \"initial\",\n  \"inject\",\n  \"injury\",\n  \"inmate\",\n  \"inner\",\n  \"innocent\",\n  \"input\",\n  \"inquiry\",\n  \"insane\",\n  \"insect\",\n  \"inside\",\n  \"inspire\",\n  \"install\",\n  \"intact\",\n  \"interest\",\n  \"into\",\n  \"invest\",\n  \"invite\",\n  \"involve\",\n  \"iron\",\n  \"island\",\n  \"isolate\",\n  \"issue\",\n  \"item\",\n  \"ivory\",\n  \"jacket\",\n  \"jaguar\",\n  \"jar\",\n  \"jazz\",\n  \"jealous\",\n  \"jeans\",\n  \"jelly\",\n  \"jewel\",\n  \"job\",\n  \"join\",\n  \"joke\",\n  \"journey\",\n  \"joy\",\n  \"judge\",\n  \"juice\",\n  \"jump\",\n  \"jungle\",\n  \"junior\",\n  \"junk\",\n  \"just\",\n  \"kangaroo\",\n  \"keen\",\n  \"keep\",\n  \"ketchup\",\n  \"key\",\n  \"kick\",\n  \"kid\",\n  \"kidney\",\n  \"kind\",\n  \"kingdom\",\n  \"kiss\",\n  \"kit\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kiwi\",\n  \"knee\",\n  \"knife\",\n  \"knock\",\n  \"know\",\n  \"lab\",\n  \"label\",\n  \"labor\",\n  \"ladder\",\n  \"lady\",\n  \"lake\",\n  \"lamp\",\n  \"language\",\n  \"laptop\",\n  \"large\",\n  \"later\",\n  \"latin\",\n  \"laugh\",\n  \"laundry\",\n  \"lava\",\n  \"law\",\n  \"lawn\",\n  \"lawsuit\",\n  \"layer\",\n  \"lazy\",\n  \"leader\",\n  \"leaf\",\n  \"learn\",\n  \"leave\",\n  \"lecture\",\n  \"left\",\n  \"leg\",\n  \"legal\",\n  \"legend\",\n  \"leisure\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"leopard\",\n  \"lesson\",\n  \"letter\",\n  \"level\",\n  \"liar\",\n  \"liberty\",\n  \"library\",\n  \"license\",\n  \"life\",\n  \"lift\",\n  \"light\",\n  \"like\",\n  \"limb\",\n  \"limit\",\n  \"link\",\n  \"lion\",\n  \"liquid\",\n  \"list\",\n  \"little\",\n  \"live\",\n  \"lizard\",\n  \"load\",\n  \"loan\",\n  \"lobster\",\n  \"local\",\n  \"lock\",\n  \"logic\",\n  \"lonely\",\n  \"long\",\n  \"loop\",\n  \"lottery\",\n  \"loud\",\n  \"lounge\",\n  \"love\",\n  \"loyal\",\n  \"lucky\",\n  \"luggage\",\n  \"lumber\",\n  \"lunar\",\n  \"lunch\",\n  \"luxury\",\n  \"lyrics\",\n  \"machine\",\n  \"mad\",\n  \"magic\",\n  \"magnet\",\n  \"maid\",\n  \"mail\",\n  \"main\",\n  \"major\",\n  \"make\",\n  \"mammal\",\n  \"man\",\n  \"manage\",\n  \"mandate\",\n  \"mango\",\n  \"mansion\",\n  \"manual\",\n  \"maple\",\n  \"marble\",\n  \"march\",\n  \"margin\",\n  \"marine\",\n  \"market\",\n  \"marriage\",\n  \"mask\",\n  \"mass\",\n  \"master\",\n  \"match\",\n  \"material\",\n  \"math\",\n  \"matrix\",\n  \"matter\",\n  \"maximum\",\n  \"maze\",\n  \"meadow\",\n  \"mean\",\n  \"measure\",\n  \"meat\",\n  \"mechanic\",\n  \"medal\",\n  \"media\",\n  \"melody\",\n  \"melt\",\n  \"member\",\n  \"memory\",\n  \"mention\",\n  \"menu\",\n  \"mercy\",\n  \"merge\",\n  \"merit\",\n  \"merry\",\n  \"mesh\",\n  \"message\",\n  \"metal\",\n  \"method\",\n  \"middle\",\n  \"midnight\",\n  \"milk\",\n  \"million\",\n  \"mimic\",\n  \"mind\",\n  \"minimum\",\n  \"minor\",\n  \"minute\",\n  \"miracle\",\n  \"mirror\",\n  \"misery\",\n  \"miss\",\n  \"mistake\",\n  \"mix\",\n  \"mixed\",\n  \"mixture\",\n  \"mobile\",\n  \"model\",\n  \"modify\",\n  \"mom\",\n  \"moment\",\n  \"monitor\",\n  \"monkey\",\n  \"monster\",\n  \"month\",\n  \"moon\",\n  \"moral\",\n  \"more\",\n  \"morning\",\n  \"mosquito\",\n  \"mother\",\n  \"motion\",\n  \"motor\",\n  \"mountain\",\n  \"mouse\",\n  \"move\",\n  \"movie\",\n  \"much\",\n  \"muffin\",\n  \"mule\",\n  \"multiply\",\n  \"muscle\",\n  \"museum\",\n  \"mushroom\",\n  \"music\",\n  \"must\",\n  \"mutual\",\n  \"myself\",\n  \"mystery\",\n  \"myth\",\n  \"naive\",\n  \"name\",\n  \"napkin\",\n  \"narrow\",\n  \"nasty\",\n  \"nation\",\n  \"nature\",\n  \"near\",\n  \"neck\",\n  \"need\",\n  \"negative\",\n  \"neglect\",\n  \"neither\",\n  \"nephew\",\n  \"nerve\",\n  \"nest\",\n  \"net\",\n  \"network\",\n  \"neutral\",\n  \"never\",\n  \"news\",\n  \"next\",\n  \"nice\",\n  \"night\",\n  \"noble\",\n  \"noise\",\n  \"nominee\",\n  \"noodle\",\n  \"normal\",\n  \"north\",\n  \"nose\",\n  \"notable\",\n  \"note\",\n  \"nothing\",\n  \"notice\",\n  \"novel\",\n  \"now\",\n  \"nuclear\",\n  \"number\",\n  \"nurse\",\n  \"nut\",\n  \"oak\",\n  \"obey\",\n  \"object\",\n  \"oblige\",\n  \"obscure\",\n  \"observe\",\n  \"obtain\",\n  \"obvious\",\n  \"occur\",\n  \"ocean\",\n  \"october\",\n  \"odor\",\n  \"off\",\n  \"offer\",\n  \"office\",\n  \"often\",\n  \"oil\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympic\",\n  \"omit\",\n  \"once\",\n  \"one\",\n  \"onion\",\n  \"online\",\n  \"only\",\n  \"open\",\n  \"opera\",\n  \"opinion\",\n  \"oppose\",\n  \"option\",\n  \"orange\",\n  \"orbit\",\n  \"orchard\",\n  \"order\",\n  \"ordinary\",\n  \"organ\",\n  \"orient\",\n  \"original\",\n  \"orphan\",\n  \"ostrich\",\n  \"other\",\n  \"outdoor\",\n  \"outer\",\n  \"output\",\n  \"outside\",\n  \"oval\",\n  \"oven\",\n  \"over\",\n  \"own\",\n  \"owner\",\n  \"oxygen\",\n  \"oyster\",\n  \"ozone\",\n  \"pact\",\n  \"paddle\",\n  \"page\",\n  \"pair\",\n  \"palace\",\n  \"palm\",\n  \"panda\",\n  \"panel\",\n  \"panic\",\n  \"panther\",\n  \"paper\",\n  \"parade\",\n  \"parent\",\n  \"park\",\n  \"parrot\",\n  \"party\",\n  \"pass\",\n  \"patch\",\n  \"path\",\n  \"patient\",\n  \"patrol\",\n  \"pattern\",\n  \"pause\",\n  \"pave\",\n  \"payment\",\n  \"peace\",\n  \"peanut\",\n  \"pear\",\n  \"peasant\",\n  \"pelican\",\n  \"pen\",\n  \"penalty\",\n  \"pencil\",\n  \"people\",\n  \"pepper\",\n  \"perfect\",\n  \"permit\",\n  \"person\",\n  \"pet\",\n  \"phone\",\n  \"photo\",\n  \"phrase\",\n  \"physical\",\n  \"piano\",\n  \"picnic\",\n  \"picture\",\n  \"piece\",\n  \"pig\",\n  \"pigeon\",\n  \"pill\",\n  \"pilot\",\n  \"pink\",\n  \"pioneer\",\n  \"pipe\",\n  \"pistol\",\n  \"pitch\",\n  \"pizza\",\n  \"place\",\n  \"planet\",\n  \"plastic\",\n  \"plate\",\n  \"play\",\n  \"please\",\n  \"pledge\",\n  \"pluck\",\n  \"plug\",\n  \"plunge\",\n  \"poem\",\n  \"poet\",\n  \"point\",\n  \"polar\",\n  \"pole\",\n  \"police\",\n  \"pond\",\n  \"pony\",\n  \"pool\",\n  \"popular\",\n  \"portion\",\n  \"position\",\n  \"possible\",\n  \"post\",\n  \"potato\",\n  \"pottery\",\n  \"poverty\",\n  \"powder\",\n  \"power\",\n  \"practice\",\n  \"praise\",\n  \"predict\",\n  \"prefer\",\n  \"prepare\",\n  \"present\",\n  \"pretty\",\n  \"prevent\",\n  \"price\",\n  \"pride\",\n  \"primary\",\n  \"print\",\n  \"priority\",\n  \"prison\",\n  \"private\",\n  \"prize\",\n  \"problem\",\n  \"process\",\n  \"produce\",\n  \"profit\",\n  \"program\",\n  \"project\",\n  \"promote\",\n  \"proof\",\n  \"property\",\n  \"prosper\",\n  \"protect\",\n  \"proud\",\n  \"provide\",\n  \"public\",\n  \"pudding\",\n  \"pull\",\n  \"pulp\",\n  \"pulse\",\n  \"pumpkin\",\n  \"punch\",\n  \"pupil\",\n  \"puppy\",\n  \"purchase\",\n  \"purity\",\n  \"purpose\",\n  \"purse\",\n  \"push\",\n  \"put\",\n  \"puzzle\",\n  \"pyramid\",\n  \"quality\",\n  \"quantum\",\n  \"quarter\",\n  \"question\",\n  \"quick\",\n  \"quit\",\n  \"quiz\",\n  \"quote\",\n  \"rabbit\",\n  \"raccoon\",\n  \"race\",\n  \"rack\",\n  \"radar\",\n  \"radio\",\n  \"rail\",\n  \"rain\",\n  \"raise\",\n  \"rally\",\n  \"ramp\",\n  \"ranch\",\n  \"random\",\n  \"range\",\n  \"rapid\",\n  \"rare\",\n  \"rate\",\n  \"rather\",\n  \"raven\",\n  \"raw\",\n  \"razor\",\n  \"ready\",\n  \"real\",\n  \"reason\",\n  \"rebel\",\n  \"rebuild\",\n  \"recall\",\n  \"receive\",\n  \"recipe\",\n  \"record\",\n  \"recycle\",\n  \"reduce\",\n  \"reflect\",\n  \"reform\",\n  \"refuse\",\n  \"region\",\n  \"regret\",\n  \"regular\",\n  \"reject\",\n  \"relax\",\n  \"release\",\n  \"relief\",\n  \"rely\",\n  \"remain\",\n  \"remember\",\n  \"remind\",\n  \"remove\",\n  \"render\",\n  \"renew\",\n  \"rent\",\n  \"reopen\",\n  \"repair\",\n  \"repeat\",\n  \"replace\",\n  \"report\",\n  \"require\",\n  \"rescue\",\n  \"resemble\",\n  \"resist\",\n  \"resource\",\n  \"response\",\n  \"result\",\n  \"retire\",\n  \"retreat\",\n  \"return\",\n  \"reunion\",\n  \"reveal\",\n  \"review\",\n  \"reward\",\n  \"rhythm\",\n  \"rib\",\n  \"ribbon\",\n  \"rice\",\n  \"rich\",\n  \"ride\",\n  \"ridge\",\n  \"rifle\",\n  \"right\",\n  \"rigid\",\n  \"ring\",\n  \"riot\",\n  \"ripple\",\n  \"risk\",\n  \"ritual\",\n  \"rival\",\n  \"river\",\n  \"road\",\n  \"roast\",\n  \"robot\",\n  \"robust\",\n  \"rocket\",\n  \"romance\",\n  \"roof\",\n  \"rookie\",\n  \"room\",\n  \"rose\",\n  \"rotate\",\n  \"rough\",\n  \"round\",\n  \"route\",\n  \"royal\",\n  \"rubber\",\n  \"rude\",\n  \"rug\",\n  \"rule\",\n  \"run\",\n  \"runway\",\n  \"rural\",\n  \"sad\",\n  \"saddle\",\n  \"sadness\",\n  \"safe\",\n  \"sail\",\n  \"salad\",\n  \"salmon\",\n  \"salon\",\n  \"salt\",\n  \"salute\",\n  \"same\",\n  \"sample\",\n  \"sand\",\n  \"satisfy\",\n  \"satoshi\",\n  \"sauce\",\n  \"sausage\",\n  \"save\",\n  \"say\",\n  \"scale\",\n  \"scan\",\n  \"scare\",\n  \"scatter\",\n  \"scene\",\n  \"scheme\",\n  \"school\",\n  \"science\",\n  \"scissors\",\n  \"scorpion\",\n  \"scout\",\n  \"scrap\",\n  \"screen\",\n  \"script\",\n  \"scrub\",\n  \"sea\",\n  \"search\",\n  \"season\",\n  \"seat\",\n  \"second\",\n  \"secret\",\n  \"section\",\n  \"security\",\n  \"seed\",\n  \"seek\",\n  \"segment\",\n  \"select\",\n  \"sell\",\n  \"seminar\",\n  \"senior\",\n  \"sense\",\n  \"sentence\",\n  \"series\",\n  \"service\",\n  \"session\",\n  \"settle\",\n  \"setup\",\n  \"seven\",\n  \"shadow\",\n  \"shaft\",\n  \"shallow\",\n  \"share\",\n  \"shed\",\n  \"shell\",\n  \"sheriff\",\n  \"shield\",\n  \"shift\",\n  \"shine\",\n  \"ship\",\n  \"shiver\",\n  \"shock\",\n  \"shoe\",\n  \"shoot\",\n  \"shop\",\n  \"short\",\n  \"shoulder\",\n  \"shove\",\n  \"shrimp\",\n  \"shrug\",\n  \"shuffle\",\n  \"shy\",\n  \"sibling\",\n  \"sick\",\n  \"side\",\n  \"siege\",\n  \"sight\",\n  \"sign\",\n  \"silent\",\n  \"silk\",\n  \"silly\",\n  \"silver\",\n  \"similar\",\n  \"simple\",\n  \"since\",\n  \"sing\",\n  \"siren\",\n  \"sister\",\n  \"situate\",\n  \"six\",\n  \"size\",\n  \"skate\",\n  \"sketch\",\n  \"ski\",\n  \"skill\",\n  \"skin\",\n  \"skirt\",\n  \"skull\",\n  \"slab\",\n  \"slam\",\n  \"sleep\",\n  \"slender\",\n  \"slice\",\n  \"slide\",\n  \"slight\",\n  \"slim\",\n  \"slogan\",\n  \"slot\",\n  \"slow\",\n  \"slush\",\n  \"small\",\n  \"smart\",\n  \"smile\",\n  \"smoke\",\n  \"smooth\",\n  \"snack\",\n  \"snake\",\n  \"snap\",\n  \"sniff\",\n  \"snow\",\n  \"soap\",\n  \"soccer\",\n  \"social\",\n  \"sock\",\n  \"soda\",\n  \"soft\",\n  \"solar\",\n  \"soldier\",\n  \"solid\",\n  \"solution\",\n  \"solve\",\n  \"someone\",\n  \"song\",\n  \"soon\",\n  \"sorry\",\n  \"sort\",\n  \"soul\",\n  \"sound\",\n  \"soup\",\n  \"source\",\n  \"south\",\n  \"space\",\n  \"spare\",\n  \"spatial\",\n  \"spawn\",\n  \"speak\",\n  \"special\",\n  \"speed\",\n  \"spell\",\n  \"spend\",\n  \"sphere\",\n  \"spice\",\n  \"spider\",\n  \"spike\",\n  \"spin\",\n  \"spirit\",\n  \"split\",\n  \"spoil\",\n  \"sponsor\",\n  \"spoon\",\n  \"sport\",\n  \"spot\",\n  \"spray\",\n  \"spread\",\n  \"spring\",\n  \"spy\",\n  \"square\",\n  \"squeeze\",\n  \"squirrel\",\n  \"stable\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"stairs\",\n  \"stamp\",\n  \"stand\",\n  \"start\",\n  \"state\",\n  \"stay\",\n  \"steak\",\n  \"steel\",\n  \"stem\",\n  \"step\",\n  \"stereo\",\n  \"stick\",\n  \"still\",\n  \"sting\",\n  \"stock\",\n  \"stomach\",\n  \"stone\",\n  \"stool\",\n  \"story\",\n  \"stove\",\n  \"strategy\",\n  \"street\",\n  \"strike\",\n  \"strong\",\n  \"struggle\",\n  \"student\",\n  \"stuff\",\n  \"stumble\",\n  \"style\",\n  \"subject\",\n  \"submit\",\n  \"subway\",\n  \"success\",\n  \"such\",\n  \"sudden\",\n  \"suffer\",\n  \"sugar\",\n  \"suggest\",\n  \"suit\",\n  \"summer\",\n  \"sun\",\n  \"sunny\",\n  \"sunset\",\n  \"super\",\n  \"supply\",\n  \"supreme\",\n  \"sure\",\n  \"surface\",\n  \"surge\",\n  \"surprise\",\n  \"surround\",\n  \"survey\",\n  \"suspect\",\n  \"sustain\",\n  \"swallow\",\n  \"swamp\",\n  \"swap\",\n  \"swarm\",\n  \"swear\",\n  \"sweet\",\n  \"swift\",\n  \"swim\",\n  \"swing\",\n  \"switch\",\n  \"sword\",\n  \"symbol\",\n  \"symptom\",\n  \"syrup\",\n  \"system\",\n  \"table\",\n  \"tackle\",\n  \"tag\",\n  \"tail\",\n  \"talent\",\n  \"talk\",\n  \"tank\",\n  \"tape\",\n  \"target\",\n  \"task\",\n  \"taste\",\n  \"tattoo\",\n  \"taxi\",\n  \"teach\",\n  \"team\",\n  \"tell\",\n  \"ten\",\n  \"tenant\",\n  \"tennis\",\n  \"tent\",\n  \"term\",\n  \"test\",\n  \"text\",\n  \"thank\",\n  \"that\",\n  \"theme\",\n  \"then\",\n  \"theory\",\n  \"there\",\n  \"they\",\n  \"thing\",\n  \"this\",\n  \"thought\",\n  \"three\",\n  \"thrive\",\n  \"throw\",\n  \"thumb\",\n  \"thunder\",\n  \"ticket\",\n  \"tide\",\n  \"tiger\",\n  \"tilt\",\n  \"timber\",\n  \"time\",\n  \"tiny\",\n  \"tip\",\n  \"tired\",\n  \"tissue\",\n  \"title\",\n  \"toast\",\n  \"tobacco\",\n  \"today\",\n  \"toddler\",\n  \"toe\",\n  \"together\",\n  \"toilet\",\n  \"token\",\n  \"tomato\",\n  \"tomorrow\",\n  \"tone\",\n  \"tongue\",\n  \"tonight\",\n  \"tool\",\n  \"tooth\",\n  \"top\",\n  \"topic\",\n  \"topple\",\n  \"torch\",\n  \"tornado\",\n  \"tortoise\",\n  \"toss\",\n  \"total\",\n  \"tourist\",\n  \"toward\",\n  \"tower\",\n  \"town\",\n  \"toy\",\n  \"track\",\n  \"trade\",\n  \"traffic\",\n  \"tragic\",\n  \"train\",\n  \"transfer\",\n  \"trap\",\n  \"trash\",\n  \"travel\",\n  \"tray\",\n  \"treat\",\n  \"tree\",\n  \"trend\",\n  \"trial\",\n  \"tribe\",\n  \"trick\",\n  \"trigger\",\n  \"trim\",\n  \"trip\",\n  \"trophy\",\n  \"trouble\",\n  \"truck\",\n  \"true\",\n  \"truly\",\n  \"trumpet\",\n  \"trust\",\n  \"truth\",\n  \"try\",\n  \"tube\",\n  \"tuition\",\n  \"tumble\",\n  \"tuna\",\n  \"tunnel\",\n  \"turkey\",\n  \"turn\",\n  \"turtle\",\n  \"twelve\",\n  \"twenty\",\n  \"twice\",\n  \"twin\",\n  \"twist\",\n  \"two\",\n  \"type\",\n  \"typical\",\n  \"ugly\",\n  \"umbrella\",\n  \"unable\",\n  \"unaware\",\n  \"uncle\",\n  \"uncover\",\n  \"under\",\n  \"undo\",\n  \"unfair\",\n  \"unfold\",\n  \"unhappy\",\n  \"uniform\",\n  \"unique\",\n  \"unit\",\n  \"universe\",\n  \"unknown\",\n  \"unlock\",\n  \"until\",\n  \"unusual\",\n  \"unveil\",\n  \"update\",\n  \"upgrade\",\n  \"uphold\",\n  \"upon\",\n  \"upper\",\n  \"upset\",\n  \"urban\",\n  \"urge\",\n  \"usage\",\n  \"use\",\n  \"used\",\n  \"useful\",\n  \"useless\",\n  \"usual\",\n  \"utility\",\n  \"vacant\",\n  \"vacuum\",\n  \"vague\",\n  \"valid\",\n  \"valley\",\n  \"valve\",\n  \"van\",\n  \"vanish\",\n  \"vapor\",\n  \"various\",\n  \"vast\",\n  \"vault\",\n  \"vehicle\",\n  \"velvet\",\n  \"vendor\",\n  \"venture\",\n  \"venue\",\n  \"verb\",\n  \"verify\",\n  \"version\",\n  \"very\",\n  \"vessel\",\n  \"veteran\",\n  \"viable\",\n  \"vibrant\",\n  \"vicious\",\n  \"victory\",\n  \"video\",\n  \"view\",\n  \"village\",\n  \"vintage\",\n  \"violin\",\n  \"virtual\",\n  \"virus\",\n  \"visa\",\n  \"visit\",\n  \"visual\",\n  \"vital\",\n  \"vivid\",\n  \"vocal\",\n  \"voice\",\n  \"void\",\n  \"volcano\",\n  \"volume\",\n  \"vote\",\n  \"voyage\",\n  \"wage\",\n  \"wagon\",\n  \"wait\",\n  \"walk\",\n  \"wall\",\n  \"walnut\",\n  \"want\",\n  \"warfare\",\n  \"warm\",\n  \"warrior\",\n  \"wash\",\n  \"wasp\",\n  \"waste\",\n  \"water\",\n  \"wave\",\n  \"way\",\n  \"wealth\",\n  \"weapon\",\n  \"wear\",\n  \"weasel\",\n  \"weather\",\n  \"web\",\n  \"wedding\",\n  \"weekend\",\n  \"weird\",\n  \"welcome\",\n  \"west\",\n  \"wet\",\n  \"whale\",\n  \"what\",\n  \"wheat\",\n  \"wheel\",\n  \"when\",\n  \"where\",\n  \"whip\",\n  \"whisper\",\n  \"wide\",\n  \"width\",\n  \"wife\",\n  \"wild\",\n  \"will\",\n  \"win\",\n  \"window\",\n  \"wine\",\n  \"wing\",\n  \"wink\",\n  \"winner\",\n  \"winter\",\n  \"wire\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"witness\",\n  \"wolf\",\n  \"woman\",\n  \"wonder\",\n  \"wood\",\n  \"wool\",\n  \"word\",\n  \"work\",\n  \"world\",\n  \"worry\",\n  \"worth\",\n  \"wrap\",\n  \"wreck\",\n  \"wrestle\",\n  \"wrist\",\n  \"write\",\n  \"wrong\",\n  \"yard\",\n  \"year\",\n  \"yellow\",\n  \"you\",\n  \"young\",\n  \"youth\",\n  \"zebra\",\n  \"zero\",\n  \"zone\",\n  \"zoo\"\n];\n\n// src/wordlists/index.ts\nvar Language = /* @__PURE__ */ ((Language2) => {\n  Language2[\"english\"] = \"english\";\n  return Language2;\n})(Language || {});\n\n// src/mnemonic/utils.ts\nimport { ErrorCode as ErrorCode20, FuelError as FuelError22 } from \"@fuel-ts/errors\";\nimport { sha256 as sha2562 } from \"@fuel-ts/hasher\";\nimport { arrayify as arrayify17 } from \"@fuel-ts/utils\";\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n}\nfunction getWords(mnemonic) {\n  if (!Array.isArray(mnemonic)) {\n    return mnemonic.split(/\\s+/);\n  }\n  return mnemonic;\n}\nfunction getPhrase(mnemonic) {\n  if (Array.isArray(mnemonic)) {\n    return mnemonic.join(\" \");\n  }\n  return mnemonic;\n}\nfunction entropyToMnemonicIndices(entropy) {\n  const indices = [0];\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i += 1) {\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8;\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  }\n  const checksumBits = entropy.length / 4;\n  const checksum = arrayify17(sha2562(entropy))[0] & getUpperMask(checksumBits);\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return indices;\n}\nfunction mnemonicWordsToEntropy(words, wordlist) {\n  const size = Math.ceil(11 * words.length / 8);\n  const entropy = arrayify17(new Uint8Array(size));\n  let offset = 0;\n  for (let i = 0; i < words.length; i += 1) {\n    const index = wordlist.indexOf(words[i].normalize(\"NFKD\"));\n    if (index === -1) {\n      throw new FuelError22(\n        ErrorCode20.INVALID_MNEMONIC,\n        `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`\n      );\n    }\n    for (let bit = 0; bit < 11; bit += 1) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n      offset += 1;\n    }\n  }\n  const entropyBits = 32 * words.length / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = arrayify17(sha2562(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new FuelError22(\n      ErrorCode20.INVALID_CHECKSUM,\n      \"Checksum validation failed for the provided mnemonic.\"\n    );\n  }\n  return entropy.slice(0, entropyBits / 8);\n}\n\n// src/mnemonic/mnemonic.ts\nvar MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nvar MainnetPRV = \"0x0488ade4\";\nvar TestnetPRV = \"0x04358394\";\nvar MNEMONIC_SIZES = [12, 15, 18, 21, 24];\nfunction assertWordList(wordlist) {\n  if (wordlist.length !== 2048) {\n    throw new FuelError23(\n      ErrorCode21.INVALID_WORD_LIST,\n      `Expected word list length of 2048, but got ${wordlist.length}.`\n    );\n  }\n}\nfunction assertEntropy(entropy) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new FuelError23(\n      ErrorCode21.INVALID_ENTROPY,\n      `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`\n    );\n  }\n}\nfunction assertMnemonic(words) {\n  if (!MNEMONIC_SIZES.includes(words.length)) {\n    const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(\n      \", \"\n    )}] words, but got ${words.length}.`;\n    throw new FuelError23(ErrorCode21.INVALID_MNEMONIC, errorMsg);\n  }\n}\nvar Mnemonic = class {\n  wordlist;\n  /**\n   *\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic instance\n   */\n  constructor(wordlist = english) {\n    this.wordlist = wordlist;\n    assertWordList(this.wordlist);\n  }\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns Entropy hash\n   */\n  mnemonicToEntropy(phrase) {\n    return Mnemonic.mnemonicToEntropy(phrase, this.wordlist);\n  }\n  /**\n   *\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @returns Mnemonic phrase\n   */\n  entropyToMnemonic(entropy) {\n    return Mnemonic.entropyToMnemonic(entropy, this.wordlist);\n  }\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic phrase\n   */\n  static mnemonicToEntropy(phrase, wordlist = english) {\n    const words = getWords(phrase);\n    assertMnemonic(words);\n    return hexlify20(mnemonicWordsToEntropy(words, wordlist));\n  }\n  /**\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static entropyToMnemonic(entropy, wordlist = english) {\n    const entropyBytes = arrayify18(entropy);\n    assertWordList(wordlist);\n    assertEntropy(entropyBytes);\n    return entropyToMnemonicIndices(entropyBytes).map((i) => wordlist[i]).join(\" \");\n  }\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToSeed(phrase, passphrase = \"\") {\n    assertMnemonic(getWords(phrase));\n    const phraseBytes = toUtf8Bytes(getPhrase(phrase));\n    const salt = toUtf8Bytes(`mnemonic${passphrase}`);\n    return pbkdf2(phraseBytes, salt, 2048, 64, \"sha512\");\n  }\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToMasterKeys(phrase, passphrase = \"\") {\n    const seed = Mnemonic.mnemonicToSeed(phrase, passphrase);\n    return Mnemonic.masterKeysFromSeed(seed);\n  }\n  /**\n   * Validates if given mnemonic is  valid\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns true if phrase is a valid mnemonic\n   */\n  static isMnemonicValid(phrase) {\n    const words = getWords(phrase);\n    let i = 0;\n    try {\n      assertMnemonic(words);\n    } catch {\n      return false;\n    }\n    while (i < words.length) {\n      if (Mnemonic.binarySearch(words[i]) === false) {\n        return false;\n      }\n      i += 1;\n    }\n    return true;\n  }\n  static binarySearch(target) {\n    const words = english;\n    let left = 0;\n    let right = words.length - 1;\n    while (left <= right) {\n      const mid = Math.floor((left + right) / 2);\n      if (words[mid] === target) {\n        return true;\n      }\n      if (target < words[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n    return false;\n  }\n  /**\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static masterKeysFromSeed(seed) {\n    const seedArray = arrayify18(seed);\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new FuelError23(\n        ErrorCode21.INVALID_SEED,\n        `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`\n      );\n    }\n    return arrayify18(computeHmac(\"sha512\", MasterSecret, seedArray));\n  }\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  static seedToExtendedKey(seed, testnet = false) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n    const prefix = arrayify18(testnet ? TestnetPRV : MainnetPRV);\n    const depth = \"0x00\";\n    const fingerprint = \"0x00000000\";\n    const index = \"0x00000000\";\n    const chainCode = masterKey.slice(32);\n    const privateKey = masterKey.slice(0, 32);\n    const extendedKey = concat5([\n      prefix,\n      depth,\n      fingerprint,\n      index,\n      chainCode,\n      concat5([\"0x00\", privateKey])\n    ]);\n    const checksum = dataSlice(sha2563(sha2563(extendedKey)), 0, 4);\n    return encodeBase58(concat5([extendedKey, checksum]));\n  }\n  /**\n   *  Create a new mnemonic using a randomly generated number as entropy.\n   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.\n   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.\n   *  If not provided, the default entropy length will be set to 256 bits.\n   *  The return is a list of words that encodes the generated entropy.\n   *\n   *\n   * @param size - Number of bytes used as an entropy\n   * @param extraEntropy - Optional extra entropy to increase randomness\n   * @returns A randomly generated mnemonic\n   */\n  static generate(size = 32, extraEntropy = \"\") {\n    const entropy = extraEntropy ? sha2563(concat5([randomBytes5(size), arrayify18(extraEntropy)])) : randomBytes5(size);\n    return Mnemonic.entropyToMnemonic(entropy);\n  }\n};\nvar mnemonic_default = Mnemonic;\n\n// src/hdwallet/hdwallet.ts\nvar HARDENED_INDEX = 2147483648;\nvar MainnetPRV2 = hexlify21(\"0x0488ade4\");\nvar MainnetPUB = hexlify21(\"0x0488b21e\");\nvar TestnetPRV2 = hexlify21(\"0x04358394\");\nvar TestnetPUB = hexlify21(\"0x043587cf\");\nfunction base58check(data) {\n  return encodeBase582(concat6([data, dataSlice2(sha2564(sha2564(data)), 0, 4)]));\n}\nfunction getExtendedKeyPrefix(isPublic = false, testnet = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV2 : MainnetPRV2;\n}\nfunction isPublicExtendedKey(extendedKey) {\n  return [MainnetPUB, TestnetPUB].includes(hexlify21(extendedKey.slice(0, 4)));\n}\nfunction isValidExtendedKey(extendedKey) {\n  return [MainnetPRV2, TestnetPRV2, MainnetPUB, TestnetPUB].includes(\n    hexlify21(extendedKey.slice(0, 4))\n  );\n}\nfunction parsePath(path, depth = 0) {\n  const components = path.split(\"/\");\n  if (components.length === 0 || components[0] === \"m\" && depth !== 0) {\n    throw new FuelError24(ErrorCode22.HD_WALLET_ERROR, `invalid path - ${path}`);\n  }\n  if (components[0] === \"m\") {\n    components.shift();\n  }\n  return components.map(\n    (p) => ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\nvar HDWallet = class {\n  depth = 0;\n  index = 0;\n  fingerprint = hexlify21(\"0x00000000\");\n  parentFingerprint = hexlify21(\"0x00000000\");\n  privateKey;\n  publicKey;\n  chainCode;\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config) {\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = hexlify21(signer.compressedPublicKey);\n      this.privateKey = hexlify21(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new FuelError24(\n          ErrorCode22.HD_WALLET_ERROR,\n          \"Both public and private Key cannot be missing. At least one should be provided.\"\n        );\n      }\n      this.publicKey = hexlify21(config.publicKey);\n    }\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = dataSlice2(ripemd160(sha2564(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index) {\n    const privateKey = this.privateKey && arrayify19(this.privateKey);\n    const publicKey = arrayify19(this.publicKey);\n    const chainCode = arrayify19(this.chainCode);\n    const data = new Uint8Array(37);\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new FuelError24(\n          ErrorCode22.HD_WALLET_ERROR,\n          \"Cannot derive a hardened index without a private Key.\"\n        );\n      }\n      data.set(privateKey, 1);\n    } else {\n      data.set(arrayify19(this.publicKey));\n    }\n    data.set(toBytes2(index, 4), 33);\n    const bytes = arrayify19(computeHmac2(\"sha512\", chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n    if (privateKey) {\n      const N = \"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\";\n      const ki = bn20(IL).add(privateKey).mod(N).toBytes(32);\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint\n      });\n    }\n    const signer = new Signer(hexlify21(IL));\n    const Ki = signer.addPoint(publicKey);\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint\n    });\n  }\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path) {\n    const paths = parsePath(path, this.depth);\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), this);\n  }\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic = false, testnet = false) {\n    if (this.depth >= 256) {\n      throw new FuelError24(\n        ErrorCode22.HD_WALLET_ERROR,\n        `Exceeded max depth of 255. Current depth: ${this.depth}.`\n      );\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = hexlify21(Uint8Array.from([this.depth]));\n    const parentFingerprint = this.parentFingerprint;\n    const index = toHex(this.index, 4);\n    const chainCode = this.chainCode;\n    const key = this.privateKey != null && !isPublic ? concat6([\"0x00\", this.privateKey]) : this.publicKey;\n    const extendedKey = arrayify19(concat6([prefix, depth, parentFingerprint, index, chainCode, key]));\n    return base58check(extendedKey);\n  }\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed) {\n    const masterKey = mnemonic_default.masterKeysFromSeed(seed);\n    return new HDWallet({\n      chainCode: arrayify19(masterKey.slice(32)),\n      privateKey: arrayify19(masterKey.slice(0, 32))\n    });\n  }\n  static fromExtendedKey(extendedKey) {\n    const decoded = hexlify21(toBytes2(decodeBase58(extendedKey)));\n    const bytes = arrayify19(decoded);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new FuelError24(ErrorCode22.HD_WALLET_ERROR, \"Provided key is not a valid extended key.\");\n    }\n    if (!validChecksum) {\n      throw new FuelError24(ErrorCode22.HD_WALLET_ERROR, \"Provided key has an invalid checksum.\");\n    }\n    const depth = bytes[4];\n    const parentFingerprint = hexlify21(bytes.slice(5, 9));\n    const index = parseInt(hexlify21(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify21(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n    if (depth === 0 && parentFingerprint !== \"0x00000000\" || depth === 0 && index !== 0) {\n      throw new FuelError24(\n        ErrorCode22.HD_WALLET_ERROR,\n        \"Inconsistency detected: Depth is zero but fingerprint/index is non-zero.\"\n      );\n    }\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new FuelError24(ErrorCode22.HD_WALLET_ERROR, \"Invalid public extended key.\");\n      }\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint\n      });\n    }\n    if (key[0] !== 0) {\n      throw new FuelError24(ErrorCode22.HD_WALLET_ERROR, \"Invalid private extended key.\");\n    }\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint\n    });\n  }\n};\nvar hdwallet_default = HDWallet;\n\n// src/wallet/wallets.ts\nvar WalletLocked = class extends Account {\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey) {\n    return new WalletUnlocked(privateKey, this._provider);\n  }\n};\nvar WalletUnlocked = class extends BaseWalletUnlocked {\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock() {\n    this.signer = () => new Signer(\"0x00\");\n    return new WalletLocked(this.address, this._provider);\n  }\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions) {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed, path, provider) {\n    const hdWallet = hdwallet_default.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n    return new WalletUnlocked(childWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(mnemonic, path, passphrase, provider) {\n    const seed = mnemonic_default.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = hdwallet_default.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n    return new WalletUnlocked(childWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey, provider) {\n    const hdWallet = hdwallet_default.fromExtendedKey(extendedKey);\n    return new WalletUnlocked(hdWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static async fromEncryptedJson(jsonWallet, password, provider) {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n    return new WalletUnlocked(privateKey, provider);\n  }\n};\n\n// src/wallet/wallet.ts\nvar Wallet = class {\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(address, provider) {\n    return new WalletLocked(address, provider);\n  }\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey, provider) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n};\n/**\n * Generate a new Wallet Unlocked with a random key pair.\n *\n * @param generateOptions - Options to customize the generation process (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"generate\", WalletUnlocked.generate);\n/**\n * Create a Wallet Unlocked from a seed.\n *\n * @param seed - The seed phrase.\n * @param provider - A Provider instance (optional).\n * @param path - The derivation path (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"fromSeed\", WalletUnlocked.fromSeed);\n/**\n * Create a Wallet Unlocked from a mnemonic phrase.\n *\n * @param mnemonic - The mnemonic phrase.\n * @param provider - A Provider instance (optional).\n * @param path - The derivation path (optional).\n * @param passphrase - The passphrase for the mnemonic (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"fromMnemonic\", WalletUnlocked.fromMnemonic);\n/**\n * Create a Wallet Unlocked from an extended key.\n *\n * @param extendedKey - The extended key.\n * @param provider - A Provider instance (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"fromExtendedKey\", WalletUnlocked.fromExtendedKey);\n/**\n * Create a Wallet Unlocked from an encrypted JSON.\n *\n * @param jsonWallet - The encrypted JSON keystore.\n * @param password - The password to decrypt the JSON.\n * @param provider - A Provider instance (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"fromEncryptedJson\", WalletUnlocked.fromEncryptedJson);\n\n// src/wallet-manager/wallet-manager.ts\nimport { Address as Address9 } from \"@fuel-ts/address\";\nimport { encrypt, decrypt } from \"@fuel-ts/crypto\";\nimport { ErrorCode as ErrorCode25, FuelError as FuelError27 } from \"@fuel-ts/errors\";\nimport { EventEmitter } from \"events\";\n\n// src/wallet-manager/storages/memory-storage.ts\nvar MemoryStorage = class {\n  storage = /* @__PURE__ */ new Map();\n  async getItem(key) {\n    const item = await this.storage.get(key);\n    return item;\n  }\n  async setItem(key, value) {\n    await this.storage.set(key, value);\n  }\n  async removeItem(key) {\n    await this.storage.delete(key);\n  }\n  async clear() {\n    await this.storage.clear();\n  }\n};\n\n// src/wallet-manager/vaults/mnemonic-vault.ts\nimport { Address as Address7 } from \"@fuel-ts/address\";\nimport { ErrorCode as ErrorCode23, FuelError as FuelError25 } from \"@fuel-ts/errors\";\nvar _secret;\nvar MnemonicVault = class {\n  constructor(options) {\n    __privateAdd(this, _secret, void 0);\n    __publicField(this, \"pathKey\", \"{}\");\n    __publicField(this, \"rootPath\", `m/44'/1179993420'/${this.pathKey}'/0/0`);\n    __publicField(this, \"numberOfAccounts\", 0);\n    __privateSet(this, _secret, options.secret || mnemonic_default.generate());\n    this.rootPath = options.rootPath || this.rootPath;\n    this.numberOfAccounts = options.numberOfAccounts || 1;\n  }\n  getDerivePath(index) {\n    if (this.rootPath.includes(this.pathKey)) {\n      return this.rootPath.replace(this.pathKey, String(index));\n    }\n    return `${this.rootPath}/${index}`;\n  }\n  serialize() {\n    return {\n      secret: __privateGet(this, _secret),\n      rootPath: this.rootPath,\n      numberOfAccounts: this.numberOfAccounts\n    };\n  }\n  getAccounts() {\n    const accounts = [];\n    let numberOfAccounts = 0;\n    do {\n      const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(numberOfAccounts));\n      accounts.push({\n        publicKey: wallet.publicKey,\n        address: wallet.address\n      });\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n    return accounts;\n  }\n  addAccount() {\n    this.numberOfAccounts += 1;\n    const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(this.numberOfAccounts - 1));\n    return {\n      publicKey: wallet.publicKey,\n      address: wallet.address\n    };\n  }\n  exportAccount(address) {\n    let numberOfAccounts = 0;\n    const ownerAddress = new Address7(address);\n    do {\n      const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(numberOfAccounts));\n      if (wallet.address.equals(ownerAddress)) {\n        return wallet.privateKey;\n      }\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n    throw new FuelError25(\n      ErrorCode23.WALLET_MANAGER_ERROR,\n      `Account with address '${address}' not found in derived wallets.`\n    );\n  }\n  getWallet(address) {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n};\n_secret = new WeakMap();\n__publicField(MnemonicVault, \"type\", \"mnemonic\");\n\n// src/wallet-manager/vaults/privatekey-vault.ts\nimport { Address as Address8 } from \"@fuel-ts/address\";\nimport { ErrorCode as ErrorCode24, FuelError as FuelError26 } from \"@fuel-ts/errors\";\nvar _privateKeys;\nvar PrivateKeyVault = class {\n  /**\n   * If privateKey vault is initialized with a secretKey, it creates\n   * one account with the fallowing secret\n   */\n  constructor(options = {}) {\n    __privateAdd(this, _privateKeys, []);\n    if (options.secret) {\n      __privateSet(this, _privateKeys, [options.secret]);\n    } else {\n      __privateSet(this, _privateKeys, options.accounts || [Wallet.generate().privateKey]);\n    }\n  }\n  serialize() {\n    return {\n      accounts: __privateGet(this, _privateKeys)\n    };\n  }\n  getPublicAccount(privateKey) {\n    const wallet = Wallet.fromPrivateKey(privateKey);\n    return {\n      address: wallet.address,\n      publicKey: wallet.publicKey\n    };\n  }\n  getAccounts() {\n    return __privateGet(this, _privateKeys).map((pk) => this.getPublicAccount(pk));\n  }\n  addAccount() {\n    const wallet = Wallet.generate();\n    __privateGet(this, _privateKeys).push(wallet.privateKey);\n    return this.getPublicAccount(wallet.privateKey);\n  }\n  exportAccount(address) {\n    const ownerAddress = new Address8(address);\n    const privateKey = __privateGet(this, _privateKeys).find(\n      (pk) => Wallet.fromPrivateKey(pk).address.equals(ownerAddress)\n    );\n    if (!privateKey) {\n      throw new FuelError26(\n        ErrorCode24.WALLET_MANAGER_ERROR,\n        `No private key found for address '${address}'.`\n      );\n    }\n    return privateKey;\n  }\n  getWallet(address) {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n};\n_privateKeys = new WeakMap();\n__publicField(PrivateKeyVault, \"type\", \"privateKey\");\n\n// src/wallet-manager/wallet-manager.ts\nvar ERROR_MESSAGES = {\n  invalid_vault_type: \"The provided Vault type is invalid.\",\n  address_not_found: \"No private key found for address the specified wallet address.\",\n  vault_not_found: \"The specified vault was not found.\",\n  wallet_not_unlocked: \"The wallet is currently locked.\",\n  passphrase_not_match: \"The provided passphrase did not match the expected value.\"\n};\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new FuelError27(ErrorCode25.WALLET_MANAGER_ERROR, message);\n  }\n}\nvar _vaults, _passphrase, _isLocked, _serializeVaults, serializeVaults_fn, _deserializeVaults, deserializeVaults_fn;\nvar _WalletManager = class extends EventEmitter {\n  constructor(options) {\n    super();\n    /**\n     * Serialize all vaults to store\n     *\n     * `This is only accessible from inside the class`\n     */\n    __privateAdd(this, _serializeVaults);\n    /**\n     * Deserialize all vaults to state\n     *\n     * `This is only accessible from inside the class`\n     */\n    __privateAdd(this, _deserializeVaults);\n    /**\n     * Storage\n     *\n     * Persistent encrypted data. `The default storage works only on memory`.\n     */\n    __publicField(this, \"storage\", new MemoryStorage());\n    /* Key name passed to the storage */\n    __publicField(this, \"STORAGE_KEY\", \"WalletManager\");\n    // `This variables are only accessible from inside the class`\n    __privateAdd(this, _vaults, []);\n    __privateAdd(this, _passphrase, \"\");\n    __privateAdd(this, _isLocked, true);\n    this.storage = options?.storage || this.storage;\n  }\n  get isLocked() {\n    return __privateGet(this, _isLocked);\n  }\n  /**\n   * Return the vault serialized object containing all the privateKeys,\n   * the format of the return depends on the Vault type.\n   */\n  exportVault(vaultId) {\n    assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = __privateGet(this, _vaults).find((_, idx) => idx === vaultId);\n    assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    return vaultState.vault.serialize();\n  }\n  /**\n   * List all vaults on the Wallet Manager, this function not return secret's\n   */\n  getVaults() {\n    return __privateGet(this, _vaults).map((v, idx) => ({\n      title: v.title,\n      type: v.type,\n      vaultId: idx\n    }));\n  }\n  /**\n   * List all accounts on the Wallet Manager not vault information is revealed\n   */\n  getAccounts() {\n    return __privateGet(this, _vaults).flatMap(\n      (vaultState, vaultId) => vaultState.vault.getAccounts().map((account) => ({ ...account, vaultId }))\n    );\n  }\n  /**\n   * Create a Wallet instance for the specific account\n   */\n  getWallet(address) {\n    const ownerAddress = new Address9(address);\n    const vaultState = __privateGet(this, _vaults).find(\n      (vs) => vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n    return vaultState.vault.getWallet(ownerAddress);\n  }\n  /**\n   * Export specific account privateKey\n   */\n  exportPrivateKey(address) {\n    const ownerAddress = new Address9(address);\n    assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = __privateGet(this, _vaults).find(\n      (vs) => vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n    return vaultState.vault.exportAccount(ownerAddress);\n  }\n  /**\n   * Add account to a selected vault or on the first vault as default.\n   * If not vaults are adds it will return error\n   */\n  async addAccount(options) {\n    await this.loadState();\n    const vaultState = __privateGet(this, _vaults)[options?.vaultId || 0];\n    await assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    const account = vaultState.vault.addAccount();\n    await this.saveState();\n    return account;\n  }\n  /**\n   * Remove vault by index, by remove the vault you also remove all accounts\n   * created by the vault.\n   */\n  async removeVault(index) {\n    __privateGet(this, _vaults).splice(index, 1);\n    await this.saveState();\n  }\n  /**\n   * Add Vault, the `vaultConfig.type` will look for the Vaults supported if\n   * didn't found it will throw.\n   */\n  async addVault(vaultConfig) {\n    await this.loadState();\n    const Vault2 = this.getVaultClass(vaultConfig.type);\n    const vault = new Vault2(vaultConfig);\n    __privateSet(this, _vaults, __privateGet(this, _vaults).concat({\n      title: vaultConfig.title,\n      type: vaultConfig.type,\n      vault\n    }));\n    await this.saveState();\n  }\n  /**\n   * Lock wallet. It removes passphrase from class instance, encrypt and hide all address and\n   * secrets.\n   */\n  lock() {\n    __privateSet(this, _isLocked, true);\n    __privateSet(this, _vaults, []);\n    __privateSet(this, _passphrase, \"\");\n    this.emit(\"lock\");\n  }\n  /**\n   * Unlock wallet. It sets passphrase on WalletManger instance load all address from configured vaults.\n   * Vaults with secrets are not unlocked or instantiated on this moment.\n   */\n  async unlock(passphrase) {\n    __privateSet(this, _passphrase, passphrase);\n    __privateSet(this, _isLocked, false);\n    try {\n      await this.loadState();\n      this.emit(\"unlock\");\n    } catch (err) {\n      await this.lock();\n      throw err;\n    }\n  }\n  /**\n   * Update WalletManager encryption passphrase\n   */\n  async updatePassphrase(oldpass, newpass) {\n    const isLocked = __privateGet(this, _isLocked);\n    await this.unlock(oldpass);\n    __privateSet(this, _passphrase, newpass);\n    await this.saveState();\n    await this.loadState();\n    if (isLocked) {\n      await this.lock();\n    }\n  }\n  /**\n   * Retrieve and decrypt WalletManager state from storage\n   */\n  async loadState() {\n    await assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);\n    const data = await this.storage.getItem(this.STORAGE_KEY);\n    if (data) {\n      const state = await decrypt(__privateGet(this, _passphrase), JSON.parse(data));\n      __privateSet(this, _vaults, __privateMethod(this, _deserializeVaults, deserializeVaults_fn).call(this, state.vaults));\n    }\n  }\n  /**\n   * Store encrypted WalletManager state on storage\n   */\n  async saveState() {\n    await assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);\n    const encryptedData = await encrypt(__privateGet(this, _passphrase), {\n      vaults: __privateMethod(this, _serializeVaults, serializeVaults_fn).call(this, __privateGet(this, _vaults))\n    });\n    await this.storage.setItem(this.STORAGE_KEY, JSON.stringify(encryptedData));\n    this.emit(\"update\");\n  }\n  /**\n   * Return a instantiable Class reference from `WalletManager.Vaults` supported list.\n   */\n  getVaultClass(type) {\n    const VaultClass = _WalletManager.Vaults.find((v) => v.type === type);\n    assert(VaultClass, ERROR_MESSAGES.invalid_vault_type);\n    return VaultClass;\n  }\n};\nvar WalletManager = _WalletManager;\n_vaults = new WeakMap();\n_passphrase = new WeakMap();\n_isLocked = new WeakMap();\n_serializeVaults = new WeakSet();\nserializeVaults_fn = function(vaults) {\n  return vaults.map(({ title, type, vault }) => ({\n    title,\n    type,\n    data: vault.serialize()\n  }));\n};\n_deserializeVaults = new WeakSet();\ndeserializeVaults_fn = function(vaults) {\n  return vaults.map(({ title, type, data: vaultConfig }) => {\n    const VaultClass = this.getVaultClass(type);\n    return {\n      title,\n      type,\n      vault: new VaultClass(vaultConfig)\n    };\n  });\n};\n/**\n * Vaults\n *\n * Vaults are responsible to store secret keys and return an `Wallet` instance,\n * to interact with the network.\n *\n * Each vault has access to its own state\n *\n */\n__publicField(WalletManager, \"Vaults\", [MnemonicVault, PrivateKeyVault]);\n\n// src/wallet-manager/types.ts\nimport { ErrorCode as ErrorCode26, FuelError as FuelError28 } from \"@fuel-ts/errors\";\nvar Vault = class {\n  constructor(_options) {\n    throw new FuelError28(ErrorCode26.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  serialize() {\n    throw new FuelError28(ErrorCode26.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  getAccounts() {\n    throw new FuelError28(ErrorCode26.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  addAccount() {\n    throw new FuelError28(ErrorCode26.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  exportAccount(_address) {\n    throw new FuelError28(ErrorCode26.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  getWallet(_address) {\n    throw new FuelError28(ErrorCode26.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n};\n__publicField(Vault, \"type\");\nvar StorageAbstract = class {\n};\n\n// src/predicate/predicate.ts\nimport { Interface as Interface4 } from \"@fuel-ts/abi-coder\";\nimport { Address as Address10 } from \"@fuel-ts/address\";\nimport { ErrorCode as ErrorCode28, FuelError as FuelError30 } from \"@fuel-ts/errors\";\nimport { arrayify as arrayify22, hexlify as hexlify23 } from \"@fuel-ts/utils\";\n\n// src/utils/deployScriptOrPredicate.ts\nimport { FuelError as FuelError29, ErrorCode as ErrorCode27 } from \"@fuel-ts/errors\";\nimport { bn as bn21 } from \"@fuel-ts/math\";\nimport { arrayify as arrayify20 } from \"@fuel-ts/utils\";\n\n// src/utils/predicate-script-loader-instructions.ts\nimport { BigNumberCoder as BigNumberCoder3 } from \"@fuel-ts/abi-coder\";\nimport { sha256 as sha2565 } from \"@fuel-ts/hasher\";\nimport { concat as concat7 } from \"@fuel-ts/utils\";\nimport * as asm2 from \"@fuels/vm-asm\";\nvar BLOB_ID_SIZE = 32;\nvar REG_ADDRESS_OF_DATA_AFTER_CODE = 16;\nvar REG_START_OF_LOADED_CODE = 17;\nvar REG_GENERAL_USE = 18;\nvar WORD_SIZE2 = 8;\nvar DATA_OFFSET_INDEX = 8;\nvar CONFIGURABLE_OFFSET_INDEX = 16;\nfunction getBytecodeDataOffset(bytecode) {\n  const [offset] = new BigNumberCoder3(\"u64\").decode(bytecode, DATA_OFFSET_INDEX);\n  return offset.toNumber();\n}\nfunction getBytecodeConfigurableOffset(bytecode) {\n  const [offset] = new BigNumberCoder3(\"u64\").decode(bytecode, CONFIGURABLE_OFFSET_INDEX);\n  return offset.toNumber();\n}\nfunction getBytecodeId(bytecode) {\n  const configurableOffset = getBytecodeConfigurableOffset(bytecode);\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n  return sha2565(byteCodeWithoutConfigurableSection);\n}\nfunction getLegacyBlobId(bytecode) {\n  const dataOffset = getBytecodeDataOffset(bytecode);\n  const byteCodeWithoutDataSection = bytecode.slice(0, dataOffset);\n  return sha2565(byteCodeWithoutDataSection);\n}\nfunction getPredicateScriptLoaderInstructions(originalBinary, blobId) {\n  const { RegId, Instruction } = asm2;\n  const REG_PC = RegId.pc().to_u8();\n  const REG_SP = RegId.sp().to_u8();\n  const REG_IS = RegId.is().to_u8();\n  const getInstructions = (numOfInstructions2) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    asm2.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    asm2.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions2 * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    asm2.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    asm2.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    asm2.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Move on to the data section length\n    asm2.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, BLOB_ID_SIZE),\n    // load the size of the data section into REG_GENERAL_USE\n    asm2.lw(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE, 0),\n    // after we have read the length of the data section, we move the pointer to the actual\n    // data by skipping WORD_SIZE bytes.\n    asm2.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, WORD_SIZE2),\n    // load the data section of the executable\n    asm2.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 2),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    asm2.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    asm2.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    asm2.jmp(REG_START_OF_LOADED_CODE)\n  ];\n  const getInstructionsNoDataSection = (numOfInstructions2) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    asm2.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    asm2.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions2 * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    asm2.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    asm2.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    asm2.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    asm2.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    asm2.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    asm2.jmp(REG_START_OF_LOADED_CODE)\n  ];\n  const offset = getBytecodeConfigurableOffset(originalBinary);\n  if (originalBinary.length < offset) {\n    throw new Error(\n      `Data section offset is out of bounds, offset: ${offset}, binary length: ${originalBinary.length}`\n    );\n  }\n  const configurableSection = originalBinary.slice(offset);\n  if (configurableSection.length > 0) {\n    const numOfInstructions2 = getInstructions(0).length;\n    if (numOfInstructions2 > 65535) {\n      throw new Error(\"Too many instructions, exceeding u16::MAX.\");\n    }\n    const instructionBytes2 = new Uint8Array(\n      getInstructions(numOfInstructions2).flatMap(\n        (instruction) => Array.from(instruction.to_bytes())\n      )\n    );\n    const blobBytes2 = new Uint8Array(blobId);\n    const dataSectionLenBytes = new Uint8Array(8);\n    const dataView = new DataView(dataSectionLenBytes.buffer);\n    dataView.setBigUint64(0, BigInt(configurableSection.length), false);\n    const loaderBytecode2 = new Uint8Array([\n      ...instructionBytes2,\n      ...blobBytes2,\n      ...dataSectionLenBytes\n    ]);\n    return {\n      loaderBytecode: concat7([loaderBytecode2, configurableSection]),\n      blobOffset: loaderBytecode2.length\n    };\n  }\n  const numOfInstructions = getInstructionsNoDataSection(0).length;\n  if (numOfInstructions > 65535) {\n    throw new Error(\"Too many instructions, exceeding u16::MAX.\");\n  }\n  const instructionBytes = new Uint8Array(\n    getInstructionsNoDataSection(numOfInstructions).flatMap(\n      (instruction) => Array.from(instruction.to_bytes())\n    )\n  );\n  const blobBytes = new Uint8Array(blobId);\n  const loaderBytecode = new Uint8Array([...instructionBytes, ...blobBytes]);\n  return { loaderBytecode };\n}\n\n// src/utils/deployScriptOrPredicate.ts\nasync function fundBlobTx(deployer, blobTxRequest) {\n  let totalCost = bn21(0);\n  const chainInfo = await deployer.provider.getChain();\n  const gasPrice = await deployer.provider.estimateGasPrice(10);\n  const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;\n  const minGas = blobTxRequest.calculateMinGas(chainInfo);\n  const minFee = calculateGasFee({\n    gasPrice,\n    gas: minGas,\n    priceFactor,\n    tip: blobTxRequest.tip\n  }).add(1);\n  totalCost = totalCost.add(minFee);\n  if (totalCost.gt(await deployer.getBalance())) {\n    throw new FuelError29(ErrorCode27.FUNDS_TOO_LOW, \"Insufficient balance to deploy predicate.\");\n  }\n  const txCost = await deployer.getTransactionCost(blobTxRequest);\n  blobTxRequest.maxFee = txCost.maxFee;\n  return deployer.fund(blobTxRequest, txCost);\n}\nfunction adjustConfigurableOffsets(jsonAbi, configurableOffsetDiff) {\n  const { configurables: readOnlyConfigurables } = jsonAbi;\n  const configurables = [];\n  readOnlyConfigurables.forEach((config) => {\n    configurables.push({ ...config, offset: config.offset - configurableOffsetDiff });\n  });\n  return { ...jsonAbi, configurables };\n}\nasync function deployScriptOrPredicate({\n  deployer,\n  bytecode,\n  abi,\n  loaderInstanceCallback\n}) {\n  const blobId = getBytecodeId(arrayify20(bytecode));\n  const configurableOffset = getBytecodeConfigurableOffset(arrayify20(bytecode));\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n  const blobTxRequest = new BlobTransactionRequest({\n    blobId,\n    witnessIndex: 0,\n    witnesses: [byteCodeWithoutConfigurableSection]\n  });\n  const { loaderBytecode, blobOffset } = getPredicateScriptLoaderInstructions(\n    arrayify20(bytecode),\n    arrayify20(blobId)\n  );\n  const newConfigurableOffsetDiff = byteCodeWithoutConfigurableSection.length - (blobOffset || 0);\n  const newAbi = adjustConfigurableOffsets(abi, newConfigurableOffsetDiff);\n  const blobExists = (await deployer.provider.getBlobs([blobId])).length > 0;\n  const loaderInstance = loaderInstanceCallback(loaderBytecode, newAbi);\n  if (blobExists) {\n    return {\n      waitForResult: () => Promise.resolve(loaderInstance),\n      blobId\n    };\n  }\n  const fundedBlobRequest = await fundBlobTx(deployer, blobTxRequest);\n  const waitForResult = async () => {\n    try {\n      const blobTx = await deployer.sendTransaction(fundedBlobRequest);\n      const result = await blobTx.waitForResult();\n      if (result.status !== \"success\" /* success */) {\n        throw new Error();\n      }\n    } catch (err) {\n      throw new FuelError29(ErrorCode27.TRANSACTION_FAILED, \"Failed to deploy predicate chunk\");\n    }\n    return loaderInstance;\n  };\n  return {\n    waitForResult,\n    blobId\n  };\n}\n\n// src/predicate/utils/getPredicateRoot.ts\nimport { hash as hash3 } from \"@fuel-ts/hasher\";\nimport { calcRoot } from \"@fuel-ts/merkle\";\nimport { chunkAndPadBytes, hexlify as hexlify22, concat as concat8, arrayify as arrayify21 } from \"@fuel-ts/utils\";\nvar getPredicateRoot = (bytecode) => {\n  const chunkSize = 16 * 1024;\n  const bytes = arrayify21(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n  const codeRoot = calcRoot(chunks.map((c) => hexlify22(c)));\n  const predicateRoot = hash3(concat8([\"0x4655454C\", codeRoot]));\n  return predicateRoot;\n};\n\n// src/predicate/predicate.ts\nvar Predicate = class extends Account {\n  bytes;\n  predicateData = [];\n  interface;\n  initialBytecode;\n  configurableConstants;\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param bytecode - The bytecode of the predicate.\n   * @param abi - The JSON ABI of the predicate.\n   * @param provider - The provider used to interact with the blockchain.\n   * @param data - The predicate input data (optional).\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   */\n  constructor({\n    bytecode,\n    abi,\n    provider,\n    data,\n    configurableConstants\n  }) {\n    const { predicateBytes, predicateInterface } = Predicate.processPredicateData(\n      bytecode,\n      abi,\n      configurableConstants\n    );\n    const address = new Address10(getPredicateRoot(predicateBytes));\n    super(address, provider);\n    this.initialBytecode = arrayify22(bytecode);\n    this.bytes = predicateBytes;\n    this.interface = predicateInterface;\n    this.configurableConstants = configurableConstants;\n    if (data !== void 0 && data.length > 0) {\n      this.predicateData = data;\n    }\n  }\n  /**\n   * Populates the transaction data with predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns The transaction request with predicate data.\n   */\n  populateTransactionPredicateData(transactionRequestLike) {\n    const request2 = transactionRequestify(transactionRequestLike);\n    const placeholderIndex = this.getIndexFromPlaceholderWitness(request2);\n    if (placeholderIndex !== -1) {\n      request2.removeWitness(placeholderIndex);\n    }\n    request2.inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      if (isRequestInputResourceFromOwner(input, this.address)) {\n        input.predicate = hexlify23(this.bytes);\n        input.predicateData = hexlify23(this.getPredicateData());\n        input.witnessIndex = 0;\n      }\n    });\n    return request2;\n  }\n  /**\n   * Sends a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the transaction response.\n   */\n  sendTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.sendTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n  /**\n   * Simulates a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the call result.\n   */\n  simulateTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.simulateTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n  getPredicateData() {\n    if (!this.predicateData.length) {\n      return new Uint8Array();\n    }\n    const mainFn = this.interface?.functions.main;\n    return mainFn?.encodeArguments(this.predicateData) || new Uint8Array();\n  }\n  /**\n   * Creates a new Predicate instance from an existing Predicate instance.\n   * @param overrides - The data and configurable constants to override.\n   * @returns A new Predicate instance with the same bytecode, ABI and provider but with the ability to set the data and configurable constants.\n   */\n  toNewInstance(overrides = {}) {\n    return new Predicate({\n      bytecode: this.initialBytecode,\n      abi: this.interface.jsonAbi,\n      provider: this.provider,\n      data: overrides.data ?? this.predicateData,\n      configurableConstants: overrides.configurableConstants ?? this.configurableConstants\n    });\n  }\n  /**\n   * Processes the predicate data and returns the altered bytecode and interface.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   * @returns An object containing the new predicate bytes and interface.\n   */\n  static processPredicateData(bytes, jsonAbi, configurableConstants) {\n    let predicateBytes = arrayify22(bytes);\n    const abiInterface = new Interface4(jsonAbi);\n    if (abiInterface.functions.main === void 0) {\n      throw new FuelError30(\n        ErrorCode28.ABI_MAIN_METHOD_MISSING,\n        'Cannot use ABI without \"main\" function.'\n      );\n    }\n    if (configurableConstants && Object.keys(configurableConstants).length) {\n      predicateBytes = Predicate.setConfigurableConstants(\n        predicateBytes,\n        configurableConstants,\n        abiInterface\n      );\n    }\n    return {\n      predicateBytes,\n      predicateInterface: abiInterface\n    };\n  }\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - IDs of coins to exclude.\n   * @param excludedIds - IDs of resources to be excluded from the query.\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(quantities, excludedIds) {\n    const resources = await this.provider.getResourcesToSpend(\n      this.address,\n      quantities,\n      excludedIds\n    );\n    return resources.map((resource) => ({\n      ...resource,\n      predicate: hexlify23(this.bytes),\n      predicateData: hexlify23(this.getPredicateData())\n    }));\n  }\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins) {\n    return super.generateFakeResources(coins).map((coin) => ({\n      ...coin,\n      predicate: hexlify23(this.bytes),\n      predicateData: hexlify23(this.getPredicateData())\n    }));\n  }\n  /**\n   * Sets the configurable constants for the predicate.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param configurableConstants - Configurable constants to be set.\n   * @param abiInterface - The ABI interface of the predicate.\n   * @returns The mutated bytes with the configurable constants set.\n   */\n  static setConfigurableConstants(bytes, configurableConstants, abiInterface) {\n    const mutatedBytes = bytes;\n    try {\n      if (Object.keys(abiInterface.configurables).length === 0) {\n        throw new FuelError30(\n          ErrorCode28.INVALID_CONFIGURABLE_CONSTANTS,\n          \"Predicate has no configurable constants to be set\"\n        );\n      }\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!abiInterface?.configurables[key]) {\n          throw new FuelError30(\n            ErrorCode28.CONFIGURABLE_NOT_FOUND,\n            `No configurable constant named '${key}' found in the Predicate`\n          );\n        }\n        const { offset } = abiInterface.configurables[key];\n        const encoded = abiInterface.encodeConfigurable(key, value);\n        mutatedBytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new FuelError30(\n        ErrorCode28.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${err.message}.`\n      );\n    }\n    return mutatedBytes;\n  }\n  /**\n   * Returns the index of the witness placeholder that was added to this predicate.\n   * If no witness placeholder was added, it returns -1.\n   * @param request - The transaction request.\n   * @returns The index of the witness placeholder, or -1 if there is no witness placeholder.\n   */\n  getIndexFromPlaceholderWitness(request2) {\n    const predicateInputs = request2.inputs.filter(isRequestInputResource).filter((input) => isRequestInputResourceFromOwner(input, this.address));\n    let index = -1;\n    const hasEmptyPredicateInputs = predicateInputs.find((input) => !input.predicate);\n    if (hasEmptyPredicateInputs) {\n      index = hasEmptyPredicateInputs.witnessIndex;\n      const allInputsAreEmpty = predicateInputs.every((input) => !input.predicate);\n      if (!allInputsAreEmpty) {\n        const wasFilledInputAddedFirst = !!predicateInputs[0]?.predicate;\n        if (wasFilledInputAddedFirst) {\n          index = -1;\n        }\n      }\n    }\n    return index;\n  }\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader predicate will have the same configurable constants\n   * as the original predicate which was used to generate the loader predicate.\n   */\n  async deploy(account) {\n    return deployScriptOrPredicate({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: (loaderBytecode, newAbi) => new Predicate({\n        bytecode: loaderBytecode,\n        abi: newAbi,\n        provider: this.provider,\n        data: this.predicateData\n      })\n    });\n  }\n};\n\n// src/connectors/fuel.ts\nimport { ErrorCode as ErrorCode29, FuelError as FuelError33 } from \"@fuel-ts/errors\";\n\n// src/connectors/fuel-connector.ts\nimport { FuelError as FuelError31 } from \"@fuel-ts/errors\";\nimport { EventEmitter as EventEmitter2 } from \"events\";\n\n// src/connectors/types/connector-types.ts\nvar FuelConnectorMethods = /* @__PURE__ */ ((FuelConnectorMethods2) => {\n  FuelConnectorMethods2[\"ping\"] = \"ping\";\n  FuelConnectorMethods2[\"version\"] = \"version\";\n  FuelConnectorMethods2[\"connect\"] = \"connect\";\n  FuelConnectorMethods2[\"disconnect\"] = \"disconnect\";\n  FuelConnectorMethods2[\"isConnected\"] = \"isConnected\";\n  FuelConnectorMethods2[\"accounts\"] = \"accounts\";\n  FuelConnectorMethods2[\"currentAccount\"] = \"currentAccount\";\n  FuelConnectorMethods2[\"signMessage\"] = \"signMessage\";\n  FuelConnectorMethods2[\"sendTransaction\"] = \"sendTransaction\";\n  FuelConnectorMethods2[\"assets\"] = \"assets\";\n  FuelConnectorMethods2[\"addAsset\"] = \"addAsset\";\n  FuelConnectorMethods2[\"addAssets\"] = \"addAssets\";\n  FuelConnectorMethods2[\"networks\"] = \"networks\";\n  FuelConnectorMethods2[\"currentNetwork\"] = \"currentNetwork\";\n  FuelConnectorMethods2[\"addNetwork\"] = \"addNetwork\";\n  FuelConnectorMethods2[\"selectNetwork\"] = \"selectNetwork\";\n  FuelConnectorMethods2[\"addABI\"] = \"addABI\";\n  FuelConnectorMethods2[\"getABI\"] = \"getABI\";\n  FuelConnectorMethods2[\"hasABI\"] = \"hasABI\";\n  return FuelConnectorMethods2;\n})(FuelConnectorMethods || {});\nvar FuelConnectorEventTypes = /* @__PURE__ */ ((FuelConnectorEventTypes2) => {\n  FuelConnectorEventTypes2[\"connectors\"] = \"connectors\";\n  FuelConnectorEventTypes2[\"currentConnector\"] = \"currentConnector\";\n  FuelConnectorEventTypes2[\"connection\"] = \"connection\";\n  FuelConnectorEventTypes2[\"accounts\"] = \"accounts\";\n  FuelConnectorEventTypes2[\"currentAccount\"] = \"currentAccount\";\n  FuelConnectorEventTypes2[\"networks\"] = \"networks\";\n  FuelConnectorEventTypes2[\"currentNetwork\"] = \"currentNetwork\";\n  FuelConnectorEventTypes2[\"assets\"] = \"assets\";\n  FuelConnectorEventTypes2[\"abis\"] = \"abis\";\n  return FuelConnectorEventTypes2;\n})(FuelConnectorEventTypes || {});\nvar FuelConnectorEventType = \"FuelConnector\";\n\n// src/connectors/types/local-storage.ts\nvar LocalStorage = class {\n  storage;\n  constructor(localStorage) {\n    this.storage = localStorage;\n  }\n  async setItem(key, value) {\n    this.storage.setItem(key, value);\n  }\n  async getItem(key) {\n    return this.storage.getItem(key);\n  }\n  async removeItem(key) {\n    this.storage.removeItem(key);\n  }\n  async clear() {\n    this.storage.clear();\n  }\n};\n\n// src/connectors/fuel-connector.ts\nvar FuelConnector = class extends EventEmitter2 {\n  name = \"\";\n  metadata = {};\n  connected = false;\n  installed = false;\n  external = true;\n  events = FuelConnectorEventTypes;\n  /**\n   * Should return true if the connector is loaded\n   * in less then one second.\n   *\n   * @returns Always true.\n   */\n  async ping() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current version of the connector\n   * and the network version that is compatible.\n   *\n   * @returns boolean - connection status.\n   */\n  async version() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return true if the connector is connected\n   * to any of the accounts available.\n   *\n   * @returns The connection status.\n   */\n  async isConnected() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the accounts authorized for the\n   * current connection.\n   *\n   * @returns The accounts addresses strings\n   */\n  async accounts() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the connection process and return\n   * true if the account authorize the connection.\n   *\n   * and return false if the user reject the connection.\n   *\n   * @emits accounts\n   * @returns boolean - connection status.\n   */\n  async connect() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should disconnect the current connection and\n   * return false if the disconnection was successful.\n   *\n   * @emits assets connection\n   * @returns The connection status.\n   */\n  async disconnect() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the sign message process and return\n   * the signed message.\n   *\n   * @param address - The address to sign the message\n   * @param message - The message to sign all text will be treated as text utf-8\n   *\n   * @returns Message signature\n   */\n  async signMessage(_address, _message) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the sign transaction process and return\n   * the signed transaction.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to sign\n   *\n   * @returns Transaction signature\n   */\n  async signTransaction(_address, _transaction) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the send transaction process and return\n   * the transaction id submitted to the network.\n   *\n   * If the network is not available for the connection\n   * it should throw an error to avoid the transaction\n   * to be sent to the wrong network and lost.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to send\n   * @param params - Optional parameters to send the transaction\n   * @returns The transaction id\n   */\n  async sendTransaction(_address, _transaction, _params) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current account selected inside the connector, if the account\n   * is authorized for the connection.\n   *\n   * If the account is not authorized it should return null.\n   *\n   * @returns The current account selected otherwise null.\n   */\n  async currentAccount() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the assets metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param assets - The assets to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAssets(_assets) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the asset metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param asset - The asset to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAsset(_asset) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the assets added to the connector. If a connection is already established.\n   *\n   * @returns Array of assets metadata from the connector vinculated to the all accounts from a specific Wallet.\n   */\n  async assets() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the add network process and return true if the network was added successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param networkUrl - The URL of the network to be added.\n   * @returns Return true if the network was added successfully\n   */\n  async addNetwork(_networkUrl) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the select network process and return true if the network has change successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param network - The network to be selected.\n   * @returns Return true if the network was added successfully\n   */\n  async selectNetwork(_network) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the networks available from the connector. If the connection is already established.\n   *\n   * @returns Return all the networks added to the connector.\n   */\n  async networks() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current network selected inside the connector. Even if the connection is not established.\n   *\n   * @returns Return the current network selected inside the connector.\n   */\n  async currentNetwork() {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the ABI to the connector and return true if the ABI was added successfully.\n   *\n   * @param contractId - The contract id to add the ABI.\n   * @param abi - The JSON ABI that represents a contract.\n   * @returns Return true if the ABI was added successfully.\n   */\n  async addABI(_contractId, _abi) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the ABI from the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the ABI.\n   * @returns The ABI if it exists, otherwise return null.\n   */\n  async getABI(_id) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return true if the abi exists in the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the abi\n   * @returns Returns true if the abi exists or false if not.\n   */\n  async hasABI(_id) {\n    throw new FuelError31(FuelError31.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Event listener for the connector.\n   *\n   * @param eventName - The event name to listen\n   * @param listener - The listener function\n   */\n  on(eventName, listener) {\n    super.on(eventName, listener);\n    return this;\n  }\n};\n\n// src/connectors/utils/cache.ts\nfunction cacheFor(fn, { cache: cache2, cacheTime, key }) {\n  return async (...args) => {\n    if (cache2[key] && cache2[key]?.value) {\n      return cache2[key]?.value;\n    }\n    clearTimeout(cache2[key]?.timeout);\n    const result = await fn(...args);\n    cache2[key] = {\n      timeout: Number(\n        setTimeout(() => {\n          cache2[key] = null;\n        }, cacheTime)\n      ),\n      value: result\n    };\n    return result;\n  };\n}\n\n// src/connectors/utils/dispatch-fuel-connector-event.ts\nfunction dispatchFuelConnectorEvent(connector) {\n  window.dispatchEvent(\n    new CustomEvent(FuelConnectorEventType, {\n      detail: connector\n    })\n  );\n}\n\n// src/connectors/utils/promises.ts\nimport { FuelError as FuelError32 } from \"@fuel-ts/errors\";\nfunction deferPromise() {\n  const defer = {};\n  defer.promise = new Promise((resolve, reject) => {\n    defer.reject = reject;\n    defer.resolve = resolve;\n  });\n  return defer;\n}\nasync function withTimeout(promise, timeout = 1050) {\n  const timeoutPromise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new FuelError32(FuelError32.CODES.TIMEOUT_EXCEEDED, \"Promise timed out\"));\n    }, timeout);\n  });\n  return Promise.race([timeoutPromise, promise]);\n}\n\n// src/connectors/fuel.ts\nvar HAS_CONNECTOR_TIMEOUT = 2e3;\nvar PING_CACHE_TIME = 5e3;\nvar { warn } = console;\nvar _Fuel = class extends FuelConnector {\n  _storage = null;\n  _connectors = [];\n  _targetObject = null;\n  _unsubscribes = [];\n  _targetUnsubscribe = () => {\n  };\n  _pingCache = {};\n  _currentConnector;\n  _initializationPromise = null;\n  constructor(config = _Fuel.defaultConfig) {\n    super();\n    this.setMaxListeners(1e3);\n    this._connectors = config.connectors ?? [];\n    this._targetObject = this.getTargetObject(config.targetObject);\n    this._storage = config.storage === void 0 ? this.getStorage() : config.storage;\n    this.setupMethods();\n    this._initializationPromise = this.initialize();\n  }\n  async initialize() {\n    try {\n      const connectResponse = this.setDefaultConnector();\n      this._targetUnsubscribe = this.setupConnectorListener();\n      await connectResponse;\n    } catch (error) {\n      throw new FuelError33(ErrorCode29.INVALID_PROVIDER, \"Error initializing Fuel Connector\");\n    }\n  }\n  async init() {\n    await this._initializationPromise;\n    return this;\n  }\n  /**\n   * Return the target object to listen for global events.\n   */\n  getTargetObject(targetObject) {\n    if (targetObject) {\n      return targetObject;\n    }\n    if (typeof window !== \"undefined\") {\n      return window;\n    }\n    if (typeof document !== \"undefined\") {\n      return document;\n    }\n    return null;\n  }\n  /**\n   * Return the storage used.\n   */\n  getStorage() {\n    if (typeof window !== \"undefined\") {\n      return new LocalStorage(window.localStorage);\n    }\n    return void 0;\n  }\n  /**\n   * Setup the default connector from the storage.\n   */\n  async setDefaultConnector() {\n    const connectorName = await this._storage?.getItem(_Fuel.STORAGE_KEY) || this._connectors[0]?.name;\n    if (connectorName) {\n      return this.selectConnector(connectorName, {\n        emitEvents: false\n      });\n    }\n    return void 0;\n  }\n  /**\n   * Start listener for all the events of the current\n   * connector and emit them to the Fuel instance\n   */\n  setupConnectorEvents(events) {\n    if (!this._currentConnector) {\n      return;\n    }\n    const currentConnector = this._currentConnector;\n    this._unsubscribes.map((unSub) => unSub());\n    this._unsubscribes = events.map((event) => {\n      const handler = (...args) => this.emit(event, ...args);\n      currentConnector.on(event, handler);\n      return () => currentConnector.off(event, handler);\n    });\n  }\n  /**\n   * Call method from the current connector.\n   */\n  async callMethod(method, ...args) {\n    const hasConnector = await this.hasConnector();\n    await this.pingConnector();\n    if (!this._currentConnector || !hasConnector) {\n      throw new FuelError33(\n        ErrorCode29.MISSING_CONNECTOR,\n        `No connector selected for calling ${method}. Use hasConnector before executing other methods.`\n      );\n    }\n    if (typeof this._currentConnector[method] === \"function\") {\n      return this._currentConnector[method](...args);\n    }\n    return void 0;\n  }\n  /**\n   * Create a method for each method proxy that is available on the Common interface\n   * and call the method from the current connector.\n   */\n  setupMethods() {\n    Object.values(FuelConnectorMethods).forEach((method) => {\n      this[method] = async (...args) => this.callMethod(method, ...args);\n    });\n  }\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status.\n   */\n  async fetchConnectorStatus(connector) {\n    const requestTimestamp = Date.now();\n    const [isConnected, ping] = await Promise.allSettled([\n      withTimeout(connector.isConnected()),\n      withTimeout(this.pingConnector(connector))\n    ]);\n    const isStale = requestTimestamp < (connector._latestUpdate || 0);\n    if (!isStale) {\n      connector._latestUpdate = Date.now();\n      connector.installed = ping.status === \"fulfilled\" && ping.value;\n      connector.connected = isConnected.status === \"fulfilled\" && isConnected.value;\n    }\n    return {\n      installed: connector.installed,\n      connected: connector.connected\n    };\n  }\n  /**\n   * Fetch the status of all connectors and set the installed and connected\n   * status.\n   */\n  async fetchConnectorsStatus() {\n    return Promise.all(\n      this._connectors.map(async (connector) => this.fetchConnectorStatus(connector))\n    );\n  }\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status. If no connector is provided it will ping the current connector.\n   */\n  async pingConnector(connector) {\n    const curConnector = connector || this._currentConnector;\n    if (!curConnector) {\n      return false;\n    }\n    try {\n      return await cacheFor(async () => withTimeout(curConnector.ping()), {\n        key: curConnector.name,\n        cache: this._pingCache,\n        cacheTime: PING_CACHE_TIME\n      })();\n    } catch {\n      throw new FuelError33(ErrorCode29.INVALID_PROVIDER, \"Current connector is not available.\");\n    }\n  }\n  /**\n   * Setup a listener for the FuelConnector event and add the connector\n   * to the list of new connectors.\n   */\n  setupConnectorListener = () => {\n    const { _targetObject: targetObject } = this;\n    const eventName = FuelConnectorEventType;\n    if (targetObject?.on) {\n      targetObject.on(eventName, this.addConnector);\n      return () => {\n        targetObject.off?.(eventName, this.addConnector);\n      };\n    }\n    if (targetObject?.addEventListener) {\n      const handler = (e) => {\n        this.addConnector(e.detail);\n      };\n      targetObject.addEventListener(eventName, handler);\n      return () => {\n        targetObject.removeEventListener?.(eventName, handler);\n      };\n    }\n    return () => {\n    };\n  };\n  /**\n   * Add a new connector to the list of connectors.\n   */\n  addConnector = async (connector) => {\n    if (!this.getConnector(connector)) {\n      this._connectors.push(connector);\n    }\n    await this.fetchConnectorStatus(connector);\n    this.emit(this.events.connectors, this._connectors);\n    if (!this._currentConnector) {\n      await this.selectConnector(connector.name, {\n        emitEvents: false\n      });\n    }\n  };\n  triggerConnectorEvents = async () => {\n    const [isConnected, networks2, currentNetwork] = await Promise.all([\n      this.isConnected(),\n      this.networks(),\n      this.currentNetwork()\n    ]);\n    this.emit(this.events.connection, isConnected);\n    this.emit(this.events.networks, networks2);\n    this.emit(this.events.currentNetwork, currentNetwork);\n    if (isConnected) {\n      const [accounts, currentAccount] = await Promise.all([\n        this.accounts(),\n        this.currentAccount()\n      ]);\n      this.emit(this.events.accounts, accounts);\n      this.emit(this.events.currentAccount, currentAccount);\n    }\n  };\n  /**\n   * Get a connector from the list of connectors.\n   */\n  getConnector = (connector) => this._connectors.find((c) => {\n    const connectorName = typeof connector === \"string\" ? connector : connector.name;\n    return c.name === connectorName || c === connector;\n  }) || null;\n  /**\n   * Return the list of connectors with the status of installed and connected.\n   */\n  async connectors() {\n    await this.fetchConnectorsStatus();\n    return this._connectors;\n  }\n  /**\n   * Set the current connector to be used.\n   */\n  async selectConnector(connectorName, options = {\n    emitEvents: true\n  }) {\n    const connector = this.getConnector(connectorName);\n    if (!connector) {\n      return false;\n    }\n    if (this._currentConnector?.name === connectorName) {\n      return true;\n    }\n    const { installed } = await this.fetchConnectorStatus(connector);\n    if (installed) {\n      this._currentConnector = connector;\n      this.emit(this.events.currentConnector, connector);\n      this.setupConnectorEvents(Object.values(FuelConnectorEventTypes));\n      await this._storage?.setItem(_Fuel.STORAGE_KEY, connector.name);\n      if (options.emitEvents) {\n        this.triggerConnectorEvents();\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Return the current selected connector.\n   */\n  currentConnector() {\n    return this._currentConnector;\n  }\n  /**\n   * Return true if any connector is available.\n   */\n  async hasConnector() {\n    if (this._currentConnector) {\n      return true;\n    }\n    const defer = deferPromise();\n    this.once(this.events.currentConnector, () => {\n      defer.resolve(true);\n    });\n    return withTimeout(defer.promise, HAS_CONNECTOR_TIMEOUT).then(() => true).catch(() => false);\n  }\n  async hasWallet() {\n    return this.hasConnector();\n  }\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   *\n   * @deprecated getProvider is deprecated and is going to be removed in the future, use getWallet instead.\n   */\n  async getProvider(providerOrNetwork) {\n    warn(\n      \"getProvider is deprecated and is going to be removed in the future, use getWallet instead.\"\n    );\n    return this._getProvider(providerOrNetwork);\n  }\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   */\n  async _getProvider(providerOrNetwork) {\n    let provider;\n    if (providerOrNetwork && \"getTransactionResponse\" in providerOrNetwork) {\n      provider = providerOrNetwork;\n    } else if (providerOrNetwork && \"chainId\" in providerOrNetwork && \"url\" in providerOrNetwork) {\n      provider = new Provider(providerOrNetwork.url);\n    } else if (!providerOrNetwork) {\n      const currentNetwork = await this.currentNetwork();\n      provider = new Provider(currentNetwork.url);\n    } else {\n      throw new FuelError33(ErrorCode29.INVALID_PROVIDER, \"Provider is not valid.\");\n    }\n    return provider;\n  }\n  /**\n   * Return a Fuel Wallet Locked instance with extends features to work with\n   * connectors.\n   */\n  async getWallet(address, providerOrNetwork) {\n    const provider = await this._getProvider(providerOrNetwork);\n    return new Account(address, provider, this);\n  }\n  /**\n   * Remove all open listeners this is useful when you want to\n   * remove the Fuel instance and avoid memory leaks.\n   */\n  unsubscribe() {\n    this._unsubscribes.map((unSub) => unSub());\n    this._targetUnsubscribe();\n    this.removeAllListeners();\n  }\n  /**\n   * Clean all the data from the storage.\n   */\n  async clean() {\n    await this._storage?.removeItem(_Fuel.STORAGE_KEY);\n  }\n  /**\n   * Removes all listeners and cleans the storage.\n   */\n  async destroy() {\n    this.unsubscribe();\n    await this.clean();\n  }\n};\nvar Fuel = _Fuel;\n__publicField(Fuel, \"STORAGE_KEY\", \"fuel-current-connector\");\n__publicField(Fuel, \"defaultConfig\", {});\nexport {\n  AbstractAccount,\n  AbstractScriptRequest,\n  Account,\n  AddressType,\n  BLOCKS_PAGE_SIZE_LIMIT,\n  BaseTransactionRequest,\n  BaseWalletUnlocked,\n  BlobTransactionRequest,\n  CHAIN_IDS,\n  ChainName,\n  ChangeOutputCollisionError,\n  CreateTransactionRequest,\n  DEFAULT_RESOURCE_CACHE_TTL,\n  Fuel,\n  FuelConnector,\n  FuelConnectorEventType,\n  FuelConnectorEventTypes,\n  FuelConnectorMethods,\n  GAS_USED_MODIFIER,\n  hdwallet_default as HDWallet,\n  Language,\n  LocalStorage,\n  MNEMONIC_SIZES,\n  MemoryStorage,\n  mnemonic_default as Mnemonic,\n  MnemonicVault,\n  NoWitnessAtIndexError,\n  NoWitnessByOwnerError,\n  OperationName,\n  Predicate,\n  PrivateKeyVault,\n  Provider,\n  RESOURCES_PAGE_SIZE_LIMIT,\n  ScriptTransactionRequest,\n  Signer,\n  StorageAbstract,\n  TRANSACTIONS_PAGE_SIZE_LIMIT,\n  TransactionResponse,\n  TransactionStatus,\n  TransactionType,\n  TransactionTypeName,\n  UpgradeTransactionRequest,\n  UploadTransactionRequest,\n  Vault,\n  Wallet,\n  WalletLocked,\n  WalletManager,\n  WalletUnlocked,\n  addAmountToCoinQuantities,\n  addOperation,\n  aggregateInputsAmountsByAssetAndOwner,\n  assemblePanicError,\n  assembleReceiptByType,\n  assembleRevertError,\n  assembleTransactionSummary,\n  assets,\n  buildBlockExplorerUrl,\n  cacheFor,\n  cacheRequestInputsResources,\n  cacheRequestInputsResourcesFromOwner,\n  calculateGasFee,\n  calculateMetadataGasForTxBlob,\n  calculateMetadataGasForTxCreate,\n  calculateMetadataGasForTxScript,\n  calculateMetadataGasForTxUpgrade,\n  calculateMetadataGasForTxUpload,\n  calculateMinGasForTxUpload,\n  calculateTXFeeForSummary,\n  coinQuantityfy,\n  deferPromise,\n  deployScriptOrPredicate,\n  dispatchFuelConnectorEvent,\n  english,\n  extractBurnedAssetsFromReceipts,\n  extractMintedAssetsFromReceipts,\n  extractTxError,\n  fuelAssetsBaseUrl,\n  gasUsedByInputs,\n  getAssetAmountInRequestInputs,\n  getAssetById,\n  getAssetEth,\n  getAssetFuel,\n  getAssetNetwork,\n  getAssetWithNetwork,\n  getAssetsByOwner,\n  getBurnableAssetCount,\n  getBytecodeConfigurableOffset,\n  getBytecodeDataOffset,\n  getBytecodeId,\n  getContractCallOperations,\n  getContractCreatedOperations,\n  getDecodedLogs,\n  getDefaultChainId,\n  getGasUsedFromReceipts,\n  getInputAccountAddress,\n  getInputContractFromIndex,\n  getInputFromAssetId,\n  getInputsByType,\n  getInputsByTypes,\n  getInputsCoin,\n  getInputsCoinAndMessage,\n  getInputsContract,\n  getInputsMessage,\n  getLegacyBlobId,\n  getMaxGas,\n  getMinGas,\n  getOperations,\n  getOutputsByType,\n  getOutputsChange,\n  getOutputsCoin,\n  getOutputsContract,\n  getOutputsContractCreated,\n  getOutputsVariable,\n  getPayProducerOperations,\n  getPredicateRoot,\n  getReceiptsByType,\n  getReceiptsCall,\n  getReceiptsMessageOut,\n  getReceiptsTransferOut,\n  getReceiptsWithMissingData,\n  getRequestInputResourceOwner,\n  getTotalFeeFromStatus,\n  getTransactionStatusName,\n  getTransactionSummary,\n  getTransactionSummaryFromRequest,\n  getTransactionTypeName,\n  getTransactionsSummaries,\n  getTransferOperations,\n  getWithdrawFromFuelOperations,\n  hasSameAssetId,\n  inputify,\n  isCoin,\n  isInputCoin,\n  isMessage,\n  isMessageCoin,\n  isRawCoin,\n  isRawMessage,\n  isRequestInputCoin,\n  isRequestInputCoinOrMessage,\n  isRequestInputMessage,\n  isRequestInputMessageWithoutData,\n  isRequestInputResource,\n  isRequestInputResourceFromOwner,\n  isTransactionTypeBlob,\n  isTransactionTypeCreate,\n  isTransactionTypeScript,\n  isTransactionTypeUpgrade,\n  isTransactionTypeUpload,\n  isType,\n  isTypeBlob,\n  isTypeCreate,\n  isTypeMint,\n  isTypeScript,\n  isTypeUpgrade,\n  isTypeUpload,\n  normalizeJSON,\n  outputify,\n  processGqlReceipt,\n  processGraphqlStatus,\n  rawAssets,\n  resolveGasDependentCosts,\n  resolveIconPaths,\n  returnZeroScript,\n  transactionRequestify,\n  urlJoin,\n  validateTransactionForAssetBurn,\n  withTimeout,\n  withdrawScript\n};\n//# sourceMappingURL=index.mjs.map","// src/types.ts\nvar AbstractProgram = class {\n};\nvar AbstractContract = class extends AbstractProgram {\n};\n\n// src/utils.ts\nimport { getDecodedLogs } from \"@fuel-ts/account\";\nimport { ErrorCode, FuelError } from \"@fuel-ts/errors\";\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new FuelError(ErrorCode.TRANSACTION_ERROR, message);\n  }\n}\nfunction getAbisFromAllCalls(functionScopes) {\n  return functionScopes.reduce((acc, funcScope, i) => {\n    const { program, externalAbis } = funcScope.getCallConfig();\n    if (i === 0) {\n      acc.main = program.interface.jsonAbi;\n      acc.otherContractsAbis = {};\n    } else {\n      acc.otherContractsAbis[program.id.toB256()] = program.interface.jsonAbi;\n    }\n    acc.otherContractsAbis = { ...acc.otherContractsAbis, ...externalAbis };\n    return acc;\n  }, {});\n}\nvar getResultLogs = (receipts, mainCallConfig, functionScopes) => {\n  if (!mainCallConfig) {\n    return [];\n  }\n  const { main, otherContractsAbis } = getAbisFromAllCalls(functionScopes);\n  return getDecodedLogs(receipts, main, otherContractsAbis);\n};\n\n// src/functions/invocation-scope.ts\nimport { coinQuantityfy } from \"@fuel-ts/account\";\nimport { ErrorCode as ErrorCode5, FuelError as FuelError5 } from \"@fuel-ts/errors\";\n\n// src/functions/base-invocation-scope.ts\nimport { ScriptTransactionRequest, Wallet } from \"@fuel-ts/account\";\nimport { Address } from \"@fuel-ts/address\";\nimport { ErrorCode as ErrorCode4, FuelError as FuelError4 } from \"@fuel-ts/errors\";\nimport { bn as bn2 } from \"@fuel-ts/math\";\nimport { InputType, TransactionType } from \"@fuel-ts/transactions\";\nimport { isDefined } from \"@fuel-ts/utils\";\nimport * as asm2 from \"@fuels/vm-asm\";\nimport { clone } from \"ramda\";\n\n// src/contract-call-script.ts\nimport {\n  WORD_SIZE as WORD_SIZE2,\n  B256Coder,\n  ASSET_ID_LEN as ASSET_ID_LEN2,\n  BigNumberCoder,\n  CONTRACT_ID_LEN as CONTRACT_ID_LEN2\n} from \"@fuel-ts/abi-coder\";\nimport { ZeroBytes32 } from \"@fuel-ts/address/configs\";\nimport { ErrorCode as ErrorCode3, FuelError as FuelError3 } from \"@fuel-ts/errors\";\nimport { bn, toNumber } from \"@fuel-ts/math\";\nimport { ReceiptType as ReceiptType2 } from \"@fuel-ts/transactions\";\nimport { concat as concat2, arrayify as arrayify2 } from \"@fuel-ts/utils\";\nimport * as asm from \"@fuels/vm-asm\";\n\n// src/instruction-set.ts\nimport { concat, hexlify } from \"@fuel-ts/utils\";\nvar InstructionSet = class {\n  #operations;\n  constructor(...args) {\n    this.#operations = args || [];\n  }\n  entries() {\n    return this.#operations;\n  }\n  push(...args) {\n    this.#operations.push(...args);\n  }\n  concat(ops) {\n    return this.#operations.concat(ops);\n  }\n  extend(ops) {\n    this.#operations.push(...ops);\n  }\n  toBytes() {\n    return concat(\n      this.#operations.reduce((instructions, line) => {\n        instructions.push(line.to_bytes());\n        return instructions;\n      }, [])\n    );\n  }\n  toHex() {\n    return hexlify(this.toBytes());\n  }\n  toString() {\n    return `Program:\n${JSON.stringify(this.#operations, null, 2)}`;\n  }\n  byteLength() {\n    return this.toBytes().byteLength;\n  }\n};\n\n// src/script-request.ts\nimport {\n  ASSET_ID_LEN,\n  CONTRACT_ID_LEN,\n  SCRIPT_FIXED_SIZE,\n  WORD_SIZE,\n  calculateVmTxMemory\n} from \"@fuel-ts/abi-coder\";\nimport { extractTxError } from \"@fuel-ts/account\";\nimport { ErrorCode as ErrorCode2, FuelError as FuelError2 } from \"@fuel-ts/errors\";\nimport { ReceiptType } from \"@fuel-ts/transactions\";\nimport { arrayify } from \"@fuel-ts/utils\";\nvar calculateScriptDataBaseOffset = (maxInputs) => SCRIPT_FIXED_SIZE + calculateVmTxMemory({ maxInputs });\nvar POINTER_DATA_OFFSET = WORD_SIZE + ASSET_ID_LEN + CONTRACT_ID_LEN + WORD_SIZE + WORD_SIZE;\nfunction callResultToScriptResult(callResult) {\n  const receipts = [...callResult.receipts];\n  let scriptResultReceipt;\n  let returnReceipt;\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.ScriptResult) {\n      scriptResultReceipt = receipt;\n    } else if (receipt.type === ReceiptType.Return || receipt.type === ReceiptType.ReturnData || receipt.type === ReceiptType.Revert) {\n      returnReceipt = receipt;\n    }\n  });\n  if (!scriptResultReceipt || !returnReceipt) {\n    throw new FuelError2(ErrorCode2.SCRIPT_REVERTED, `Transaction reverted.`);\n  }\n  const scriptResult = {\n    code: scriptResultReceipt.result,\n    gasUsed: scriptResultReceipt.gasUsed,\n    receipts,\n    scriptResultReceipt,\n    returnReceipt,\n    callResult\n  };\n  return scriptResult;\n}\nfunction decodeCallResult(callResult, decoder, logs = []) {\n  try {\n    const scriptResult = callResultToScriptResult(callResult);\n    return decoder(scriptResult);\n  } catch (error) {\n    if (error.code === ErrorCode2.SCRIPT_REVERTED) {\n      const statusReason = callResult?.dryRunStatus?.reason;\n      throw extractTxError({\n        logs,\n        receipts: callResult.receipts,\n        statusReason\n      });\n    }\n    throw error;\n  }\n}\nfunction callResultToInvocationResult(callResult, call2, logs) {\n  return decodeCallResult(\n    callResult,\n    (scriptResult) => {\n      if (scriptResult.returnReceipt.type === ReceiptType.Revert) {\n        throw new FuelError2(\n          ErrorCode2.SCRIPT_REVERTED,\n          `Script Reverted. Logs: ${JSON.stringify(logs)}`\n        );\n      }\n      if (scriptResult.returnReceipt.type !== ReceiptType.Return && scriptResult.returnReceipt.type !== ReceiptType.ReturnData) {\n        const { type } = scriptResult.returnReceipt;\n        throw new FuelError2(\n          ErrorCode2.SCRIPT_REVERTED,\n          `Script Return Type [${type}] Invalid. Logs: ${JSON.stringify({\n            logs,\n            receipt: scriptResult.returnReceipt\n          })}`\n        );\n      }\n      let value;\n      if (scriptResult.returnReceipt.type === ReceiptType.Return) {\n        value = scriptResult.returnReceipt.val;\n      }\n      if (scriptResult.returnReceipt.type === ReceiptType.ReturnData) {\n        const decoded = call2.func.decodeOutput(scriptResult.returnReceipt.data);\n        value = decoded[0];\n      }\n      return value;\n    },\n    logs\n  );\n}\nvar ScriptRequest = class {\n  /**\n   * The bytes of the script.\n   */\n  bytes;\n  /**\n   * A function to encode the script data.\n   */\n  scriptDataEncoder;\n  /**\n   * A function to decode the script result.\n   */\n  scriptResultDecoder;\n  /**\n   * Creates an instance of the ScriptRequest class.\n   *\n   * @param bytes - The bytes of the script.\n   * @param scriptDataEncoder - The script data encoder function.\n   * @param scriptResultDecoder - The script result decoder function.\n   */\n  constructor(bytes, scriptDataEncoder, scriptResultDecoder2) {\n    this.bytes = arrayify(bytes);\n    this.scriptDataEncoder = scriptDataEncoder;\n    this.scriptResultDecoder = scriptResultDecoder2;\n  }\n  /**\n   * Gets the script data offset for the given bytes.\n   *\n   * @param byteLength - The byte length of the script.\n   * @param maxInputs - The maxInputs value from the chain's consensus params.\n   * @returns The script data offset.\n   */\n  static getScriptDataOffsetWithScriptBytes(byteLength, maxInputs) {\n    const scriptDataBaseOffset = calculateVmTxMemory({ maxInputs }) + SCRIPT_FIXED_SIZE;\n    return scriptDataBaseOffset + byteLength;\n  }\n  /**\n   * Gets the script data offset.\n   *\n   * @param maxInputs - The maxInputs value from the chain's consensus params.\n   * @returns The script data offset.\n   */\n  getScriptDataOffset(maxInputs) {\n    return ScriptRequest.getScriptDataOffsetWithScriptBytes(this.bytes.length, maxInputs);\n  }\n  /**\n   * Encodes the data for a script call.\n   *\n   * @param data - The script data.\n   * @returns The encoded data.\n   */\n  encodeScriptData(data) {\n    const callScript = this.scriptDataEncoder(data);\n    if (ArrayBuffer.isView(callScript)) {\n      return callScript;\n    }\n    this.bytes = arrayify(callScript.script);\n    return callScript.data;\n  }\n  /**\n   * Decodes the result of a script call.\n   *\n   * @param callResult - The CallResult from the script call.\n   * @param logs - Optional logs associated with the decoding.\n   * @returns The decoded result.\n   */\n  decodeCallResult(callResult, logs = []) {\n    return decodeCallResult(callResult, this.scriptResultDecoder, logs);\n  }\n};\n\n// src/contract-call-script.ts\nvar DEFAULT_OPCODE_PARAMS = {\n  assetIdOffset: 0,\n  amountOffset: 0,\n  gasForwardedOffset: 0,\n  callDataOffset: 0\n};\nvar SCRIPT_WRAPPER_CONTRACT_ID = ZeroBytes32;\nvar getSingleCallInstructions = ({\n  callDataOffset,\n  gasForwardedOffset,\n  amountOffset,\n  assetIdOffset\n}) => {\n  const inst = new InstructionSet(\n    asm.movi(16, callDataOffset),\n    asm.movi(17, amountOffset),\n    asm.lw(17, 17, 0),\n    asm.movi(18, assetIdOffset)\n  );\n  if (gasForwardedOffset) {\n    inst.push(\n      asm.movi(19, gasForwardedOffset),\n      asm.lw(19, 19, 0),\n      asm.call(16, 17, 18, 19)\n    );\n  } else {\n    inst.push(asm.call(16, 17, 18, asm.RegId.cgas().to_u8()));\n  }\n  return inst;\n};\nfunction getInstructions(offsets) {\n  if (!offsets.length) {\n    return new Uint8Array();\n  }\n  const multiCallInstructions = new InstructionSet();\n  for (let i = 0; i < offsets.length; i += 1) {\n    multiCallInstructions.extend(getSingleCallInstructions(offsets[i]).entries());\n  }\n  multiCallInstructions.push(asm.ret(1));\n  return multiCallInstructions.toBytes();\n}\nvar isReturnType = (type) => type === ReceiptType2.Return || type === ReceiptType2.ReturnData;\nvar getMainCallReceipt = (receipts, contractId) => receipts.find(\n  ({ type, id, to }) => type === ReceiptType2.Call && id === SCRIPT_WRAPPER_CONTRACT_ID && to === contractId\n);\nvar scriptResultDecoder = (contractId) => (result) => {\n  if (toNumber(result.code) !== 0) {\n    throw new FuelError3(ErrorCode3.SCRIPT_REVERTED, `Transaction reverted.`);\n  }\n  const mainCallResult = getMainCallReceipt(\n    result.receipts,\n    contractId.toB256()\n  );\n  const mainCallInstructionStart = bn(mainCallResult?.is);\n  const receipts = result.receipts;\n  return receipts.filter(({ type }) => isReturnType(type)).flatMap((receipt) => {\n    if (!mainCallInstructionStart.eq(bn(receipt.is))) {\n      return [];\n    }\n    if (receipt.type === ReceiptType2.Return) {\n      return [new BigNumberCoder(\"u64\").encode(receipt.val)];\n    }\n    if (receipt.type === ReceiptType2.ReturnData) {\n      const encodedScriptReturn = arrayify2(receipt.data);\n      return [encodedScriptReturn];\n    }\n    return [new Uint8Array()];\n  });\n};\nvar decodeContractCallScriptResult = (callResult, contractId, logs = []) => decodeCallResult(callResult, scriptResultDecoder(contractId), logs);\nvar getCallInstructionsLength = (contractCalls) => contractCalls.reduce(\n  (sum, call2) => {\n    const offset = { ...DEFAULT_OPCODE_PARAMS };\n    if (call2.gas) {\n      offset.gasForwardedOffset = 1;\n    }\n    return sum + getSingleCallInstructions(offset).byteLength();\n  },\n  asm.Instruction.size()\n  // placeholder for single RET instruction which is added later\n);\nvar getContractCallScript = (functionScopes, maxInputs) => new ScriptRequest(\n  // Script to call the contract, start with stub size matching length of calls\n  getInstructions(new Array(functionScopes.length).fill(DEFAULT_OPCODE_PARAMS)),\n  (contractCalls) => {\n    const TOTAL_CALLS = contractCalls.length;\n    if (TOTAL_CALLS === 0) {\n      return { data: new Uint8Array(), script: new Uint8Array() };\n    }\n    const callInstructionsLength = getCallInstructionsLength(contractCalls);\n    const paddingLength = (8 - callInstructionsLength % 8) % 8;\n    const paddedInstructionsLength = callInstructionsLength + paddingLength;\n    const dataOffset = calculateScriptDataBaseOffset(maxInputs.toNumber()) + paddedInstructionsLength;\n    const paramOffsets = [];\n    let segmentOffset = dataOffset;\n    const scriptData = [];\n    for (let i = 0; i < TOTAL_CALLS; i += 1) {\n      const call2 = contractCalls[i];\n      const amountOffset = segmentOffset;\n      const assetIdOffset = amountOffset + WORD_SIZE2;\n      const callDataOffset = assetIdOffset + ASSET_ID_LEN2;\n      const encodedSelectorOffset = callDataOffset + CONTRACT_ID_LEN2 + WORD_SIZE2 + WORD_SIZE2;\n      const encodedArgsOffset = encodedSelectorOffset + call2.fnSelectorBytes.byteLength;\n      const encodedArgs = arrayify2(call2.data);\n      let gasForwardedOffset = 0;\n      scriptData.push(new BigNumberCoder(\"u64\").encode(call2.amount || 0));\n      scriptData.push(new B256Coder().encode(call2.assetId?.toString() || ZeroBytes32));\n      scriptData.push(call2.contractId.toBytes());\n      scriptData.push(new BigNumberCoder(\"u64\").encode(encodedSelectorOffset));\n      scriptData.push(new BigNumberCoder(\"u64\").encode(encodedArgsOffset));\n      scriptData.push(call2.fnSelectorBytes);\n      scriptData.push(encodedArgs);\n      if (call2.gas) {\n        scriptData.push(new BigNumberCoder(\"u64\").encode(call2.gas));\n        gasForwardedOffset = encodedArgsOffset + encodedArgs.byteLength;\n      }\n      const callParamOffsets = {\n        amountOffset,\n        assetIdOffset,\n        gasForwardedOffset,\n        callDataOffset\n      };\n      paramOffsets.push(callParamOffsets);\n      segmentOffset = dataOffset + concat2(scriptData).byteLength;\n    }\n    const script = getInstructions(paramOffsets);\n    const finalScriptData = concat2(scriptData);\n    return { data: finalScriptData, script };\n  },\n  () => [new Uint8Array()]\n);\n\n// src/response.ts\nimport { getGasUsedFromReceipts } from \"@fuel-ts/account\";\nvar extractInvocationResult = (functionScopes, receipts, isMultiCall, logs) => {\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  if (functionScopes.length === 1 && mainCallConfig && \"bytes\" in mainCallConfig.program) {\n    return callResultToInvocationResult({ receipts }, mainCallConfig, logs);\n  }\n  const encodedResults = decodeContractCallScriptResult(\n    { receipts },\n    (mainCallConfig?.program).id,\n    logs\n  );\n  const decodedResults = encodedResults.map((encodedResult, i) => {\n    const { func } = functionScopes[i].getCallConfig();\n    return func.decodeOutput(encodedResult)?.[0];\n  });\n  return isMultiCall ? decodedResults : decodedResults?.[0];\n};\nvar buildFunctionResult = async (params) => {\n  const { funcScope, isMultiCall, program, transactionResponse } = params;\n  const txResult = await transactionResponse.waitForResult();\n  const { receipts } = txResult;\n  const functionScopes = Array.isArray(funcScope) ? funcScope : [funcScope];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  const logs = getResultLogs(receipts, mainCallConfig, functionScopes);\n  const value = extractInvocationResult(functionScopes, receipts, isMultiCall, logs);\n  const gasUsed = getGasUsedFromReceipts(receipts);\n  const submitResult = {\n    isMultiCall,\n    functionScopes,\n    value,\n    program,\n    transactionResult: txResult,\n    transactionResponse,\n    transactionId: transactionResponse.id,\n    logs,\n    gasUsed\n  };\n  return submitResult;\n};\nvar buildDryRunResult = (params) => {\n  const { funcScopes, callResult, isMultiCall } = params;\n  const { receipts } = callResult;\n  const functionScopes = Array.isArray(funcScopes) ? funcScopes : [funcScopes];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  const logs = getResultLogs(receipts, mainCallConfig, functionScopes);\n  const value = extractInvocationResult(functionScopes, receipts, isMultiCall, logs);\n  const gasUsed = getGasUsedFromReceipts(receipts);\n  const submitResult = {\n    functionScopes,\n    callResult,\n    isMultiCall,\n    gasUsed,\n    value\n  };\n  return submitResult;\n};\n\n// src/functions/base-invocation-scope.ts\nfunction createContractCall(funcScope) {\n  const { program, args, forward, func, callParameters, externalAbis } = funcScope.getCallConfig();\n  const data = func.encodeArguments(args);\n  return {\n    contractId: program.id,\n    fnSelectorBytes: func.selectorBytes,\n    data,\n    assetId: forward?.assetId,\n    amount: forward?.amount,\n    gas: callParameters?.gasLimit,\n    externalContractsAbis: externalAbis\n  };\n}\nvar BaseInvocationScope = class {\n  transactionRequest;\n  program;\n  functionInvocationScopes = [];\n  txParameters;\n  requiredCoins = [];\n  isMultiCall = false;\n  hasCallParamsGasLimit = false;\n  // flag to check if any of the callParams has gasLimit set\n  externalAbis = {};\n  addSignersCallback;\n  /**\n   * Constructs an instance of BaseInvocationScope.\n   *\n   * @param program - The abstract program to be invoked.\n   * @param isMultiCall - A flag indicating whether the invocation is a multi-call.\n   */\n  constructor(program, isMultiCall) {\n    this.program = program;\n    this.isMultiCall = isMultiCall;\n    this.transactionRequest = new ScriptTransactionRequest();\n  }\n  /**\n   * Getter for the contract calls.\n   *\n   * @returns An array of contract calls.\n   */\n  get calls() {\n    return this.functionInvocationScopes.map((funcScope) => createContractCall(funcScope));\n  }\n  /**\n   * Updates the script request with the current contract calls.\n   */\n  async updateScriptRequest() {\n    const provider = this.getProvider();\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs }\n      }\n    } = await provider.getChain();\n    const contractCallScript = getContractCallScript(this.functionInvocationScopes, maxInputs);\n    this.transactionRequest.setScript(contractCallScript, this.calls);\n  }\n  /**\n   * Updates the transaction request with the current input/output.\n   */\n  updateContractInputAndOutput() {\n    const calls = this.calls;\n    calls.forEach((c) => {\n      if (c.contractId) {\n        this.transactionRequest.addContractInputAndOutput(c.contractId);\n      }\n      if (c.externalContractsAbis) {\n        Object.keys(c.externalContractsAbis).forEach(\n          (contractId) => this.transactionRequest.addContractInputAndOutput(new Address(contractId))\n        );\n      }\n    });\n  }\n  /**\n   * Gets the required coins for the transaction.\n   *\n   * @returns An array of required coin quantities.\n   */\n  getRequiredCoins() {\n    const forwardingAssets = this.calls.map((call2) => ({\n      assetId: String(call2.assetId),\n      amount: bn2(call2.amount || 0)\n    })).filter(({ assetId, amount }) => assetId && !bn2(amount).isZero());\n    return forwardingAssets;\n  }\n  /**\n   * Updates the required coins for the transaction.\n   */\n  updateRequiredCoins() {\n    const assets = this.getRequiredCoins();\n    const reduceForwardCoins = (requiredCoins, { assetId, amount }) => {\n      const currentAmount = requiredCoins.get(assetId)?.amount || bn2(0);\n      return requiredCoins.set(assetId, {\n        assetId: String(assetId),\n        amount: currentAmount.add(amount)\n      });\n    };\n    this.requiredCoins = Array.from(\n      assets.reduce(reduceForwardCoins, /* @__PURE__ */ new Map()).values()\n    );\n  }\n  /**\n   * Adds a single call to the invocation scope.\n   *\n   * @param funcScope - The function scope to add.\n   * @returns The current instance of the class.\n   */\n  addCall(funcScope) {\n    this.addCalls([funcScope]);\n    return this;\n  }\n  /**\n   * Adds multiple calls to the invocation scope.\n   *\n   * @param funcScopes - An array of function scopes to add.\n   * @returns The current instance of the class.\n   */\n  addCalls(funcScopes) {\n    this.functionInvocationScopes.push(...funcScopes);\n    this.updateContractInputAndOutput();\n    this.updateRequiredCoins();\n    return this;\n  }\n  /**\n   * Prepares the transaction by updating the script request, required coins, and checking the gas limit.\n   */\n  async prepareTransaction() {\n    await asm2.initWasm();\n    await this.updateScriptRequest();\n    this.updateRequiredCoins();\n    this.checkGasLimitTotal();\n    if (this.transactionRequest.type === TransactionType.Script) {\n      this.transactionRequest.abis = getAbisFromAllCalls(this.functionInvocationScopes);\n    }\n  }\n  /**\n   * Checks if the total gas limit is within the acceptable range.\n   */\n  checkGasLimitTotal() {\n    const gasLimitOnCalls = this.calls.reduce((total, call2) => total.add(call2.gas || 0), bn2(0));\n    if (this.transactionRequest.gasLimit.eq(0)) {\n      this.transactionRequest.gasLimit = gasLimitOnCalls;\n    } else if (gasLimitOnCalls.gt(this.transactionRequest.gasLimit)) {\n      throw new FuelError4(\n        ErrorCode4.TRANSACTION_ERROR,\n        \"Transaction's gasLimit must be equal to or greater than the combined forwarded gas of all calls.\"\n      );\n    }\n  }\n  /**\n   * Gets the transaction cost for dry running the transaction.\n   *\n   * @returns The transaction cost details.\n   */\n  async getTransactionCost() {\n    const request = clone(await this.getTransactionRequest());\n    const account = this.program.account ?? Wallet.generate({ provider: this.getProvider() });\n    return account.getTransactionCost(request, {\n      quantities: this.getRequiredCoins(),\n      signatureCallback: this.addSignersCallback\n    });\n  }\n  /**\n   * Costs and funds the underlying transaction request.\n   *\n   * @returns The invocation scope as a funded transaction request.\n   */\n  async fundWithRequiredCoins() {\n    let transactionRequest = await this.getTransactionRequest();\n    transactionRequest = clone(transactionRequest);\n    const txCost = await this.getTransactionCost();\n    const { gasUsed, missingContractIds, outputVariables, maxFee } = txCost;\n    this.setDefaultTxParams(transactionRequest, gasUsed, maxFee);\n    transactionRequest.inputs = transactionRequest.inputs.filter((i) => i.type !== InputType.Coin);\n    missingContractIds.forEach((contractId) => {\n      transactionRequest.addContractInputAndOutput(new Address(contractId));\n    });\n    transactionRequest.addVariableOutputs(outputVariables);\n    await this.program.account?.fund(transactionRequest, txCost);\n    if (this.addSignersCallback) {\n      await this.addSignersCallback(transactionRequest);\n    }\n    return transactionRequest;\n  }\n  /**\n   * Sets the transaction parameters.\n   *\n   * @param txParams - The transaction parameters to set.\n   * @returns The current instance of the class.\n   */\n  txParams(txParams) {\n    this.txParameters = txParams;\n    const request = this.transactionRequest;\n    request.tip = bn2(txParams.tip || request.tip);\n    request.gasLimit = bn2(txParams.gasLimit || request.gasLimit);\n    request.maxFee = txParams.maxFee ? bn2(txParams.maxFee) : request.maxFee;\n    request.witnessLimit = txParams.witnessLimit ? bn2(txParams.witnessLimit) : request.witnessLimit;\n    request.maturity = txParams.maturity || request.maturity;\n    request.addVariableOutputs(this.txParameters?.variableOutputs || 0);\n    return this;\n  }\n  /**\n   * Adds contracts to the invocation scope.\n   *\n   * @param contracts - An array of contracts to add.\n   * @returns The current instance of the class.\n   */\n  addContracts(contracts) {\n    contracts.forEach((contract) => {\n      this.transactionRequest.addContractInputAndOutput(contract.id);\n      this.externalAbis[contract.id.toB256()] = contract.interface.jsonAbi;\n    });\n    return this;\n  }\n  /**\n   * Adds an asset transfer to an Account on the contract call transaction request.\n   *\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The current instance of the class.\n   */\n  addTransfer(transferParams) {\n    const { amount, destination, assetId } = transferParams;\n    this.transactionRequest = this.transactionRequest.addCoinOutput(\n      new Address(destination),\n      amount,\n      assetId\n    );\n    return this;\n  }\n  /**\n   * Adds multiple transfers to the contract call transaction request.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The current instance of the class.\n   */\n  addBatchTransfer(transferParams) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.transactionRequest = this.transactionRequest.addCoinOutput(\n        new Address(destination),\n        amount,\n        assetId\n      );\n    });\n    return this;\n  }\n  addSigners(signers) {\n    this.addSignersCallback = (transactionRequest) => transactionRequest.addAccountWitnesses(signers);\n    return this;\n  }\n  /**\n   * Prepares and returns the transaction request object.\n   *\n   * @returns The prepared transaction request.\n   */\n  async getTransactionRequest() {\n    await this.prepareTransaction();\n    return this.transactionRequest;\n  }\n  /**\n   * Submits the contract call transaction and returns a promise that resolves to an object\n   * containing the transaction ID and a function to wait for the result. The promise will resolve\n   * as soon as the transaction is submitted to the node.\n   *\n   * @returns A promise that resolves to an object containing:\n   * - `transactionId`: The ID of the submitted transaction.\n   * - `waitForResult`: A function that waits for the transaction result.\n   * @template T - The type of the return value.\n   */\n  async call() {\n    assert(this.program.account, \"Wallet is required!\");\n    const transactionRequest = await this.fundWithRequiredCoins();\n    const response = await this.program.account.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n    const transactionId = response.id;\n    return {\n      transactionId,\n      waitForResult: async () => buildFunctionResult({\n        funcScope: this.functionInvocationScopes,\n        isMultiCall: this.isMultiCall,\n        program: this.program,\n        transactionResponse: response\n      })\n    };\n  }\n  /**\n   * Simulates a transaction.\n   *\n   * @returns The result of the invocation call.\n   */\n  async simulate() {\n    assert(this.program.account, \"Wallet is required!\");\n    if (!(\"populateTransactionWitnessesSignature\" in this.program.account)) {\n      throw new FuelError4(\n        ErrorCode4.ABI_MAIN_METHOD_MISSING,\n        \"An unlocked wallet is required to simulate a contract call.\"\n      );\n    }\n    const transactionRequest = await this.fundWithRequiredCoins();\n    const callResult = await this.program.account.simulateTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall\n    });\n  }\n  /**\n   * Executes a transaction in dry run mode.\n   *\n   * @returns The result of the invocation call.\n   */\n  async dryRun() {\n    const { receipts } = await this.getTransactionCost();\n    const callResult = {\n      receipts\n    };\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall\n    });\n  }\n  async get() {\n    const { receipts } = await this.getTransactionCost();\n    const callResult = {\n      receipts\n    };\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall\n    });\n  }\n  getProvider() {\n    const provider = this.program.provider;\n    return provider;\n  }\n  /**\n   * Obtains the ID of a transaction.\n   *\n   * @param chainId - the chainId to use to hash the transaction with\n   * @returns the ID of the transaction.\n   */\n  async getTransactionId(chainId) {\n    const chainIdToHash = chainId ?? await this.getProvider().getChainId();\n    const transactionRequest = await this.getTransactionRequest();\n    return transactionRequest.getTransactionId(chainIdToHash);\n  }\n  /**\n   * In case the gasLimit is *not* set by the user, this method sets a default value.\n   */\n  setDefaultTxParams(transactionRequest, gasUsed, maxFee) {\n    const gasLimitSpecified = isDefined(this.txParameters?.gasLimit) || this.hasCallParamsGasLimit;\n    const maxFeeSpecified = isDefined(this.txParameters?.maxFee);\n    const { gasLimit: setGasLimit, maxFee: setMaxFee } = transactionRequest;\n    if (!gasLimitSpecified) {\n      transactionRequest.gasLimit = gasUsed;\n    } else if (setGasLimit.lt(gasUsed)) {\n      throw new FuelError4(\n        ErrorCode4.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n    if (!maxFeeSpecified) {\n      transactionRequest.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new FuelError4(\n        ErrorCode4.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n  }\n};\n\n// src/functions/invocation-scope.ts\nvar FunctionInvocationScope = class extends BaseInvocationScope {\n  func;\n  callParameters;\n  forward;\n  args;\n  /**\n   * Constructs an instance of FunctionInvocationScope.\n   *\n   * @param program - The program.\n   * @param func - The function fragment.\n   * @param args - The arguments.\n   */\n  constructor(program, func, args) {\n    super(program, false);\n    this.func = func;\n    this.args = args || [];\n    this.setArguments(...args);\n    super.addCall(this);\n  }\n  /**\n   * Gets the call configuration.\n   *\n   * @returns The call configuration.\n   */\n  getCallConfig() {\n    return {\n      func: this.func,\n      program: this.program,\n      callParameters: this.callParameters,\n      txParameters: this.txParameters,\n      forward: this.forward,\n      args: this.args,\n      externalAbis: this.externalAbis\n    };\n  }\n  /**\n   * Sets the arguments for the function invocation.\n   *\n   * @param args - The arguments.\n   * @returns The instance of FunctionInvocationScope.\n   */\n  setArguments(...args) {\n    this.args = args || [];\n    return this;\n  }\n  /**\n   * Sets the call parameters for the function invocation.\n   *\n   * @param callParams - The call parameters.\n   * @returns The instance of FunctionInvocationScope.\n   * @throws If the function is not payable and forward is set.\n   */\n  callParams(callParams) {\n    if (!this.hasCallParamsGasLimit && callParams?.gasLimit !== void 0) {\n      this.hasCallParamsGasLimit = true;\n    }\n    this.callParameters = callParams;\n    if (callParams?.forward) {\n      if (!this.func.attributes.find((attr) => attr.name === \"payable\")) {\n        throw new FuelError5(\n          ErrorCode5.TRANSACTION_ERROR,\n          `The target function ${this.func.name} cannot accept forwarded funds as it's not marked as 'payable'.`\n        );\n      }\n      this.forward = coinQuantityfy(callParams.forward);\n    }\n    this.setArguments(...this.args);\n    this.updateRequiredCoins();\n    return this;\n  }\n};\n\n// src/functions/multicall-scope.ts\nvar MultiCallInvocationScope = class extends BaseInvocationScope {\n  /**\n   * Constructs an instance of MultiCallInvocationScope.\n   *\n   * @param contract - The contract.\n   * @param funcScopes - An array of function invocation scopes.\n   */\n  constructor(contract, funcScopes) {\n    super(contract, true);\n    this.addCalls(funcScopes);\n  }\n  /**\n   * Adds a single function invocation scope to the multi-call invocation scope.\n   *\n   * @param funcScope - The function invocation scope.\n   * @returns The instance of MultiCallInvocationScope.\n   */\n  addCall(funcScope) {\n    return super.addCalls([funcScope]);\n  }\n  /**\n   * Adds multiple function invocation scopes to the multi-call invocation scope.\n   *\n   * @param funcScopes - An array of function invocation scopes.\n   * @returns The instance of MultiCallInvocationScope.\n   */\n  addCalls(funcScopes) {\n    return super.addCalls(funcScopes);\n  }\n};\n\n// src/contract.ts\nimport { Interface } from \"@fuel-ts/abi-coder\";\nimport { Address as Address2 } from \"@fuel-ts/address\";\nvar Contract = class {\n  /**\n   * The unique contract identifier.\n   */\n  id;\n  /**\n   * The provider for interacting with the contract.\n   */\n  provider;\n  /**\n   * The contract's ABI interface.\n   */\n  interface;\n  /**\n   * The account associated with the contract, if available.\n   */\n  account;\n  /**\n   * A collection of functions available on the contract.\n   */\n  functions = {};\n  /**\n   * Creates an instance of the Contract class.\n   *\n   * @param id - The contract's address.\n   * @param abi - The contract's ABI (JSON ABI or Interface instance).\n   * @param accountOrProvider - The account or provider for interaction.\n   */\n  constructor(id, abi, accountOrProvider) {\n    this.interface = abi instanceof Interface ? abi : new Interface(abi);\n    this.id = new Address2(id);\n    if (accountOrProvider && \"provider\" in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n    Object.keys(this.interface.functions).forEach((name) => {\n      const fragment = this.interface.getFunction(name);\n      Object.defineProperty(this.functions, fragment.name, {\n        value: this.buildFunction(fragment),\n        writable: false\n      });\n    });\n  }\n  /**\n   * Build a function invocation scope for the provided function fragment.\n   *\n   * @param func - The function fragment to build a scope for.\n   * @returns A function that creates a FunctionInvocationScope.\n   */\n  buildFunction(func) {\n    return (() => {\n      const funcInvocationScopeCreator = (...args) => new FunctionInvocationScope(this, func, args);\n      Object.defineProperty(funcInvocationScopeCreator, \"isReadOnly\", {\n        value: () => func.isReadOnly(),\n        writable: false\n      });\n      return funcInvocationScopeCreator;\n    })();\n  }\n  /**\n   * Create a multi-call invocation scope for the provided function invocation scopes.\n   *\n   * @param calls - An array of FunctionInvocationScopes to execute in a batch.\n   * @returns A MultiCallInvocationScope instance.\n   */\n  multiCall(calls) {\n    return new MultiCallInvocationScope(this, calls);\n  }\n  /**\n   * Get the balance for a given asset ID for this contract.\n   *\n   * @param assetId - The specified asset ID.\n   * @returns The balance of the contract for the specified asset.\n   */\n  getBalance(assetId) {\n    return this.provider.getContractBalance(this.id, assetId);\n  }\n};\nexport {\n  AbstractContract,\n  AbstractProgram,\n  Contract,\n  FunctionInvocationScope,\n  InstructionSet,\n  MultiCallInvocationScope,\n  ScriptRequest,\n  assert,\n  buildDryRunResult,\n  buildFunctionResult,\n  extractInvocationResult,\n  getAbisFromAllCalls,\n  getResultLogs\n};\n//# sourceMappingURL=index.mjs.map","// src/script.ts\nimport { Interface } from \"@fuel-ts/abi-coder\";\nimport { deployScriptOrPredicate } from \"@fuel-ts/account\";\nimport { FuelError as FuelError2 } from \"@fuel-ts/errors\";\nimport { arrayify } from \"@fuel-ts/utils\";\n\n// src/script-invocation-scope.ts\nimport { FuelError } from \"@fuel-ts/errors\";\nimport { ScriptRequest, FunctionInvocationScope } from \"@fuel-ts/program\";\nvar ScriptInvocationScope = class extends FunctionInvocationScope {\n  scriptRequest;\n  async updateScriptRequest() {\n    if (!this.scriptRequest) {\n      await this.buildScriptRequest();\n    }\n    this.transactionRequest.setScript(this.scriptRequest, this.args);\n  }\n  async buildScriptRequest() {\n    const programBytes = this.program.bytes;\n    const chainInfoCache = await this.program.provider.getChain();\n    if (!chainInfoCache) {\n      throw new FuelError(\n        FuelError.CODES.CHAIN_INFO_CACHE_EMPTY,\n        \"Provider chain info cache is empty. Please make sure to initialize the `Provider` properly by running `new Provider()`\"\n      );\n    }\n    this.scriptRequest = new ScriptRequest(\n      programBytes,\n      (args) => this.func.encodeArguments(args),\n      () => []\n    );\n  }\n};\n\n// src/types.ts\nimport { AbstractProgram } from \"@fuel-ts/program\";\nvar AbstractScript = class extends AbstractProgram {\n};\n\n// src/script.ts\nvar Script = class extends AbstractScript {\n  /**\n   * The compiled bytecode of the script.\n   */\n  bytes;\n  /**\n   * The ABI interface for the script.\n   */\n  interface;\n  /**\n   * The account associated with the script.\n   */\n  account;\n  /**\n   * The script request object.\n   */\n  script;\n  /**\n   * The provider used for interacting with the network.\n   */\n  provider;\n  /**\n   * Functions that can be invoked within the script.\n   */\n  functions;\n  /**\n   * Create a new instance of the Script class.\n   *\n   * @param bytecode - The compiled bytecode of the script.\n   * @param abi - The ABI interface for the script.\n   * @param account - The account associated with the script.\n   */\n  constructor(bytecode, abi, account) {\n    super();\n    this.bytes = arrayify(bytecode);\n    this.interface = new Interface(abi);\n    this.provider = account.provider;\n    this.account = account;\n    this.functions = {\n      main: (...args) => new ScriptInvocationScope(this, this.interface.getFunction(\"main\"), args)\n    };\n  }\n  /**\n   * Set the configurable constants of the script.\n   *\n   * @param configurables - An object containing the configurable constants and their values.\n   * @throws Will throw an error if the script has no configurable constants to be set or if an invalid constant is provided.\n   * @returns This instance of the `Script`.\n   */\n  setConfigurableConstants(configurables) {\n    try {\n      if (!Object.keys(this.interface.configurables).length) {\n        throw new FuelError2(\n          FuelError2.CODES.INVALID_CONFIGURABLE_CONSTANTS,\n          `The script does not have configurable constants to be set`\n        );\n      }\n      Object.entries(configurables).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new FuelError2(\n            FuelError2.CODES.CONFIGURABLE_NOT_FOUND,\n            `The script does not have a configurable constant named: '${key}'`\n          );\n        }\n        const { offset } = this.interface.configurables[key];\n        const encoded = this.interface.encodeConfigurable(key, value);\n        this.bytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new FuelError2(\n        FuelError2.CODES.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${err.message}.`\n      );\n    }\n    return this;\n  }\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader script will have the same configurable constants\n   * as the original script which was used to generate the loader script.\n   */\n  deploy(account) {\n    return deployScriptOrPredicate({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: (loaderBytecode, newAbi) => new Script(loaderBytecode, newAbi, this.account)\n    });\n  }\n};\n\n// src/scripts.ts\nimport { ScriptRequest as ScriptRequest2 } from \"@fuel-ts/program\";\nvar returnZeroScript = new ScriptRequest2(\n  /*\n    Opcode::RET(REG_ZERO)\n    Opcode::NOOP\n  */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  \"0x24000000\",\n  () => new Uint8Array(0),\n  () => void 0\n);\nexport {\n  AbstractScript,\n  Script,\n  returnZeroScript\n};\n//# sourceMappingURL=index.mjs.map","import type { UserFuelsConfig } from '../types';\n\nexport function createConfig(config: UserFuelsConfig) {\n  return config;\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport type { DeployContractOptions } from '@fuel-ts/contract';\n\nexport enum Commands {\n  build = 'build',\n  deploy = 'deploy',\n  dev = 'dev',\n  init = 'init',\n  versions = 'versions',\n  node = 'node',\n}\n\nexport type CommandEvent =\n  | {\n      type: Commands.build;\n      data: void;\n    }\n  | {\n      type: Commands.deploy;\n      data: DeployedData;\n    }\n  | {\n      type: Commands.dev;\n      data: void;\n    }\n  | {\n      type: Commands.init;\n      data: void;\n    }\n  | {\n      type: Commands.versions;\n      data: void;\n    }\n  | {\n      type: Commands.node;\n      data: void;\n    };\n\nexport type DeployedContract = {\n  name: string;\n  contractId: string;\n};\n\nexport type DeployedScript = {\n  path: string;\n  loaderBytecode: Uint8Array;\n  abi: JsonAbi;\n};\n\nexport type DeployedPredicate = DeployedScript & {\n  predicateRoot: string;\n};\n\nexport type DeployedData = {\n  contracts?: DeployedContract[];\n  scripts?: DeployedScript[];\n  predicates?: DeployedPredicate[];\n};\n\nexport type ContractDeployOptions = {\n  contracts: DeployedContract[];\n  contractName: string;\n  contractPath: string;\n};\n\nexport type OptionsFunction = (\n  options: ContractDeployOptions\n) => DeployContractOptions | Promise<DeployContractOptions>;\n\nexport type FuelsEventListener<CType extends Commands> = (\n  config: FuelsConfig,\n  data: Extract<CommandEvent, { type: CType }>['data']\n) => void | Promise<void>;\n\nexport type UserFuelsConfig = {\n  /** Relative directory path to Forc workspace */\n  workspace?: string;\n  /** List of relative directory paths to Sway contracts */\n  contracts?: string[];\n  /** List of relative directory paths to Sway predicates */\n  predicates?: string[];\n  /** List of relative directory paths to Sway scripts */\n  scripts?: string[];\n  /** Relative directory path for generating Typescript definitions */\n  output: string;\n\n  /**\n   * Wallet private key, used when deploying contracts.\n   * Should ideally come from env — `process.env.MY_PRIVATE_KEY`\n   */\n  privateKey?: string;\n\n  /**\n   * Contracts will be deployed using this provider.\n   * Default: http://localhost:4000/v1/graphql\n   */\n  providerUrl?: string;\n\n  /**\n   * Relative path to directory containing custom configurations for `fuel-core`, such as:\n   * - chainConfig.json\n   * - metadata.json\n   * - stateConfig.json\n   */\n  snapshotDir?: string;\n\n  /** Static of dyanmic deploy configs to be used when deploying contracts */\n  deployConfig?: DeployContractOptions | OptionsFunction;\n\n  /** If set to false, you will need to spin up a Fuel core node by yourself */\n  autoStartFuelCore?: boolean;\n\n  /** If set, will use absolute path to forc binary  */\n  forcPath?: string;\n\n  /** If set, will use absolute path to forc binary  */\n  fuelCorePath?: string;\n\n  /**\n   * Port to use when starting a `fuel-core` node\n   * Default: first free port, starting from 4000\n   */\n  fuelCorePort?: number;\n\n  /**\n   * Aditional forc build flags to be used when compiling contracts.\n   * Default: []\n   * Example:\n   *  forcBuildFlags: ['--release'];\n   */\n  forcBuildFlags?: string[];\n\n  /**\n   * Function callback, will be called after a successful build operation\n   *\n   * @param config - The loaded `fuels.config.ts`\n   */\n  onBuild?: FuelsEventListener<Commands.build>;\n\n  /**\n   * Function callback, will be called after a successful deploy operation\n   *\n   * @param config - The loaded `fuels.config.ts`\n   * @param data - the deployed contracts\n   */\n  onDeploy?: FuelsEventListener<Commands.deploy>;\n\n  /**\n   * Function callback, will be called after a successful dev operation\n   *\n   * @param config - The loaded `fuels.config.ts`\n   */\n  onDev?: FuelsEventListener<Commands.dev>;\n\n  /**\n   * Function callback, will be called after a successful Node refresh operation\n   *\n   * @param config - The loaded `fuels.config.ts`\n   */\n  onNode?: FuelsEventListener<Commands.node>;\n\n  /**\n   * Function callback, will be called in case of errors\n   * @param config - Configuration in use\n   * @param error - Original error object\n   */\n  onFailure?: (config: FuelsConfig, error: Error) => void | Promise<void>;\n};\n\nexport type FuelsConfig = UserFuelsConfig &\n  Required<\n    Pick<\n      UserFuelsConfig,\n      | 'contracts'\n      | 'predicates'\n      | 'scripts'\n      | 'deployConfig'\n      | 'autoStartFuelCore'\n      | 'forcPath'\n      | 'fuelCorePath'\n      | 'providerUrl'\n      | 'forcBuildFlags'\n    >\n  > & {\n    basePath: string;\n    configPath: string;\n    buildMode: 'debug' | 'release';\n  };\n","// src/contract-factory.ts\nimport { Interface, WORD_SIZE as WORD_SIZE2 } from \"@fuel-ts/abi-coder\";\nimport {\n  CreateTransactionRequest,\n  BlobTransactionRequest,\n  TransactionStatus,\n  calculateGasFee\n} from \"@fuel-ts/account\";\nimport { randomBytes } from \"@fuel-ts/crypto\";\nimport { ErrorCode, FuelError } from \"@fuel-ts/errors\";\nimport { hash } from \"@fuel-ts/hasher\";\nimport { bn } from \"@fuel-ts/math\";\nimport { Contract } from \"@fuel-ts/program\";\nimport { arrayify as arrayify3, isDefined } from \"@fuel-ts/utils\";\n\n// src/loader/loader-script.ts\nimport { BYTES_32 } from \"@fuel-ts/abi-coder\";\nimport { InstructionSet } from \"@fuel-ts/program\";\nimport { arrayify, concat } from \"@fuel-ts/utils\";\nimport * as asm from \"@fuels/vm-asm\";\nvar getLoaderInstructions = (blobIds) => {\n  const { RegId, Instruction } = asm;\n  const numberOfInstructions = 12;\n  const numberOfBlobs = blobIds.length;\n  const blobIdSize = BYTES_32;\n  const blobIdBytes = concat(blobIds.map((b) => arrayify(b)));\n  const instructionBytes = new InstructionSet(\n    // 1. load the blob contents into memory\n    // find the start of the hardcoded blob ids, which are located after the code ends\n    asm.move_(16, RegId.pc().to_u8()),\n    // 0x10 to hold the address of the current blob id\n    asm.addi(16, 16, numberOfInstructions * Instruction.size()),\n    // The contract is going to be loaded from the current value of SP onwards, save\n    // the location into 0x16 so we can jump into it later on\n    asm.move_(22, RegId.sp().to_u8()),\n    // loop counter\n    asm.movi(19, numberOfBlobs),\n    // LOOP starts here\n    // 0x11 to hold the size of the current blob\n    asm.bsiz(17, 16),\n    // push the blob contents onto the stack\n    asm.ldc(16, 0, 17, 1),\n    // move on to the next blob\n    asm.addi(16, 16, blobIdSize),\n    // decrement the loop counter\n    asm.subi(19, 19, 1),\n    // Jump backwards (3+1) instructions if the counter has not reached 0\n    asm.jnzb(19, RegId.zero().to_u8(), 3),\n    // Jump into the memory where the contract is loaded\n    // what follows is called _jmp_mem by the sway compiler\n    // subtract the address contained in IS because jmp will add it back\n    asm.sub(22, 22, RegId.is().to_u8()),\n    // jmp will multiply by 4 so we need to divide to cancel that out\n    asm.divi(22, 22, 4),\n    // jump to the start of the contract we loaded\n    asm.jmp(22)\n  ).toBytes();\n  return concat([instructionBytes, blobIdBytes]);\n};\n\n// src/loader/utils.ts\nimport { WORD_SIZE } from \"@fuel-ts/abi-coder\";\nimport { concat as concat2 } from \"@fuel-ts/utils\";\nvar getContractChunks = (bytecode, chunkSize) => {\n  const chunks = [];\n  for (let offset = 0, index = 0; offset < bytecode.length; offset += chunkSize, index++) {\n    let chunk = bytecode.slice(offset, offset + chunkSize);\n    let length = chunk.length;\n    if (length % WORD_SIZE !== 0) {\n      chunk = concat2([chunk, new Uint8Array(chunkSize - chunk.length)]);\n      length = chunk.length;\n    }\n    chunks.push({ id: index, size: length, bytecode: chunk });\n  }\n  return chunks;\n};\n\n// src/util.ts\nimport { sha256 } from \"@fuel-ts/hasher\";\nimport { calcRoot, SparseMerkleTree } from \"@fuel-ts/merkle\";\nimport { chunkAndPadBytes, hexlify, concat as concat3, arrayify as arrayify2 } from \"@fuel-ts/utils\";\nvar getContractRoot = (bytecode) => {\n  const chunkSize = 16 * 1024;\n  const bytes = arrayify2(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n  return calcRoot(chunks.map((c) => hexlify(c)));\n};\nvar getContractStorageRoot = (storageSlots) => {\n  const tree = new SparseMerkleTree();\n  storageSlots.forEach(({ key, value }) => tree.update(sha256(key), value));\n  return tree.root;\n};\nvar getContractId = (bytecode, salt, stateRoot) => {\n  const root = getContractRoot(arrayify2(bytecode));\n  const contractId = sha256(concat3([\"0x4655454C\", salt, root, stateRoot]));\n  return contractId;\n};\nvar hexlifyWithPrefix = (value) => hexlify(value.startsWith(\"0x\") ? value : `0x${value}`);\n\n// src/contract-factory.ts\nvar CHUNK_SIZE_MULTIPLIER = 0.95;\nvar ContractFactory = class {\n  bytecode;\n  interface;\n  provider;\n  account;\n  storageSlots;\n  /**\n   * Create a ContractFactory instance.\n   *\n   * @param bytecode - The bytecode of the contract.\n   * @param abi - The contract's ABI (Application Binary Interface).\n   * @param accountOrProvider - An account or provider to be associated with the factory.\n   */\n  constructor(bytecode, abi, accountOrProvider = null, storageSlots = []) {\n    this.bytecode = arrayify3(bytecode);\n    if (abi instanceof Interface) {\n      this.interface = abi;\n    } else {\n      this.interface = new Interface(abi);\n    }\n    if (accountOrProvider && \"provider\" in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n    this.storageSlots = storageSlots;\n  }\n  /**\n   * Connect the factory to a provider.\n   *\n   * @param provider - The provider to be associated with the factory.\n   * @returns A new ContractFactory instance.\n   */\n  connect(provider) {\n    return new ContractFactory(this.bytecode, this.interface, provider);\n  }\n  /**\n   * Create a transaction request to deploy a contract with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns The CreateTransactionRequest object for deploying the contract.\n   */\n  createTransactionRequest(deployOptions) {\n    const storageSlots = (deployOptions?.storageSlots ?? []).concat(this.storageSlots).map(({ key, value }) => ({\n      key: hexlifyWithPrefix(key),\n      value: hexlifyWithPrefix(value)\n    })).filter((el, index, self) => self.findIndex((s) => s.key === el.key) === index).sort(({ key: keyA }, { key: keyB }) => keyA.localeCompare(keyB));\n    const options = {\n      salt: randomBytes(32),\n      ...deployOptions ?? {},\n      storageSlots\n    };\n    if (!this.provider) {\n      throw new FuelError(\n        ErrorCode.MISSING_PROVIDER,\n        \"Cannot create transaction request without provider\"\n      );\n    }\n    const bytecode = deployOptions?.bytecode || this.bytecode;\n    const stateRoot = options.stateRoot || getContractStorageRoot(options.storageSlots);\n    const contractId = getContractId(bytecode, options.salt, stateRoot);\n    const transactionRequest = new CreateTransactionRequest({\n      bytecodeWitnessIndex: 0,\n      witnesses: [bytecode],\n      ...options\n    });\n    transactionRequest.addContractCreatedOutput(contractId, stateRoot);\n    return {\n      contractId,\n      transactionRequest\n    };\n  }\n  /**\n   * Takes a transaction request, estimates it and funds it.\n   *\n   * @param request - the request to fund.\n   * @param options - options for funding the request.\n   * @returns a funded transaction request.\n   */\n  async fundTransactionRequest(request, options = {}) {\n    const account = this.getAccount();\n    const { maxFee: setMaxFee } = options;\n    const txCost = await account.getTransactionCost(request);\n    if (isDefined(setMaxFee)) {\n      if (txCost.maxFee.gt(setMaxFee)) {\n        throw new FuelError(\n          ErrorCode.MAX_FEE_TOO_LOW,\n          `Max fee '${options.maxFee}' is lower than the required: '${txCost.maxFee}'.`\n        );\n      }\n    } else {\n      request.maxFee = txCost.maxFee;\n    }\n    await account.fund(request, txCost);\n    return request;\n  }\n  /**\n   * Deploy a contract of any length with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deploy(deployOptions = {}) {\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    return this.bytecode.length > maxContractSize ? this.deployAsBlobTx(deployOptions) : this.deployAsCreateTx(deployOptions);\n  }\n  /**\n   * Deploy a contract with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployAsCreateTx(deployOptions = {}) {\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    if (this.bytecode.length > maxContractSize) {\n      throw new FuelError(\n        ErrorCode.CONTRACT_SIZE_EXCEEDS_LIMIT,\n        \"Contract bytecode is too large. Please use `deployAsBlobTx` instead.\"\n      );\n    }\n    const { contractId, transactionRequest } = await this.prepareDeploy(deployOptions);\n    const transactionResponse = await account.sendTransaction(transactionRequest);\n    const waitForResult = async () => {\n      const transactionResult = await transactionResponse.waitForResult();\n      const contract = new Contract(contractId, this.interface, account);\n      return { contract, transactionResult };\n    };\n    return {\n      contractId,\n      waitForTransactionId: () => Promise.resolve(transactionResponse.id),\n      waitForResult\n    };\n  }\n  /**\n   * Chunks and deploys a contract via a loader contract. Suitable for deploying contracts larger than the max contract size.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployAsBlobTx(deployOptions = {\n    chunkSizeMultiplier: CHUNK_SIZE_MULTIPLIER\n  }) {\n    const account = this.getAccount();\n    const { configurableConstants, chunkSizeMultiplier } = deployOptions;\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n    const chunkSize = await this.getMaxChunkSize(deployOptions, chunkSizeMultiplier);\n    const chunks = getContractChunks(arrayify3(this.bytecode), chunkSize).map((c) => {\n      const transactionRequest = this.blobTransactionRequest({\n        ...deployOptions,\n        bytecode: c.bytecode\n      });\n      return {\n        ...c,\n        transactionRequest,\n        blobId: transactionRequest.blobId\n      };\n    });\n    const blobIds = chunks.map(({ blobId }) => blobId);\n    const loaderBytecode = getLoaderInstructions(blobIds);\n    const { contractId, transactionRequest: createRequest } = this.createTransactionRequest({\n      bytecode: loaderBytecode,\n      ...deployOptions\n    });\n    const uniqueBlobIds = [...new Set(blobIds)];\n    const uploadedBlobIds = await account.provider.getBlobs(uniqueBlobIds);\n    const blobIdsToUpload = uniqueBlobIds.filter((id) => !uploadedBlobIds.includes(id));\n    let totalCost = bn(0);\n    const chainInfo = await account.provider.getChain();\n    const gasPrice = await account.provider.estimateGasPrice(10);\n    const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;\n    for (const { transactionRequest, blobId } of chunks) {\n      if (blobIdsToUpload.includes(blobId)) {\n        const minGas = transactionRequest.calculateMinGas(chainInfo);\n        const minFee = calculateGasFee({\n          gasPrice,\n          gas: minGas,\n          priceFactor,\n          tip: transactionRequest.tip\n        }).add(1);\n        totalCost = totalCost.add(minFee);\n      }\n      const createMinGas = createRequest.calculateMinGas(chainInfo);\n      const createMinFee = calculateGasFee({\n        gasPrice,\n        gas: createMinGas,\n        priceFactor,\n        tip: createRequest.tip\n      }).add(1);\n      totalCost = totalCost.add(createMinFee);\n    }\n    if (totalCost.gt(await account.getBalance())) {\n      throw new FuelError(ErrorCode.FUNDS_TOO_LOW, \"Insufficient balance to deploy contract.\");\n    }\n    let txIdResolver;\n    const txIdPromise = new Promise((resolve) => {\n      txIdResolver = resolve;\n    });\n    const waitForResult = async () => {\n      const uploadedBlobs = [];\n      for (const { blobId, transactionRequest } of chunks) {\n        if (!uploadedBlobs.includes(blobId) && blobIdsToUpload.includes(blobId)) {\n          const fundedBlobRequest = await this.fundTransactionRequest(\n            transactionRequest,\n            deployOptions\n          );\n          let result;\n          try {\n            const blobTx = await account.sendTransaction(fundedBlobRequest);\n            result = await blobTx.waitForResult();\n          } catch (err) {\n            if (err.message.indexOf(`BlobId is already taken ${blobId}`) > -1) {\n              uploadedBlobs.push(blobId);\n              continue;\n            }\n            throw new FuelError(ErrorCode.TRANSACTION_FAILED, \"Failed to deploy contract chunk\");\n          }\n          if (!result.status || result.status !== TransactionStatus.success) {\n            throw new FuelError(ErrorCode.TRANSACTION_FAILED, \"Failed to deploy contract chunk\");\n          }\n          uploadedBlobs.push(blobId);\n        }\n      }\n      await this.fundTransactionRequest(createRequest, deployOptions);\n      txIdResolver(createRequest.getTransactionId(await account.provider.getChainId()));\n      const transactionResponse = await account.sendTransaction(createRequest);\n      const transactionResult = await transactionResponse.waitForResult();\n      const contract = new Contract(contractId, this.interface, account);\n      return { contract, transactionResult };\n    };\n    const waitForTransactionId = () => txIdPromise;\n    return { waitForResult, contractId, waitForTransactionId };\n  }\n  /**\n   * Set configurable constants of the contract with the specified values.\n   *\n   * @param configurableConstants - An object containing configurable names and their values.\n   */\n  setConfigurableConstants(configurableConstants) {\n    try {\n      const hasConfigurable = Object.keys(this.interface.configurables).length;\n      if (!hasConfigurable) {\n        throw new FuelError(\n          ErrorCode.CONFIGURABLE_NOT_FOUND,\n          \"Contract does not have configurables to be set\"\n        );\n      }\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new FuelError(\n            ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `Contract does not have a configurable named: '${key}'`\n          );\n        }\n        const { offset } = this.interface.configurables[key];\n        const encoded = this.interface.encodeConfigurable(key, value);\n        const bytes = arrayify3(this.bytecode);\n        bytes.set(encoded, offset);\n        this.bytecode = bytes;\n      });\n    } catch (err) {\n      throw new FuelError(\n        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants on contract: ${err.message}.`\n      );\n    }\n  }\n  getAccount() {\n    if (!this.account) {\n      throw new FuelError(ErrorCode.ACCOUNT_REQUIRED, \"Account not assigned to contract.\");\n    }\n    return this.account;\n  }\n  async prepareDeploy(deployOptions) {\n    const { configurableConstants } = deployOptions;\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n    const { contractId, transactionRequest } = this.createTransactionRequest(deployOptions);\n    await this.fundTransactionRequest(transactionRequest, deployOptions);\n    return {\n      contractId,\n      transactionRequest\n    };\n  }\n  /**\n   * Create a blob transaction request, used for deploying contract chunks.\n   *\n   * @param options - options for creating a blob transaction request.\n   * @returns a populated BlobTransactionRequest.\n   */\n  blobTransactionRequest(options) {\n    const { bytecode } = options;\n    return new BlobTransactionRequest({\n      blobId: hash(bytecode),\n      witnessIndex: 0,\n      witnesses: [bytecode],\n      ...options\n    });\n  }\n  /**\n   * Get the maximum chunk size for deploying a contract by chunks.\n   */\n  async getMaxChunkSize(deployOptions, chunkSizeMultiplier = CHUNK_SIZE_MULTIPLIER) {\n    if (chunkSizeMultiplier < 0 || chunkSizeMultiplier > 1) {\n      throw new FuelError(\n        ErrorCode.INVALID_CHUNK_SIZE_MULTIPLIER,\n        \"Chunk size multiplier must be between 0 and 1\"\n      );\n    }\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const contractSizeLimit = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    const transactionSizeLimit = consensusParameters.txParameters.maxSize.toNumber();\n    const maxLimit = 64e3;\n    const chainLimit = transactionSizeLimit < contractSizeLimit ? transactionSizeLimit : contractSizeLimit;\n    const sizeLimit = chainLimit < maxLimit ? chainLimit : maxLimit;\n    const blobTx = this.blobTransactionRequest({\n      ...deployOptions,\n      bytecode: randomBytes(32)\n    }).addResources(\n      account.generateFakeResources([\n        { assetId: await account.provider.getBaseAssetId(), amount: bn(1) }\n      ])\n    );\n    const maxChunkSize = (sizeLimit - blobTx.byteLength() - WORD_SIZE2) * chunkSizeMultiplier;\n    return Math.round(maxChunkSize / WORD_SIZE2) * WORD_SIZE2;\n  }\n};\nexport {\n  ContractFactory,\n  getContractId,\n  getContractRoot,\n  getContractStorageRoot,\n  hexlifyWithPrefix\n};\n//# sourceMappingURL=index.mjs.map","// src/configs.ts\nvar DEFAULT_PRECISION = 9;\nvar DEFAULT_MIN_PRECISION = 3;\nvar DEFAULT_DECIMAL_UNITS = 9;\nvar DECIMAL_FUEL = 9;\nvar DECIMAL_WEI = 18;\nvar DECIMAL_KWEI = 15;\nvar DECIMAL_MWEI = 12;\nvar DECIMAL_GWEI = 9;\nexport {\n  DECIMAL_FUEL,\n  DECIMAL_GWEI,\n  DECIMAL_KWEI,\n  DECIMAL_MWEI,\n  DECIMAL_WEI,\n  DEFAULT_DECIMAL_UNITS,\n  DEFAULT_MIN_PRECISION,\n  DEFAULT_PRECISION\n};\n//# sourceMappingURL=configs.mjs.map","// src/configs.ts\nvar DEVNET_NETWORK_URL = \"https://devnet.fuel.network/v1/graphql\";\nvar TESTNET_NETWORK_URL = \"https://testnet.fuel.network/v1/graphql\";\nexport {\n  DEVNET_NETWORK_URL,\n  TESTNET_NETWORK_URL\n};\n//# sourceMappingURL=configs.mjs.map","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) =>\n  key in obj\n    ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value,\n      })\n    : (obj[key] = value);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/types/Src14OwnedProxy.ts\nimport { Contract as __Contract } from \"@fuel-ts/program\";\nimport { Interface } from \"@fuel-ts/abi-coder\";\nvar abi = {\n  programType: \"contract\",\n  specVersion: \"1\",\n  encodingVersion: \"1\",\n  concreteTypes: [\n    {\n      type: \"()\",\n      concreteTypeId:\n        \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n    },\n    {\n      type: \"enum standards::src5::AccessError\",\n      concreteTypeId:\n        \"3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d\",\n      metadataTypeId: 1,\n    },\n    {\n      type: \"enum standards::src5::State\",\n      concreteTypeId:\n        \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      metadataTypeId: 2,\n    },\n    {\n      type: \"enum std::option::Option<struct std::contract_id::ContractId>\",\n      concreteTypeId:\n        \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      metadataTypeId: 4,\n      typeArguments: [\n        \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\",\n      ],\n    },\n    {\n      type: \"enum sway_libs::ownership::errors::InitializationError\",\n      concreteTypeId:\n        \"1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893\",\n      metadataTypeId: 5,\n    },\n    {\n      type: \"enum sway_libs::upgradability::errors::SetProxyOwnerError\",\n      concreteTypeId:\n        \"3c6e90ae504df6aad8b34a93ba77dc62623e00b777eecacfa034a8ac6e890c74\",\n      metadataTypeId: 6,\n    },\n    {\n      type: \"str\",\n      concreteTypeId:\n        \"8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a\",\n    },\n    {\n      type: \"struct std::contract_id::ContractId\",\n      concreteTypeId:\n        \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\",\n      metadataTypeId: 9,\n    },\n    {\n      type: \"struct sway_libs::upgradability::events::ProxyOwnerSet\",\n      concreteTypeId:\n        \"96dd838b44f99d8ccae2a7948137ab6256c48ca4abc6168abc880de07fba7247\",\n      metadataTypeId: 10,\n    },\n    {\n      type: \"struct sway_libs::upgradability::events::ProxyTargetSet\",\n      concreteTypeId:\n        \"1ddc0adda1270a016c08ffd614f29f599b4725407c8954c8b960bdf651a9a6c8\",\n      metadataTypeId: 11,\n    },\n  ],\n  metadataTypes: [\n    {\n      type: \"b256\",\n      metadataTypeId: 0,\n    },\n    {\n      type: \"enum standards::src5::AccessError\",\n      metadataTypeId: 1,\n      components: [\n        {\n          name: \"NotOwner\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n      ],\n    },\n    {\n      type: \"enum standards::src5::State\",\n      metadataTypeId: 2,\n      components: [\n        {\n          name: \"Uninitialized\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n        {\n          name: \"Initialized\",\n          typeId: 3,\n        },\n        {\n          name: \"Revoked\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n      ],\n    },\n    {\n      type: \"enum std::identity::Identity\",\n      metadataTypeId: 3,\n      components: [\n        {\n          name: \"Address\",\n          typeId: 8,\n        },\n        {\n          name: \"ContractId\",\n          typeId: 9,\n        },\n      ],\n    },\n    {\n      type: \"enum std::option::Option\",\n      metadataTypeId: 4,\n      components: [\n        {\n          name: \"None\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n        {\n          name: \"Some\",\n          typeId: 7,\n        },\n      ],\n      typeParameters: [7],\n    },\n    {\n      type: \"enum sway_libs::ownership::errors::InitializationError\",\n      metadataTypeId: 5,\n      components: [\n        {\n          name: \"CannotReinitialized\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n      ],\n    },\n    {\n      type: \"enum sway_libs::upgradability::errors::SetProxyOwnerError\",\n      metadataTypeId: 6,\n      components: [\n        {\n          name: \"CannotUninitialize\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n      ],\n    },\n    {\n      type: \"generic T\",\n      metadataTypeId: 7,\n    },\n    {\n      type: \"struct std::address::Address\",\n      metadataTypeId: 8,\n      components: [\n        {\n          name: \"bits\",\n          typeId: 0,\n        },\n      ],\n    },\n    {\n      type: \"struct std::contract_id::ContractId\",\n      metadataTypeId: 9,\n      components: [\n        {\n          name: \"bits\",\n          typeId: 0,\n        },\n      ],\n    },\n    {\n      type: \"struct sway_libs::upgradability::events::ProxyOwnerSet\",\n      metadataTypeId: 10,\n      components: [\n        {\n          name: \"new_proxy_owner\",\n          typeId: 2,\n        },\n      ],\n    },\n    {\n      type: \"struct sway_libs::upgradability::events::ProxyTargetSet\",\n      metadataTypeId: 11,\n      components: [\n        {\n          name: \"new_target\",\n          typeId: 9,\n        },\n      ],\n    },\n  ],\n  functions: [\n    {\n      inputs: [],\n      name: \"proxy_target\",\n      output:\n        \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Returns the target contract of the proxy contract.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Returns\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * [Option<ContractId>] - The new proxy contract to which all fallback calls will be passed or `None`.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Reads: `1`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"read\"],\n        },\n      ],\n    },\n    {\n      inputs: [\n        {\n          name: \"new_target\",\n          concreteTypeId:\n            \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\",\n        },\n      ],\n      name: \"set_proxy_target\",\n      output:\n        \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Change the target contract of the proxy contract.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Additional Information\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" This method can only be called by the `proxy_owner`.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Arguments\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * `new_target`: [ContractId] - The new proxy contract to which all fallback calls will be passed.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Reverts\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * When not called by `proxy_owner`.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Reads: `1`\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Write: `1`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"read\", \"write\"],\n        },\n      ],\n    },\n    {\n      inputs: [],\n      name: \"proxy_owner\",\n      output:\n        \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Returns the owner of the proxy contract.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Returns\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * [State] - Represents the state of ownership for this contract.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Reads: `1`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"read\"],\n        },\n      ],\n    },\n    {\n      inputs: [],\n      name: \"initialize_proxy\",\n      output:\n        \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Initializes the proxy contract.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Additional Information\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" This method sets the storage values using the values of the configurable constants `INITIAL_TARGET` and `INITIAL_OWNER`.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" This then allows methods that write to storage to be called.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" This method can only be called once.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Reverts\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * When `storage::SRC14.proxy_owner` is not [State::Uninitialized].\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Writes: `2`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"write\"],\n        },\n      ],\n    },\n    {\n      inputs: [\n        {\n          name: \"new_proxy_owner\",\n          concreteTypeId:\n            \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n        },\n      ],\n      name: \"set_proxy_owner\",\n      output:\n        \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Changes proxy ownership to the passed State.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Additional Information\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" This method can be used to transfer ownership between Identities or to revoke ownership.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Arguments\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * `new_proxy_owner`: [State] - The new state of the proxy ownership.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Reverts\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * When the sender is not the current proxy owner.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * When the new state of the proxy ownership is [State::Uninitialized].\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Reads: `1`\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Writes: `1`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"write\"],\n        },\n      ],\n    },\n  ],\n  loggedTypes: [\n    {\n      logId: \"4571204900286667806\",\n      concreteTypeId:\n        \"3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d\",\n    },\n    {\n      logId: \"2151606668983994881\",\n      concreteTypeId:\n        \"1ddc0adda1270a016c08ffd614f29f599b4725407c8954c8b960bdf651a9a6c8\",\n    },\n    {\n      logId: \"2161305517876418151\",\n      concreteTypeId:\n        \"1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893\",\n    },\n    {\n      logId: \"4354576968059844266\",\n      concreteTypeId:\n        \"3c6e90ae504df6aad8b34a93ba77dc62623e00b777eecacfa034a8ac6e890c74\",\n    },\n    {\n      logId: \"10870989709723147660\",\n      concreteTypeId:\n        \"96dd838b44f99d8ccae2a7948137ab6256c48ca4abc6168abc880de07fba7247\",\n    },\n    {\n      logId: \"10098701174489624218\",\n      concreteTypeId:\n        \"8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a\",\n    },\n  ],\n  messagesTypes: [],\n  configurables: [\n    {\n      name: \"INITIAL_TARGET\",\n      concreteTypeId:\n        \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      offset: 13368,\n    },\n    {\n      name: \"INITIAL_OWNER\",\n      concreteTypeId:\n        \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      offset: 13320,\n    },\n  ],\n};\nvar storageSlots = [\n  {\n    key: \"7bb458adc1d118713319a5baa00a2d049dd64d2916477d2688d76970c898cd55\",\n    value: \"0000000000000000000000000000000000000000000000000000000000000000\",\n  },\n  {\n    key: \"7bb458adc1d118713319a5baa00a2d049dd64d2916477d2688d76970c898cd56\",\n    value: \"0000000000000000000000000000000000000000000000000000000000000000\",\n  },\n  {\n    key: \"bb79927b15d9259ea316f2ecb2297d6cc8851888a98278c0a2e03e1a091ea754\",\n    value: \"0000000000000000000000000000000000000000000000000000000000000000\",\n  },\n  {\n    key: \"bb79927b15d9259ea316f2ecb2297d6cc8851888a98278c0a2e03e1a091ea755\",\n    value: \"0000000000000000000000000000000000000000000000000000000000000000\",\n  },\n];\nvar Src14OwnedProxy = class extends __Contract {\n  constructor(id, accountOrProvider) {\n    super(id, abi, accountOrProvider);\n  }\n};\n__publicField(Src14OwnedProxy, \"abi\", abi);\n__publicField(Src14OwnedProxy, \"storageSlots\", storageSlots);\n\n// src/types/Src14OwnedProxyFactory.ts\nimport { ContractFactory as __ContractFactory } from \"@fuel-ts/contract\";\nimport { decompressBytecode } from \"@fuel-ts/utils\";\nvar bytecode = decompressBytecode(\n  \"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\",\n);\nvar _Src14OwnedProxyFactory = class extends __ContractFactory {\n  constructor(accountOrProvider) {\n    super(\n      bytecode,\n      Src14OwnedProxy.abi,\n      accountOrProvider,\n      Src14OwnedProxy.storageSlots,\n    );\n  }\n  static deploy(wallet, options = {}) {\n    const factory = new _Src14OwnedProxyFactory(wallet);\n    return factory.deploy(options);\n  }\n};\nvar Src14OwnedProxyFactory = _Src14OwnedProxyFactory;\n__publicField(Src14OwnedProxyFactory, \"bytecode\", bytecode);\nexport { Src14OwnedProxy, Src14OwnedProxyFactory };\n//# sourceMappingURL=index.mjs.map\n"],"names":["getBuiltinVersions","parseVersion","version","major","minor","patch","v","versionDiffs","version1","version2","semver1","semver2","majorEq","minorEq","patchEq","checkFuelCoreVersionCompatibility","networkVersion","supportedVersion","versions","__defProp","__defNormalProp","obj","key","value","__publicField","ErrorCode","ErrorCode2","_FuelError","code","message","metadata","rawError","e","error","enumValues","name","VERSIONS","FuelError","__viteBrowserExternal","module","exports","assert","val","msg","inherits","ctor","superCtor","TempCtor","BN","number","base","endian","Buffer","require$$0","num","left","right","start","i","j","w","off","parseHex4Bits","string","index","c","parseHexByte","lowerBound","r","parseLength","parseBase","str","end","mul","b","len","limbLen","limbPow","total","mod","word","pow","dest","move","src","size","inspect","zeros","groupSizes","groupBases","padding","out","carry","groupSize","groupBase","ret","length","allocate","ArrayType","byteLength","reqLength","res","postfix","position","shift","t","hi","toBitArray","bit","wbit","width","a","bytesNeeded","bitsLeft","cmp","smallMulTo","self","lo","k","ncarry","rword","maxJ","comb10MulTo","o","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","isNegNum","q","bits","s","carryMask","newCarry","hint","extended","h","mask","maskedWords","mode","bhi","bhiBits","m","diff","qj","positive","div","dm","half","r2","p","acc","x","y","A","B","D","g","yp","xp","im","jm","x1","x2","delta","negative","Red","ctx","primes","MPrime","tmp","rlen","input","K256","output","outLen","prev","next","P224","P192","P25519","prime","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","Mont","u","this","DEFAULT_PRECISION","DEFAULT_MIN_PRECISION","DEFAULT_DECIMAL_UNITS","BnJs","bnValue","bnBase","bytesPadding","bytesLength","options","units","initialPrecision","initialMinPrecision","minPrecision","precision","formattedUnits","integerPart","fractionalPart","formattedInteger","formattedFractional","firstNonZeroIndex","valueString","valueLength","methodName","gcd","bn","valueToParse","valueUnits","valueDecimals","valueWithoutDecimals","decimals","amount","toFixed","groupRegex","trimmedDecimal","lastNonZeroIndex","keepChars","decimalPortion","toNumber","toHex","toBytes","formatUnits","format","max","numbers","cur","multiply","u8","u16","i32","fleb","fdeb","clim","freb","eb","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","l","le","co","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","d","bits16","shft","slc","ec","err","ind","nt","inflt","dat","st","buf","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","final","pos","bt","lm","lbt","dbt","tbts","type","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","n","lt","dt","lms","dms","lpos","sym","add","dsym","dend","wbits","wbits16","hTree","t2","et","i0","i1","i2","maxSym","tr","mbt","ln","lft","cst","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","flen","ftlen","dtlen","ll","llm","lcts","it","clct","dst","deo","dflt","lvl","plvl","pre","post","lst","opt","msk_1","head","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","pti","lin","din","crct","crc","cr","dopt","newDat","wbytes","gzh","fn","gzs","flg","zs","gzl","gzhl","gzipSync","data","opts","gunzipSync","td","tds","capitalizeString","chunkAndPadBytes","bytes","chunkSize","chunks","offset","chunk","lastChunk","remainingBytes","paddedChunkLength","newChunk","arrayify","copy","result","concatBytes","arrays","byteArrays","array","totalSize","accum","item","concatenated","object","concat","HexCharacters","hexlify","normalizeString","match","errMsg","FuelError2","TAI64_LEAP_SECONDS","TAI64_UNIX_OFFSET","msToSeconds","ms","secondsToMs","seconds","tai64ToUnixSeconds","tai64","unixSecondsToTai64","unixSeconds","tai64ToUnixMilliseconds","_DateTime","unixMilliseconds","date","DateTime","sleep","time","resolve","chainConfig_default","metadata_default","stateConfig_default","defaultSnapshotConfigs","defaultConsensusKey","isDefined","BN_0","BN_58","Alphabet","Lookup","getAlpha","letter","FuelError3","ErrorCode3","encodeBase58","_value","decodeBase58","dataSlice","FuelError4","ErrorCode4","toUtf8Bytes","stri","form","c2","FuelError5","ErrorCode5","pair","onError","reason","badCodepoint","helper","codePoints","codePoint","getUtf8CodePoints","_bytes","extraLength","overlongMask","nextChar","toUtf8String","compressBytecode","bytecodeAsBinary","bytecodeCompressBytes","bytecodeCompressGzipped","bytecodeCompressBinary","decompressBytecode","bytecodeAsBase64","bytecodeDecompressBinary","bytecodeDecompressDecoded","_","assertUnreachable","_x","isBytes","lengths","hash","exists","instance","checkFinished","min","crypto","u32","arr","createView","rotr","rotl","isLE","byteSwap","byteSwap32","utf8ToBytes","abytes","sum","pad","Hash","toStr","checkOpts","defaults","wrapConstructor","hashCons","hashC","randomBytes","setBigUint64","view","byteOffset","_32n","_u32_max","wh","wl","Chi","Maj","HashMD","blockLen","outputLen","padOffset","buffer","take","dataView","oview","state","to","finished","destroyed","SHA256_K","SHA256_IV","SHA256_W","SHA256","C","E","F","G","H","W15","W2","s0","s1","sigma1","T1","T2","sha256","HMAC","_key","assertHash","assertExists","assertBytes","oHash","iHash","hmac","pbkdf2Init","_password","_salt","_opts","dkLen","asyncTick","assertNumber","password","salt","DK","PRF","PRFSalt","pbkdf2Output","prfW","pbkdf2","Ti","ui","XorAndSalsa","pi","ii","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","BlockMix","tail","scryptInit","N","maxmem","onProgress","blockSize","blockSize32","memUsed","B32","V","blockMixCb","totalBlockMix","callbackPer","blockMixCnt","scryptOutput","scrypt","Pi","U32_MASK64","fromBig","split","Ah","Al","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","enableXOF","bufferOut","gen","keccak_256","Rho","Id","idxL","idxR","shifts","shiftsL","idx","shiftsR","Kl","Kr","f","group","R_BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","br","dr","el","er","rGroup","hbl","hbr","rl","rr","sr","ripemd160","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","params","dklen","scryptNoble","keccak256","_data","noble_ripemd160","bufferFromString","encoding","binaryString","bufferLength","startIndex","iterations","keylen","algo","algorithm","pb","crypto2","btoa","stringFromBuffer","binary","hexString","hex","ALGORITHM","keyFromPassword","saltBuffer","passBuffer","arrayify2","encrypt","iv","secret","dataString","dataBuffer","alg","encBuffer","decrypt","keystore","encryptedText","ptBuffer","decryptedData","encryptJsonWalletData","subtle","keyBuffer","ivBuffer","cryptoKey","encrypted","decryptJsonWalletData","decrypted","computeHmac","sha2562","sha5122","signature","hexlify2","randomUUID","api","browser_default","bufferFromString2","decrypt2","encrypt2","keyFromPassword2","randomBytes2","stringFromBuffer2","scrypt2","keccak2562","decryptJsonWalletData2","encryptJsonWalletData2","pbkdf22","computeHmac2","ripemd1602","randomUUID2","sha256AsBytes","uint64ToBytesBE","bigIntValue","hashMessage","Coder","encodedLength","U8_CODER_TYPE","U16_CODER_TYPE","U32_CODER_TYPE","U64_CODER_TYPE","U256_CODER_TYPE","RAW_PTR_CODER_TYPE","RAW_SLICE_CODER_TYPE","BOOL_CODER_TYPE","B256_CODER_TYPE","B512_CODER_TYPE","OPTION_CODER_TYPE","VEC_CODER_TYPE","BYTES_CODER_TYPE","STD_STRING_CODER_TYPE","STR_SLICE_CODER_TYPE","VOID_TYPE","optionRegEx","stringRegEx","arrayRegEx","structRegEx","enumRegEx","tupleRegEx","genericRegEx","fullNameRegExMatch","ENCODING_V1","WORD_SIZE","BYTES_32","UTXO_ID_LEN","ASSET_ID_LEN","CONTRACT_ID_LEN","ADDRESS_LEN","TX_LEN","TX_POINTER_LEN","MAX_BYTES","calculateVmTxMemory","maxInputs","SCRIPT_FIXED_SIZE","INPUT_COIN_FIXED_SIZE","isUint8Array","hasNestedOption","coders","node","ArrayCoder","coder","__privateAdd","_hasNestedOption","__privateSet","__privateGet","newOffset","decoded","B256Coder","encodedValue","B512Coder","bn2","toHex2","encodedLengths","BigNumberCoder","baseType","bn3","BooleanCoder","toBytes2","bn4","ByteCoder","lengthBytes","FuelError6","ErrorCode6","offsetAndLength","bn5","dataBytes","EnumCoder","caseIndexCoder","encodedValueSize","_EnumCoder_instances","_caseIndexCoder","_encodedValueSize","_shouldValidateLength","__privateMethod","encodeNativeEnum_fn","caseKey","empty","FuelError7","ErrorCode7","valueCoder","caseIndex","validCases","caseBytes","offsetAndCase","isNativeEnum_fn","decodeNativeEnum_fn","concat2","getLength","FuelError8","ErrorCode8","NumberCoder","toBytes3","toNumber2","OptionCoder","RawSliceCoder","FuelError9","ErrorCode9","bn6","internalCoder","decodedValue","StdStringCoder","FuelError10","ErrorCode10","bn7","StrSliceCoder","toUtf8Bytes2","FuelError11","ErrorCode11","bn8","toUtf8String2","StringCoder","FuelError12","ErrorCode12","toUtf8Bytes3","toUtf8String3","StructCoder","fieldName","fieldCoder","fieldValue","FuelError13","ErrorCode13","TupleCoder","FuelError14","ErrorCode14","concatBytes2","VecCoder","FuelError15","ErrorCode15","lengthCoder","concatBytes3","bn9","dataLength","optionOffset","getEncodingVersion","FuelError16","ErrorCode16","findTypeById","abi","typeId","findNonVoidInputs","inputs","findVectorBufferArgument","components","bufferComponent","bufferTypeArgument","ResolvedAbiType","argument","jsonABIType","FuelError17","ErrorCode17","arg","typeParameters","typeParametersAndArgsMap","typeParameter","typeParameterIndex","args","argType","implicitTypeParameters","itp","implicitGenericParametersParam","implicitGenericParameters","prefix","content","strMatch","arrayMatch","typeArgumentsSignature","componentsSignature","VoidCoder","getCoders","getCoder2","component","getCoder","resolvedAbiType","_options","stringMatch","FuelError18","ErrorCode18","arrayElementCoder","itemCoder","coderName","getCoderForEncoding","FuelError19","ErrorCode19","AbiCoder","getFunctionInputs","jsonAbi","isMandatory","padValuesWithUndefined","values","paddedValues","FunctionFragment","inputsSignatures","functionSignature","hashedFunctionSignature","bn10","mandatoryInputLength","FuelError20","ErrorCode20","argumentValues","arrayify3","nonVoidInputs","decodedOffset","storageAttribute","attr","findTypeByConcreteId","types","id","findConcreteTypeById","finsertTypeIdByConcreteTypeId","concreteType","parseComponents","parseFunctionTypeArguments","cTypeId","parseConcreteType","concreteTypeId","concrete","typeArguments","transpileAbi","functions","configurables","conf","loggedTypes","log","Interface","nameOrSignatureOrSelector","FuelError21","ErrorCode21","functionFragment","logId","loggedType","arrayify4","configurable","typeArg","isB256","address","isPublicKey","isEvmAddress","normalizeB256","isAddress","addressify","addressLike","getRandomB256","toB256AddressEvm","b256","evmBytes","paddedBytes","padFirst12BytesOfEvmAddress","fromEvmAddressToB256","fromPublicKeyToB256","publicKey","fromDynamicInputToB256","Address","b256Address","other","evmAddress","addressParsed","addressHex","checksum","byte","ha","hb","ByteArrayCoder","paddingLength","_paddingLength","parts","TxPointerCoder","blockHeight","txIndex","InputType","InputType2","InputCoinCoder","Coder2","NumberCoder2","txID","outputIndex","owner","assetId","txPointer","witnessIndex","predicateGasUsed","predicateLength","predicateDataLength","predicate","InputContractCoder","balanceRoot","stateRoot","InputMessageCoder","messageData","sender","recipient","nonce","InputCoder","OutputType","OutputType2","OutputCoinCoder","Coder3","B256Coder2","BigNumberCoder2","concat3","OutputContractCoder","NumberCoder3","inputIndex","OutputChangeCoder","OutputVariableCoder","OutputContractCreatedCoder","contractId","OutputCoder","PolicyType","PolicyType2","sortPolicies","policies","validateDuplicatedPolicies","seenTypes","policy","PoliciesCoder","Coder4","sortedPolicies","BigNumberCoder3","NumberCoder4","concat4","policyTypes","tip","nextOffset","witnessLimit","maturity","maxFee","ReceiptType","ReceiptType2","getMintedAssetId","subId","contractIdBytes","subIdBytes","concat5","createAssetId","getMessageId","BigNumberCoder4","StorageSlotCoder","StructCoder2","B256Coder3","UpgradePurposeTypeEnum","UpgradePurposeTypeEnum2","UpgradePurposeCoder","Coder5","upgradePurposeType","NumberCoder5","B256Coder4","concat6","WitnessCoder","Coder6","NumberCoder6","concat7","TransactionType","TransactionType2","TransactionScriptCoder","Coder7","BigNumberCoder5","B256Coder5","NumberCoder7","concat8","scriptGasLimit","receiptsRoot","scriptLength","scriptDataLength","inputsCount","outputsCount","witnessesCount","script","scriptData","outputs","TransactionCreateCoder","bytecodeWitnessIndex","storageSlotsCount","storageSlots","TransactionMintCoder","inputContract","outputContract","mintAmount","mintAssetId","TransactionUpgradeCoder","upgradePurpose","TransactionUploadCoder","root","subsectionIndex","subsectionsNumber","proofSetCount","proofSet","TransactionBlobCoder","blobId","TransactionCoder","UtxoIdCoder","StructCoder3","B256Coder6","NumberCoder8","_isPlaceholder","_curry1","f1","_cloneRegExp","pattern","_clone","deep","map","_ObjectMap","_isPrimitive","copiedValue","cachedCopy","param","hashedKey","bucket","element","clone","abool","title","hexes","bytesToHex","numberToHexUnpadded","hexToNumber","asciis","asciiToBase16","char","hexToBytes","hl","ai","n1","n2","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","expectedLength","equalBytes","isPosBig","inRange","aInRange","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","reset","reseed","seed","pred","validatorFns","validateObject","validators","optValidators","checkField","isOptional","checkVal","notImplemented","memoized","computed","defaultJsonSerializer","uppercase","HeadersInstanceToPlainObject","headers","parseRequestArgs","documentOrOptions","variables","requestHeaders","parseRawRequestArgs","queryOrOptions","parseBatchRequestArgs","documentsOrOptions","devAssert","condition","isObjectLike","invariant","LineRegExp","getLocation","source","lastLineStart","line","printLocation","location","printSourceLocation","sourceLocation","firstLineColumnOffset","body","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","lines","locationLine","subLineIndex","subLineColumnNum","subLines","printPrefixedLines","subLine","existingLines","padLen","toNormalizedOptions","firstArg","GraphQLError","rawArgs","_this$nodes","_nodeLocations$","_ref","nodes","positions","path","originalError","extensions","undefinedIfEmpty","nodeLocations","loc","originalExtensions","formattedError","syntaxError","description","Location","startToken","endToken","Token","kind","column","QueryDocumentKeys","kindValues","isNode","maybeNode","maybeKind","OperationTypeNode","DirectiveLocation","Kind","isWhiteSpace","isDigit","isLetter","isNameStart","isNameContinue","dedentBlockStringLines","_firstNonEmptyLine2","commonIndent","firstNonEmptyLine","lastNonEmptyLine","_firstNonEmptyLine","indent","leadingWhitespace","printBlockString","escapedValue","isSingleLine","forceLeadingNewLine","hasTrailingTripleQuotes","hasTrailingQuote","hasTrailingSlash","forceTrailingNewline","printAsMultipleLines","skipLeadingNewLine","TokenKind","Lexer","startOfFileToken","token","nextToken","readNextToken","isPunctuatorTokenKind","isUnicodeScalarValue","isSupplementaryCodePoint","isLeadingSurrogate","isTrailingSurrogate","printCodePointAt","lexer","createToken","col","bodyLength","readComment","readBlockString","readString","readNumber","readName","firstCode","isFloat","readDigits","chunkStart","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","point","readHexDigit","read16BitHexCode","trailingCode","lineStart","currentLine","blockLines","MAX_ARRAY_LENGTH","MAX_RECURSIVE_DEPTH","formatValue","seenValues","formatObjectValue","previouslySeenValues","isJSONable","jsonValue","formatArray","formatObject","entries","getObjectTag","remaining","items","tag","isProduction","instanceOf","constructor","_value$constructor","className","valueClassName","stringifiedValue","Source","locationOffset","isSource","parse","Parser","sourceObj","hasDescription","keywordToken","operation","operationToken","nameOrAlias","alias","isConst","hasTypeCondition","varName","directives","innerType","operationTypes","interfaces","fields","defaultValue","getTokenDesc","repeatable","locations","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","maxTokens","printString","escapedRegExp","escapedReplacer","escapeSequences","BREAK","visit","visitor","visitorKeys","enterLeaveMap","getEnterLeaveForKind","stack","inArray","keys","edits","parent","ancestors","isLeaving","isEdited","editOffset","editKey","editValue","arrayKey","_enterLeaveMap$get","_enterLeaveMap$get2","visitFn","_node$kind","kindVisitor","print","ast","printDocASTReducer","MAX_LINE_LENGTH","join","varDefs","wrap","variable","selections","block","selectionSet","argsLine","typeCondition","variableDefinitions","isBlockString","hasMultilineItems","maybeArray","separator","_maybeArray$filter$jo","maybeString","_maybeArray$some","extractOperationName","document","operationName","operationDefinitions","definition","resolveRequestDocument","parsedDocument","ClientError","response","request","__global__","global","__globalThis__","globalThis","support","isDataView","viewClasses","isArrayBufferView","normalizeName","normalizeValue","iteratorFor","iterator","Headers","header","oldValue","callback","thisArg","consumed","fileReaderReady","reader","reject","readBlobAsArrayBuffer","blob","promise","readBlobAsText","readArrayBufferAsText","chars","bufferClone","Body","rejected","isConsumed","decode","methods","normalizeMethod","method","upcased","Request","reParamSearch","reQueryString","parseHeaders","rawHeaders","preProcessedHeaders","Response","bodyInit","redirectStatuses","url","status","fetch","init","xhr","abortXhr","fixUrl","resolveHeaders","oHeaders","CrossFetch","CrossFetch.Headers","cleanQuery","buildRequestConfig","params_","search","payload","currentQuery","createHttpMethodFetcher","query","fetchOptions","middleware","queryParams","createRequestBody","urlResolved","initResolved","urlNew","initNew","GraphQLClient","requestConfig","rawRequestOptions","crossFetch","requestMiddleware","responseMiddleware","makeRequest","callOrIdentity","variablesAndRequestHeaders","requestOptions","batchRequestOptions","queries","fetcher","isBatchingQuery","getResult","successfullyReceivedData","successfullyPassedErrorPolicy","rest","errorResult","jsonSerializer","jsonSerializer_","contentType","__assign","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","cacheKeyFromLoc","processFragments","seenKeys","definitions","fragmentDefinition","fragmentName","sourceKey","sourceKeySet","stripLoc","doc","workSet","parseDocument","cacheKey","parsed","gql","literals","_i","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","extras","gql_1","ZeroBytes32","EmptyRoot","CONTRACT_MAX_SIZE","MAX_WITNESSES","MAX_SCRIPT_LENGTH","MAX_SCRIPT_DATA_LENGTH","MAX_STATIC_CONTRACTS","MAX_PREDICATE_LENGTH","MAX_PREDICATE_DATA_LENGTH","FAILED_REQUIRE_SIGNAL","FAILED_TRANSFER_TO_ADDRESS_SIGNAL","FAILED_ASSERT_EQ_SIGNAL","FAILED_ASSERT_SIGNAL","FAILED_ASSERT_NE_SIGNAL","FAILED_UNKNOWN_SIGNAL","PANIC_REASONS","PANIC_DOC_URL","wasm$1","cachedTextDecoder","cachedUint8ArrayMemory0","getUint8ArrayMemory0","getStringFromWasm0","ptr","_assertClass","klass","gm_args","ra","Instruction","gtf_args","rb","wdcm_args","rc","CompareArgs","ptr0","wqcm_args","wdop_args","MathArgs","wqop_args","wdml_args","MulArgs","wqml_args","wddv_args","DivArgs","wqdv_args","lhs","rhs","and","eq","exp","gt","mlog","mroo","mod_","move_","not","or","sll","srl","sub","xor","mldv","mul_lhs","mul_rhs","divisor","retd","addr","aloc","mcl","dst_addr","mcp","src_addr","meq","lhs_addr","rhs_addr","bhsh","heigth","bhei","burn","sub_id_addr","call","target_struct","fwd_coins","asset_id_addr","fwd_gas","ccp","contract_id_addr","croo","csiz","cb","ldc","logd","mint","rvrt","scwq","key_addr","lenq","srw","srwq","sww","swwq","tro","output_index","eck1","sig_addr","msg_hash_addr","ecr1","ed19","pub_key_addr","msg_addr","msg_len","k256","s256","noop","flag","bal","jmp","abs_target","jne","smo","recipient_addr","data_addr","data_len","coins","addi","andi","divi","expi","modi","muli","ori","slli","srli","subi","xori","jnei","cond_lhs","cond_rhs","lb","lw","sb","sw","mcpi","gtf","selector","mcli","count","gm","movi","jnzi","cond_nz","jmpf","dynamic","fixed","jmpb","jnzf","jnzb","jnef","jneb","ji","cfei","cfsi","cfe","cfs","pshl","bitmask","pshh","popl","poph","wdcm","flags","wqcm","wdop","wqop","wdml","wqml","wddv","wqdv","wdmd","wqmd","wdam","add_lhs","add_rhs","modulo","wqam","wdmm","wqmm","ecal","bsiz","blob_id_ptr","bldd","dst_ptr","cachedDataViewMemory0","getDataViewMemory0","getArrayU8FromWasm0","GTFArgs","CompareMode","PanicReason","MathOp","GMArgs","ADDFinalization","ADD","RegId","ptr1","ptr2","ADDIFinalization","ADDI","Imm12","ALOCFinalization","ALOC","ANDFinalization","AND","ANDIFinalization","ANDI","BALFinalization","BAL","BHEIFinalization","BHEI","BHSHFinalization","BHSH","BLDDFinalization","BLDD","ptr3","BSIZFinalization","BSIZ","BURNFinalization","BURN","CALLFinalization","CALL","CBFinalization","CB","CCPFinalization","CCP","CFEFinalization","CFE","CFEIFinalization","CFEI","Imm24","CFSFinalization","CFS","CFSIFinalization","CFSI","CROOFinalization","CROO","CSIZFinalization","CSIZ","CompareArgsFinalization","arg0","Imm06","DIVFinalization","DIV","DIVIFinalization","DIVI","DivArgsFinalization","ECALFinalization","ECAL","ECK1Finalization","ECK1","ECR1Finalization","ECR1","ED19Finalization","ED19","EQFinalization","EQ","EXPFinalization","EXP","EXPIFinalization","EXPI","FLAGFinalization","FLAG","GMFinalization","GM","Imm18","GTFinalization","GT","GTFFinalization","GTF","Imm06Finalization","Imm12Finalization","Imm18Finalization","Imm24Finalization","InstructionFinalization","retptr","r0","r1","v1","JIFinalization","JI","JMPFinalization","JMP","JMPBFinalization","JMPB","JMPFFinalization","JMPF","JNEFinalization","JNE","JNEBFinalization","JNEB","JNEFFinalization","JNEF","JNEIFinalization","JNEI","JNZBFinalization","JNZB","JNZFFinalization","JNZF","JNZIFinalization","JNZI","K256Finalization","LBFinalization","LB","LDCFinalization","LDC","LOGFinalization","LOG","LOGDFinalization","LOGD","LTFinalization","LT","LWFinalization","LW","MCLFinalization","MCL","MCLIFinalization","MCLI","MCPFinalization","MCP","MCPIFinalization","MCPI","MEQFinalization","MEQ","MINTFinalization","MINT","MLDVFinalization","MLDV","MLOGFinalization","MLOG","MODFinalization","MOD","MODIFinalization","MODI","MOVEFinalization","MOVE","MOVIFinalization","MOVI","MROOFinalization","MROO","MULFinalization","MUL","MULIFinalization","MULI","MathArgsFinalization","MulArgsFinalization","NOOPFinalization","NOOP","NOTFinalization","NOT","ORFinalization","OR","ORIFinalization","ORI","POPHFinalization","POPH","POPLFinalization","POPL","PSHHFinalization","PSHH","PSHLFinalization","PSHL","PanicInstructionFinalization","PanicInstruction","instruction","RETFinalization","RET","RETDFinalization","RETD","RVRTFinalization","RVRT","RegIdFinalization","S256Finalization","S256","SBFinalization","SB","SCWQFinalization","SCWQ","SLLFinalization","SLL","SLLIFinalization","SLLI","SMOFinalization","SMO","SRLFinalization","SRL","SRLIFinalization","SRLI","SRWFinalization","SRW","SRWQFinalization","SRWQ","SUBFinalization","SUB","SUBIFinalization","SUBI","SWFinalization","SW","SWWFinalization","SWW","SWWQFinalization","SWWQ","TIMEFinalization","TIME","TRFinalization","TR","TROFinalization","TRO","WDAMFinalization","WDAM","WDCMFinalization","WDCM","WDDVFinalization","WDDV","WDMDFinalization","WDMD","WDMLFinalization","WDML","WDMMFinalization","WDMM","WDOPFinalization","WDOP","WQAMFinalization","WQAM","WQCMFinalization","WQCM","WQDVFinalization","WQDV","WQMDFinalization","WQMD","WQMLFinalization","WQML","WQMMFinalization","WQMM","WQOPFinalization","WQOP","XORFinalization","XOR","XORIFinalization","XORI","__wbg_load","imports","__wbg_get_imports","arg1","__wbg_finalize_init","__wbg_init","initSync","module_or_path","_loadWasmModule","sync","filepath","raw","rawLength","wasm","initWasm","_3n","_4n","_5n","_8n","power","pow2","invert","tonelliShanks","P","legendreC","Q","S","Z","p1div4","Fp","Q1div2","ge","FpSqrt","c1","nv","FIELD_FIELDS","validateField","field","initial","FpPow","FpInvertBatch","nums","lastMultiplied","inverted","nLength","nBitLength","_nBitLength","nByteLength","Field","ORDER","redef","BITS","BYTES","sqrtP","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","fieldLen","minLen","reduced","pointPrecomputes","pointWindowSizes","wNAF","constTimeNegate","neg","validateW","W","windows","elm","points","window","precomputes","maxNumber","shiftBy","offset1","offset2","cond1","cond2","transform","comp","pippenger","scalars","MASK","buckets","lastBits","scalar","resI","sumI","validateBasic","curve","validateSigVerOpts","validatePointOpts","ut.validateObject","endo","b2n","h2b","ut","DER","dataLen","ut.numberToHexUnpadded","lenLen","first","isLong","int","tlv","ut.abytes","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","sig","seq","weierstrassPoints","CURVE","Fn","mod.Field","_isCompressed","ut.concatBytes","fromBytes","weierstrassEquation","x3","isWithinCurveOrder","ut.inRange","normPrivateKeyToScalar","wrapPrivateKey","ut.isBytes","ut.bytesToHex","ut.bytesToNumberBE","mod.mod","ut.aInRange","assertPrjPoint","Point","toAffineMemo","iz","is0","ax","ay","zz","assertValidMemo","px","py","pz","toInv","privateKey","wnaf","X1","Y1","Z1","X2","Y2","Z2","U1","U2","X3","Y3","Z3","t0","t1","t3","t4","t5","sc","I","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","cofactor","isTorsionFree","clearCofactor","isCompressed","_bits","validateOpts","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","mod.invert","cat","y2","sqrtError","isYOdd","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","from","Signature","recovery","msgHash","rec","bits2int_modN","radj","ir","u1","u2","ut.hexToBytes","utils","mod.getMinHashLength","mod.mapHashToField","getPublicKey","isProbPub","getSharedSecret","privateA","publicB","bits2int","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","lowS","prehash","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","sign","privKey","ut.createHmacDrbg","verify","sg","_sig","derError","is","getHash","msgs","createCurve","defHash","create","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b11","b22","b44","b88","b176","b220","b223","secp256k1","POW_2_128","ReflectApply","target","receiver","ReflectOwnKeys","ProcessEmitWarning","warning","NumberIsNaN","EventEmitter","eventsModule","once","defaultMaxListeners","checkListener","listener","_getMaxListeners","that","doError","events","handler","listeners","arrayClone","_addListener","prepend","existing","onceWrapper","_onceWrap","wrapped","list","originalListener","spliceOne","_listeners","unwrap","evlistener","unwrapListeners","emitter","listenerCount","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","wrapListener","EMPTY","Node","hash5","node_default","hashLeaf","hashNode","calcRoot","hashed","pNodes","odd","leafPrefix","nodePrefix","hashLeaf2","hash2","hashNode2","parseLeaf","parseNode","isLeaf","SparseCompactMerkleProof","SideNodes","NonMembershipLeafData","Bitmask","NumSideNodes","SiblingData","sparseCompactMerkleProof_default","SparseMerkleProof","sideNodes","sparseMerkleProof_default","ZERO","MAX_HEIGHT","getBitAtFromMSB","slicedData","reverseSideNodes","reversedSideNodes","countCommonPrefix","data1","data2","compactProof","proof","compactedSideNodes","SparseMerkleTree","currentData","leftNode","rightNode","nodeHash","sideNode","siblingData","oldLeafHash","oldLeafData","actualPath","currentHash","sideNodeValue","nonPlaceholderReached","hash4","commonPrefixCount","offsetOfSideNodes","newRoot","leafHash","leafData","nonEmptySideNodes","nonMembershipLeafData","__accessCheck","member","getter","setter","CHAIN_IDS","getDefaultChainId","networkType","getAssetNetwork","asset","chainId","getAssetWithNetwork","assetRest","chainIdToUse","assetNetwork","getAssetEth","getAssetFuel","DELIMITER_PATH","trimRegex","trimPath","urlJoin","baseUrl","paths","hasBaseUrl","rootPath","allPaths","resolveIconPaths","assets2","basePath","fuelAssetsBaseUrl","rawAssets","assets","networks","slug","buildQueryString","parameters","getAssetById","network","getAssetsByOwner","pagination","last","queryString","coinQuantityfy","coinQuantityLike","bnAmount","addAmountToCoinQuantities","coinQuantities","assetIdx","coinQuantity","SubmittedStatusFragmentDoc","ReceiptFragmentDoc","SuccessStatusFragmentDoc","SuccessStatusWithBlockIdFragmentDoc","MalleableTransactionFieldsFragmentDoc","FailureStatusFragmentDoc","FailureStatusWithBlockIdFragmentDoc","SqueezedOutStatusFragmentDoc","TransactionStatusSubscriptionFragmentDoc","TransactionStatusFragmentDoc","TransactionFragmentDoc","TransactionRawPayloadFragmentDoc","InputEstimatePredicatesFragmentDoc","TransactionEstimatePredicatesFragmentDoc","DryRunFailureStatusFragmentDoc","DryRunSuccessStatusFragmentDoc","DryRunTransactionStatusFragmentDoc","DryRunTransactionExecutionStatusFragmentDoc","BlockFragmentDoc","CoinFragmentDoc","MessageCoinFragmentDoc","MessageFragmentDoc","GetMessageFragmentDoc","MessageProofFragmentDoc","TxParametersFragmentDoc","PredicateParametersFragmentDoc","ScriptParametersFragmentDoc","ContractParametersFragmentDoc","FeeParametersFragmentDoc","DependentCostFragmentDoc","GasCostsFragmentDoc","ConsensusParametersFragmentDoc","ChainInfoFragmentDoc","ContractBalanceFragmentDoc","PageInfoFragmentDoc","NodeInfoFragmentDoc","RelayedTransactionStatusFragmentDoc","GetVersionDocument","GetNodeInfoDocument","GetChainDocument","GetChainAndNodeInfoDocument","GetTransactionDocument","GetTransactionWithReceiptsDocument","GetTransactionsDocument","GetTransactionsByOwnerDocument","EstimatePredicatesDocument","GetLatestBlockDocument","GetLatestBlockHeightDocument","GetBlockDocument","GetBlockWithTransactionsDocument","GetBlocksDocument","GetCoinDocument","GetCoinsDocument","GetCoinsToSpendDocument","GetContractDocument","GetContractBalanceDocument","GetBalanceDocument","GetLatestGasPriceDocument","EstimateGasPriceDocument","GetBalancesDocument","GetMessagesDocument","DaCompressedBlockDocument","GetMessageProofDocument","GetMessageStatusDocument","GetRelayedTransactionStatusDocument","DryRunDocument","SubmitDocument","ProduceBlocksDocument","GetMessageByNonceDocument","IsUserAccountDocument","GetConsensusParametersVersionDocument","SubmitAndAwaitStatusDocument","StatusChangeDocument","getSdk","requester","mapGqlErrorMessage","mapGqlErrorWithIncompatibleNodeVersion","incompatibleNodeVersionMessage","assertGqlResponseHasNoErrors","errors","mappedErrors","errorMessage","_FuelGraphqlSubscriber","stream","fetchFn","errorReader","resultReader","done","text","regex","matches","FuelGraphqlSubscriber","cache","ResourceCache","ttl","transactionId","resources","currentTime","existingResources","utxo","allResources","resource","resourceData","inputify","predicateData","hexlify3","outputify","hexlify4","ZeroBytes322","isMessageCoin","isRawCoin","isRawMessage","isCoin","isMessage","doesReceiptHaveMissingOutputVariables","receipt","doesReceiptHaveMissingContractId","getReceiptsWithMissingData","receipts","memo","hexOrZero","ZeroBytes323","assembleReceiptByType","receiptType","rd","digest","messageId","hexlify5","DEFAULT_BLOCK_EXPLORER_URL","getPathFromInput","buildBlockExplorerUrl","blockExplorerUrl","providerUrl","txId","blockNumber","explorerUrl","customInputParams","definedValues","hasAnyDefinedValues","inputKeys","pathGeneratedFromInputParams","trimSlashes","cleanPath","cleanBlockExplorerUrl","cleanProviderUrl","encodedProviderUrl","protocol","providerUrlProtocol","getGasUsedFromReceipts","resolveGasDependentCosts","byteSize","gasDependentCost","dependentValue","gasUsedByInputs","txBytesSize","gasCosts","witnessCache","chargeableInputs","vmInitializationCost","getMinGas","gasPerByte","metadataGas","vmInitGas","bytesGas","inputsGas","getMaxGas","witnessesLength","minGas","gasLimit","maxGasPerTx","remainingAllowedWitnessGas","maxGas","calculateMetadataGasForTxCreate","stateRootSize","contractBytesSize","contractRootGas","stateRootGas","txIdGas","contractIdInputSize","contractIdGas","calculateMetadataGasForTxScript","calculateMetadataGasForTxBlob","witnessBytesSize","blobLen","calculateMetadataGasForTxUpgrade","consensusSize","consensusLen","calculateMetadataGasForTxUpload","subsectionSize","subsectionsSize","subsectionLen","subsectionsLen","calculateMinGasForTxUpload","baseMinGas","additionalStoragePerByte","calculateGasFee","gas","gasPrice","priceFactor","hexlify6","normalizeJSON","assemblePanicError","statusReason","stringify","assembleRevertError","logs","revertReceipt","ReceiptType3","reasonHex","lastLog","lastButOneLog","sufix","FAILED_TRANSFER_TO_ADDRESS_SIGNAL2","extractTxError","isPanic","isRevert","ChangeOutputCollisionError","NoWitnessAtIndexError","NoWitnessByOwnerError","isRequestInputCoin","isRequestInputMessage","isRequestInputMessageWithoutData","isRequestInputCoinOrMessage","isRequestInputResource","getRequestInputResourceOwner","isRequestInputResourceFromOwner","getAssetAmountInRequestInputs","baseAsset","cacheRequestInputsResources","cache2","cacheRequestInputsResourcesFromOwner","getBurnableAssetCount","baseAssetId","transactionRequest","coinInputs","changeOutputs","validateTransactionForAssetBurn","enableAssetBurn","witnessify","hexlify7","BaseTransactionRequest","witnesses","req","ZeroBytes324","ownerAddress","witness","account","accounts","InputType3","OutputType3","found","hexlify8","coin","quantities","quantity","_gasCosts","chainInfo","consensusParameters","wit","resourcesOwner","findAssetInput","updateAssetInput","assetInput","usedQuantity","UTXO_ID_LEN2","removedIndex","inputsToExtractGasUsed","correspondingInput","hashTransaction","transaction","ZeroBytes325","inputClone","clone2","InputType4","outputClone","OutputType4","chainIdBytes","concatenatedData","TransactionCoder2","BlobTransactionRequest","clone3","baseTransaction","getStorageValue","arrayify5","storageSlotify","storageSlot","hexlify9","CreateTransactionRequest","TransactionType3","hexlify10","ZeroBytes326","clone4","OutputType5","arrayify6","returnZeroScript","arrayify7","withdrawScript","ScriptTransactionRequest","TransactionType4","bn11","arrayify8","clone5","signatureCallback","txCost","ZeroBytes327","hexlify11","InputType5","OutputType6","numberOfVariables","outputsNumber","contract","contractAddress","addressify2","abiInterface","UpgradeTransactionRequest","TransactionType5","clone6","consensus","bytecodeRoot","hexlify12","UploadTransactionRequest","subsection","TransactionType6","ZeroBytes328","clone7","subsectionBytecode","hexlify13","arrayify9","bytecode","AbstractScriptRequest","transactionRequestify","TransactionType7","isTransactionTypeScript","request2","isTransactionTypeCreate","isTransactionTypeBlob","isTransactionTypeUpgrade","isTransactionTypeUpload","calculateTXFeeForSummary","rawPayload","feeParams","bn12","gasPriceFactor","transactionBytes","arrayify10","TransactionCoder3","TransactionType8","getFunctionCall","Interface2","callFunctionSelector","encodedArgs","argumentsProvided","getInputsByTypes","getInputsByType","getInputsCoin","InputType6","getInputsMessage","getInputsCoinAndMessage","isInputCoin","getInputsContract","findCoinInput","aggregateInputsAmountsByAssetAndOwner","aggregated","ownersMap","ownerBalance","findMessageInput","getInputFromAssetId","isBaseAsset","coinInput","getInputContractFromIndex","contractInput","getInputAccountAddress","getOutputsByType","getOutputsContractCreated","OutputType7","getOutputsCoin","getOutputsChange","getOutputsContract","getOutputsVariable","TransactionTypeName","TransactionTypeName2","TransactionStatus","TransactionStatus2","OperationName","OperationName2","AddressType","AddressType2","ChainName","ChainName2","getReceiptsByType","getTransactionTypeName","transactionType","TransactionType9","isType","isTypeMint","isTypeCreate","isTypeScript","isTypeUpgrade","isTypeUpload","isTypeBlob","hasSameAssetId","getReceiptsCall","ReceiptType4","getReceiptsMessageOut","mergeAssets","op1","op2","assets1","assetMap","existingAsset","bn13","isSameOperation","_f","_g","mergeAssetsSent","toAdd","mergeCalls","mergeOperations","addOperation","operations","existingIndex","op","getReceiptsTransferOut","getWithdrawFromFuelOperations","prevWithdrawFromFuelOps","inputAddress","getContractCalls","abiMap","getAssetsSent","processCallReceipt","ZeroBytes329","calls","getContractCallOperations","contractCallReceipts","extractTransferOperationFromReceipt","contractInputs","toAddress","fromAddress","toType","change","getTransferOperations","coinOutputs","txPayers","selectedPayer","fallbackPayer","payedAmount","transferReceipts","transferOutReceipts","getPayProducerOperations","getContractCreatedOperations","contractCreatedOutputs","contractCreatedOutput","getOperations","processGqlReceipt","gqlReceipt","extractMintedAssetsFromReceipts","mintedAssets","ReceiptType5","extractBurnedAssetsFromReceipts","burnedAssets","getTransactionStatusName","gqlStatus","processGraphqlStatus","gqlTransactionStatus","blockId","totalFee","totalGas","isStatusFailure","isStatusSuccess","isStatusPending","bn14","getTotalFeeFromStatus","assembleTransactionSummary","gasUsed","hexlify14","typeName","bn15","PolicyType3","fee","getDecodedLogs","mainAbi","externalAbis","ReceiptType6","interfaceToUse","Interface3","decodedLog","mapGqlOutputsToTxOutputs","bn16","OutputType8","TransactionResponse","tx","provider","abis","submitTxSubscription","gqlTransaction","arrayify11","subscription","statusChange","transactionWithReceipts","TransactionCoder4","contractsAbiMap","sub2","transactionSummary","transactionResult","getWaitDelay","retryAttemptNum","duration","autoRetryFetch","_error","retryNum","delay","validatePaginationArgs","paginationLimit","inputArgs","after","before","MAX_RETRIES","RESOURCES_PAGE_SIZE_LIMIT","TRANSACTIONS_PAGE_SIZE_LIMIT","BLOCKS_PAGE_SIZE_LIMIT","DEFAULT_RESOURCE_CACHE_TTL","GAS_USED_MODIFIER","processGqlChain","chain","daHeight","contractParams","predicateParams","scriptParams","txParams","bn17","_cacheInputs","cacheInputs_fn","_Provider","rawUrl","urlWithoutAuth","authHeaders","FUELS","resourceCacheTTL","isDefined2","retryOptions","timeout","signal","fullRequest","parsedUrl","username","maxGasPerPredicate","ignoreCache","nodeInfo","isMajorSupported","isMinorSupported","gqlClient","requestInit","graphQlResponse","executeQuery","vars","opDefinition","customOperations","blobParams","updatedVariables","document2","gql2","nodeVersion","height","processedNodeInfo","processedChain","all","maxOutputs","transactionRequestLike","estimateTxDependencies","encodedTransaction","hexlify15","utxoValidation","dryRunStatuses","rawReceipts","dryRunStatus","arrayify12","BN2","gasPriceParam","missingContractIds","outputVariables","attempt","missingOutputVariables","missingOutputContractIds","Address2","transactionRequests","results","allRequests","clone8","serializedTransactionsMap","transactionsToProcess","encodedTransactions","dryRunResults","nextRoundTransactions","requestIdx","hasMissingOutputs","previous","minFee","processedReceipts","txRequestClone","updateMaxFee","isScriptTransaction","signedRequest","addedSignatures","lengthBefore","pristineGasUsed","paginationArgs","edges","pageInfo","excludedIds","excludeInput","cached","coinsQuery","maxPerAsset","blobIds","blobs","idOrHeight","latestBlock","transactions","TransactionCoder5","daCompressedBlock","contractBalance","balance","InputMessageCoder2","commitBlockId","commitBlockHeight","inputObject","messageProof","messageBlockHeader","commitBlockHeader","blockProof","latestGasPrice","blockHorizon","estimateGasPrice","startTime","latestBlockHeight","DateTime2","rawMessage","relayedTransactionId","relayedTransactionStatus","Provider","inputsToCache","InputType7","getTransactionSummary","decodedTransaction","TransactionCoder6","arrayify13","txReceipts","bn18","getTransactionSummaryFromRequest","getTransactionsSummaries","filters","validPaginationParams","transactionsByOwner","edge","mergeQuantities","resultMap","addToMap","AbstractAccount","formatTransferToContractScriptData","transferParams","numberCoder","transferParam","encoded","Address3","arrayify14","assembleTransferToContractScript","asm.initWasm","asm.gtf","asm.GTFArgs","asm.addi","asm.lw","asm.tr","asm.ret","MAX_FUNDING_ATTEMPTS","Account","connector","Address4","assetIdToFetch","estimatedPredicates","requiredQuantities","requiredInBaseAsset","bn19","requiredQuantitiesWithFee","quantitiesDict","missingQuantities","owned","required","needsToBeFunded","fundingAttempts","requestToReestimate2","clone9","newFee","totalBaseAssetOnInputs","totalBaseAssetRequiredWithFee","requestToReestimate","destination","contractTransferParams","defaultAssetId","hexlify16","recipientAddress","recipientDataArray","arrayify15","amountDataArray","coinOutputsQuantities","transactionFeeForDryRun","InputType8","onBeforeSend","skipCustomFee","UTXO_ID_LEN3","costParams","setGasLimit","setMaxFee","isDefined3","Signer","privateKeyBytes","hexlify17","Address5","arrayify16","p0","p1","signedMessageBytes","recoveryParam","entropy","randomBytes3","DEFAULT_KDF_PARAMS_LOG_N","DEFAULT_KDF_PARAMS_R","DEFAULT_KDF_PARAMS_P","DEFAULT_KEY_SIZE","DEFAULT_IV_SIZE","removeHexPrefix","encryptKeystoreWallet","privateKeyBuffer","Address6","randomBytes4","ciphertext","macHashUint8Array","mac","decryptKeystoreWallet","jsonWallet","keystoreWallet","ciphertextBuffer","passwordBuffer","macHash","hexlify18","BaseWalletUnlocked","signer","signedMessage","hexlify19","hashedTransaction","signedTransaction","english","Language","Language2","getLowerMask","getUpperMask","getWords","mnemonic","getPhrase","entropyToMnemonicIndices","indices","remainingBits","checksumBits","arrayify17","mnemonicWordsToEntropy","words","wordlist","FuelError22","entropyBits","checksumMask","MasterSecret","MainnetPRV","TestnetPRV","MNEMONIC_SIZES","assertWordList","FuelError23","assertEntropy","assertMnemonic","errorMsg","Mnemonic","phrase","hexlify20","entropyBytes","arrayify18","passphrase","phraseBytes","seedArray","testnet","masterKey","depth","fingerprint","chainCode","extendedKey","sha2563","extraEntropy","randomBytes5","mnemonic_default","HARDENED_INDEX","MainnetPRV2","hexlify21","MainnetPUB","TestnetPRV2","TestnetPUB","base58check","encodeBase582","dataSlice2","sha2564","getExtendedKeyPrefix","isPublic","isPublicExtendedKey","isValidExtendedKey","parsePath","FuelError24","ErrorCode22","HDWallet","config","arrayify19","IL","IR","ki","bn20","Ki","hdwallet","parentFingerprint","validChecksum","hdwallet_default","WalletLocked","WalletUnlocked","generateOptions","childWallet","hdWallet","Wallet","MemoryStorage","_secret","MnemonicVault","numberOfAccounts","wallet","Address7","FuelError25","ErrorCode23","_privateKeys","PrivateKeyVault","pk","Address8","FuelError26","ErrorCode24","ERROR_MESSAGES","FuelError27","ErrorCode25","_vaults","_passphrase","_isLocked","_serializeVaults","serializeVaults_fn","_deserializeVaults","deserializeVaults_fn","_WalletManager","vaultId","vaultState","Address9","vs","vaultConfig","Vault2","vault","oldpass","newpass","isLocked","encryptedData","VaultClass","WalletManager","vaults","Vault","FuelError28","ErrorCode26","_address","StorageAbstract","BLOB_ID_SIZE","REG_ADDRESS_OF_DATA_AFTER_CODE","REG_START_OF_LOADED_CODE","REG_GENERAL_USE","WORD_SIZE2","DATA_OFFSET_INDEX","CONFIGURABLE_OFFSET_INDEX","getBytecodeDataOffset","getBytecodeConfigurableOffset","getBytecodeId","configurableOffset","byteCodeWithoutConfigurableSection","sha2565","getLegacyBlobId","dataOffset","byteCodeWithoutDataSection","getPredicateScriptLoaderInstructions","originalBinary","asm2","REG_PC","REG_SP","REG_IS","getInstructions","numOfInstructions2","asm2.move_","asm2.addi","asm2.bsiz","asm2.ldc","asm2.lw","asm2.sub","asm2.divi","asm2.jmp","getInstructionsNoDataSection","configurableSection","instructionBytes2","blobBytes2","dataSectionLenBytes","loaderBytecode2","numOfInstructions","instructionBytes","blobBytes","fundBlobTx","deployer","blobTxRequest","totalCost","bn21","FuelError29","ErrorCode27","adjustConfigurableOffsets","configurableOffsetDiff","readOnlyConfigurables","deployScriptOrPredicate","loaderInstanceCallback","arrayify20","loaderBytecode","blobOffset","newConfigurableOffsetDiff","newAbi","blobExists","loaderInstance","fundedBlobRequest","getPredicateRoot","arrayify21","codeRoot","hexlify22","hash3","Predicate","configurableConstants","predicateBytes","predicateInterface","Address10","arrayify22","placeholderIndex","hexlify23","mainFn","overrides","Interface4","FuelError30","ErrorCode28","mutatedBytes","predicateInputs","hasEmptyPredicateInputs","FuelConnectorMethods","FuelConnectorMethods2","FuelConnectorEventTypes","FuelConnectorEventTypes2","FuelConnectorEventType","LocalStorage","localStorage","FuelConnector","EventEmitter2","FuelError31","_message","_transaction","_params","_assets","_asset","_networkUrl","_network","_contractId","_abi","_id","eventName","cacheFor","cacheTime","dispatchFuelConnectorEvent","deferPromise","defer","withTimeout","timeoutPromise","FuelError32","HAS_CONNECTOR_TIMEOUT","PING_CACHE_TIME","warn","_Fuel","targetObject","isConnected","networks2","currentNetwork","currentAccount","connectorName","connectResponse","FuelError33","ErrorCode29","currentConnector","unSub","event","hasConnector","requestTimestamp","ping","curConnector","installed","providerOrNetwork","Fuel","AbstractProgram","AbstractContract","getAbisFromAllCalls","functionScopes","funcScope","program","getResultLogs","mainCallConfig","main","otherContractsAbis","InstructionSet","_operations","ops","instructions","calculateScriptDataBaseOffset","callResultToScriptResult","callResult","scriptResultReceipt","returnReceipt","decodeCallResult","decoder","scriptResult","callResultToInvocationResult","call2","ScriptRequest","scriptDataEncoder","scriptResultDecoder2","callScript","DEFAULT_OPCODE_PARAMS","SCRIPT_WRAPPER_CONTRACT_ID","getSingleCallInstructions","callDataOffset","gasForwardedOffset","amountOffset","assetIdOffset","inst","asm.movi","asm.call","asm.RegId","offsets","multiCallInstructions","isReturnType","getMainCallReceipt","scriptResultDecoder","mainCallResult","mainCallInstructionStart","decodeContractCallScriptResult","getCallInstructionsLength","contractCalls","asm.Instruction","getContractCallScript","TOTAL_CALLS","callInstructionsLength","paddedInstructionsLength","paramOffsets","segmentOffset","ASSET_ID_LEN2","encodedSelectorOffset","CONTRACT_ID_LEN2","encodedArgsOffset","callParamOffsets","extractInvocationResult","isMultiCall","decodedResults","encodedResult","func","buildFunctionResult","transactionResponse","txResult","buildDryRunResult","funcScopes","createContractCall","forward","callParameters","BaseInvocationScope","contractCallScript","reduceForwardCoins","requiredCoins","currentAmount","asm2.initWasm","gasLimitOnCalls","contracts","signers","chainIdToHash","gasLimitSpecified","maxFeeSpecified","FunctionInvocationScope","callParams","MultiCallInvocationScope","Contract","accountOrProvider","fragment","funcInvocationScopeCreator","ScriptInvocationScope","programBytes","AbstractScript","Script","ScriptRequest2","createConfig","Commands","getLoaderInstructions","asm","numberOfInstructions","numberOfBlobs","blobIdSize","blobIdBytes","asm.move_","asm.bsiz","asm.ldc","asm.subi","asm.jnzb","asm.sub","asm.divi","asm.jmp","getContractChunks","getContractRoot","getContractStorageRoot","tree","getContractId","hexlifyWithPrefix","CHUNK_SIZE_MULTIPLIER","ContractFactory","deployOptions","keyA","keyB","maxContractSize","chunkSizeMultiplier","createRequest","uniqueBlobIds","uploadedBlobIds","blobIdsToUpload","createMinGas","createMinFee","txIdResolver","txIdPromise","uploadedBlobs","contractSizeLimit","transactionSizeLimit","maxLimit","chainLimit","sizeLimit","blobTx","maxChunkSize","DECIMAL_FUEL","DECIMAL_WEI","DECIMAL_KWEI","DECIMAL_MWEI","DECIMAL_GWEI","DEVNET_NETWORK_URL","TESTNET_NETWORK_URL","Src14OwnedProxy","__Contract","_Src14OwnedProxyFactory","__ContractFactory","Src14OwnedProxyFactory"],"mappings":"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","x_google_ignoreList":[3,5,7,8,9,10,11,12,13,14,15,16,17,18,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,64,65,66,67,68,69]}